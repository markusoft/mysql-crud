<?php
/**
 * @author        	Mark Angelo Angulo
 * @version             1.0
 * @created             12/25/2022
 * @why                 Because Laziness is a Virtue
 */
namespace Mg3lo; use mysqli; class MySqlCrud { private $mysqli; private $prepared_statement; private $sql; private $database; private $db_prefix; private $case = "\163\156\141\153\145"; private $init_config; private $config = array(); private $table_config = array(); private $action = "\147\x65\164"; private $select; private $joins; private $has_where_clause = FALSE; private $wheres; private $where_raws; private $or_wheres; private $where_ins; private $or_where_ins; private $where_not_ins; private $likes; private $or_likes; private $group_bys; private $havings; private $or_havings; private $having_ins; private $or_having_ins; private $having_not_ins; private static $has_having_clause = FALSE; private $sorters = array(); private $orders = array(); private $limit = NULL; private $offset = NULL; private $table; private $primary_key; private $primary_key_value = NULL; private $db_table_case = "\x6d\x69\170\x65\144"; private $db_column_case = "\155\151\x78\x65\x64"; private $reference_tables = array(); private $table_keys = array(); private $table_columns = array(); private $with_tables = array(); private $with_recursive_tables = array(); private $where_with_tables = array(); private $where_pivot_tables = array(); private $where_with_pivot_tables = array(); private $has_tables = array(); private $where_has_tables = array(); private $has_no_tables = array(); private $where_has_no_tables = array(); private $count_tables = array(); private $where_count_tables = array(); private $attach_tables = array(); private $attach_new_tables = array(); private $detach_tables = array(); private $sync_tables = array(); private $sync_new_tables = array(); private $sync_delete_tables = array(); private $all_attached_records = array(); private $all_updated_records = array(); private $all_detached_records = array(); private $all_synced_records = array(); private $inserted_records = array(); private $updated_records = array(); private $is_single = FALSE; private $searched = FALSE; private $is_filtered = FALSE; private $filter_equal_columns = array(); private $filter_search_columns = array(); private $get_parameters = array(); private $result_counter = 0; private $function_calls; private $pivot_values = array(); private $language; private $validation_rules; private $validation_messages; private $validation_errors; public function __construct($config, $language = array()) { $this->init_config = $config; if (!file_exists(dirname(__FILE__) . DIRECTORY_SEPARATOR . "\143\157\x6e\x66\x69\147" . DIRECTORY_SEPARATOR . "\x4d\171\x53\161\x6c\103\162\x75\x64\x2e\x70\150\160")) { goto e17e8; } $this->config = (include dirname(__FILE__) . DIRECTORY_SEPARATOR . "\143\157\x6e\x66\x69\x67" . DIRECTORY_SEPARATOR . "\115\171\123\x71\x6c\103\x72\165\144\56\160\x68\160"); e17e8: if (empty($this->config)) { goto Bcb9b; } $this->config = $this->recursive_change_array_keys_case($this->config, "\165\156\x64\x65\162\x73\x63\157\162\x65"); Bcb9b: $language_array = isset($this->config["\x6c\141\x6e\x67\165\141\147\x65"]) ? $this->config["\154\x61\156\147\165\141\x67\x65"] : []; $this->language = array_replace($language_array, $language); $server = is_callable("\x61\160\141\x63\150\145\137\x72\x65\x71\x75\145\x73\x74\137\150\x65\141\x64\x65\x72\x73") && !empty(apache_request_headers()["\x48\157\x73\x74"]) ? apache_request_headers()["\x48\x6f\163\164"] : $_SERVER["\x53\x45\122\x56\x45\122\x5f\x4e\101\x4d\x45"]; $llc = empty($this->config["\x6c\151\x63\x65\156\163\x65\137\x6b\x65\171"]) ? "\145\x38\66\145\x65\x38\x39\67\x65\x37\x34\64\x36\60\x66\x31\67\x65\146\146\143\63\146\71\x64\x63\x39\143\x36\x62\63\x36\x33\71\x31\142\x63\x64\x38\144\x37\67\x63\x61\142\143\145\145\143\61\144\142\142\x35\x63\67\141\62\x39\x66\x36\142\146\x61" : $this->config["\x6c\x69\143\x65\x6e\x73\x65\137\x6b\145\171"]; $akey = $this::_decrypt("\x4a\125\165\171\106\x39\141\167\103\166\125\x6e\142\165\x34\x52\x53\x64\130\161\x4c\x4b\125\x67\111\146\103\x66\70\60\x38\152\153\113\x75\x38\x66\122\53\150\x34\120\113\x7a\112\114\110\x75\71\x67\132\x78\65\142\150\x79\x58\x31\102\x55\x39\x73\x79\x67\117\150\x47\x6e\171\106\170\122\155\115\170\124\x35\x6f\117\x66\x51\x63\x57\62\116\x41\103\114\157\172\61\x56\53\x56\113\162\122\x2f\x2b\101\x6e\105\x2b\x57\110\x63\122\x39\x6d\x64\145\125\x67\x4c\132\x37\x35\x69\141\x66\117\x59\x41\146\53\132\71\x76\x35\x37\x75\x68\x46\x4f\x48\x47\67\145\146\x31\x56\120\x33\x77\x56\144\124\x5a\106\x65\157\x6c\x47\53\121\x53\143\166\x31\x38\x46\127\144\x44\x37\x72\x69\x4e\x55\x4d\146\x69\65\131\60\x41\123\x33\x36\x4a\162\x6e\67\153\153\147\164\147\153\152\123\x66\x62\x6d\106\x6e\x4b\x7a\x56\115\x2b\113\162\146\116\70\x6a\x61\124\x6e\101\112\151\x58\123\x61\x76\x39\106\112\x43\x72\x4a\x37\x67\x4f\x69\120\x54\x32\114\104\x64\x78\x32\164\157\x37\70\x74\x76\x7a\130\143\121\x76\167\163\127\x58\62\112\127\x76\x6c\x37\142\115\144\x39\64\172\60\x69\132\x54\107\x30\151\71\x6d\x70\141\x4f\62\x34\x45\167\x2b\63\122\x75\x47\x34\x44\x52\x79\x7a\123\57\x59\x33\x51\x37\x65\113\x33\170\x59\x7a\155\132\120\x6c\165\x56\101\x31\70\x6c\x36\131\x6d\142\x54\146\x73\144\105\x44\102\170\112\x6f\x6d\x4f\x64\x45\x48\x78\x49\144\x49\x77\x2f\x4b\163\x72\142\x35\111\x77\x3d\75"); $hashHex = hash("\x73\x68\141\62\65\x36", $server . $akey); if (!($hashHex !== "\145\70\66\x65\145\70\x39\67\x65\x37\x34\x34\66\60\x66\61\67\145\x66\146\143\x33\146\x39\144\143\x39\143\x36\x62\x33\x36\63\71\x31\142\143\144\x38\144\67\x37\x63\x61\x62\143\x65\145\143\x31\144\x62\x62\x35\143\x37\141\x32\x39\146\66\142\x66\x61" && $hashHex !== "\x63\x31\x31\x66\143\142\146\61\x33\62\x30\x61\70\66\x38\x31\x63\65\x61\x61\146\60\66\x37\x64\71\141\x37\71\65\71\61\143\x65\143\x34\64\142\x63\64\x30\x33\x61\146\x64\x39\x36\x35\64\x33\x33\64\65\x37\x61\67\61\x63\x33\65\66\67\62\142" && $hashHex !== $llc)) { goto e1f5d; } echo $this->_lang("\151\x6e\x76\141\x6c\151\144\137\154\151\x63\145\156\x73\x65"); exit; e1f5d: $this->table_config = isset($this->config["\144\141\x74\141\x62\141\163\x65\137\164\x61\142\154\145\163"]) ? $this->config["\x64\141\164\141\142\x61\163\x65\x5f\x74\141\x62\x6c\x65\163"] : []; $this->db_table_case = empty($this->config["\144\142\x5f\164\141\142\154\x65\137\143\x61\163\x65"]) ? $this->db_table_case : $this->config["\x64\142\137\164\x61\x62\154\145\x5f\143\141\163\145"]; $this->db_column_case = empty($this->config["\144\142\137\143\x6f\154\x75\x6d\156\137\x63\x61\163\x65"]) ? $this->db_column_case : $this->config["\x64\142\x5f\x63\157\x6c\x75\155\156\137\x63\x61\163\x65"]; $host = isset($config["\150\x6f\x73\164"]) ? $config["\x68\157\163\x74"] : "\x6c\157\143\141\154\x68\157\163\x74"; $username = isset($config["\x75\163\145\x72\x6e\141\155\145"]) ? $config["\165\x73\145\x72\x6e\x61\x6d\x65"] : "\x72\x6f\x6f\x74"; $password = isset($config["\160\141\163\x73\x77\x6f\162\x64"]) ? $config["\x70\141\163\163\x77\157\162\x64"] : ''; $this->database = isset($config["\144\141\x74\141\142\x61\163\145"]) ? $config["\144\141\164\141\142\x61\163\x65"] : "\144\141\164\x61\x62\x61\x73\x65\137\156\x61\x6d\x65"; $port = isset($config["\160\x6f\162\164"]) ? $config["\x70\157\x72\164"] : NULL; $socket = isset($config["\163\x6f\x63\153\145\164"]) ? $config["\163\157\x63\x6b\x65\x74"] : NULL; $this->db_prefix = isset($config["\x64\142\x5f\160\x72\145\146\x69\x78"]) ? $config["\144\x62\137\160\x72\145\146\x69\170"] : ''; $this->mysqli = new mysqli($host, $username, $password, $this->database, $port, $socket); $this->mysqli->set_charset("\x75\x74\x66\x38"); if (!$this->mysqli->connect_errno) { goto D61d2; } echo $this->_lang("\x66\x61\151\154\145\x64\137\164\x6f\137\x63\x6f\x6e\x6e\x65\x63\x74") . $this->mysqli->connect_error; exit; D61d2: $this::_check_license($llc, $akey); $this->_initialize_validations(); } public function __debugInfo() { return ["\x63\154\141\163\x73" => "\x4d\x79\x53\161\154\103\162\165\144"]; } public function config($key) { $key_case = $this->change_case($key, "\165\156\x64\145\x72\x73\143\x6f\162\145"); return isset($this->config[$key_case]) ? $this->config[$key_case] : NULL; } public function reset() { $this->_reset_variables(); return $this; } public function query($sql, $parameters = array()) { return $this->raw($sql, $parameters); } public function raw($sql, $parameters = array()) { if (!is_string($parameters)) { goto a1fcb; } $parameters = array_map(function ($value) { return trim($value); }, explode("\x2c", $parameters)); a1fcb: $stmt = $this->mysqli->prepare($sql); if (!(is_array($parameters) && !empty($parameters))) { goto Bc5d4; } $stmt->bind_param(str_repeat("\x73", count($parameters)), ...$parameters); Bc5d4: $stmt->execute(); $result = $stmt->get_result(); $columns = $result->fetch_all(MYSQLI_ASSOC); $result->free_result(); $stmt->close(); return $columns; } public function filter_raw($sql, $parameters = NULL) { return $this->filter_query($sql, $parameters); } public function filter_query($sql, $parameters = NULL) { $record = $this->query($sql . "\40\x4c\111\115\111\x54\x20\61", $parameters); $this->sql = "\x53\x45\x4c\105\x43\x54\x20\x2a\40\106\x52\x4f\x4d\x28{$sql}\51\40\x41\123\40\161\x75\x65\162\x79\40"; $fc_columns = empty($record) ? [] : $this->recursive_change_array_case(array_keys($record[0]), $this->db_column_case); $this->filter_search_columns = $fc_columns; return $this->_get_filters($fc_columns); } public function table($table) { $this->_reset_variables(); $this->function_calls[] = ["\x6d\145\164\x68\x6f\x64" => "\x74\x61\142\x6c\145", "\x61\x72\147\163" => func_get_args()]; $table = $this->db_prefix . $this->change_case($table, $this->db_table_case); $table = mysqli_real_escape_string($this->mysqli, $table); $this->table = $table; $this->reference_tables[] = $table; return $this; } public function find($id, $related_table = NULL, $options = array()) { $this->_get_table_columns(); $this->primary_key = !empty($options["\160\162\x69\155\141\x72\x79\137\153\x65\171"]) ? $this->change_case($options["\160\x72\151\x6d\x61\162\171\137\153\x65\171"], $this->db_column_case) : $this->_get_primary_key($this->table); $this->primary_key_value = $id; if (empty($related_table)) { goto B213e; } $related_table = $this->change_case($related_table, $this->db_table_case); $this->reference_tables[] = $this->db_prefix . $related_table; $this->_get_table_keys(); if (empty($this->table_keys[$this->table][$related_table])) { goto f4dcb; } $reference_keys = []; $this->_get_table_columns(); if (!(empty($options["\162\145\x66\145\x72\x65\156\x63\151\x6e\x67\x5f\x6b\x65\x79"]) || empty($options["\x72\x65\146\145\162\145\x6e\x63\145\x64\137\x6b\145\x79"]))) { goto acdca; } $this->_get_table_keys(); $reference_keys = $this->_get_reference_keys($related_table, $this->table); acdca: f4dcb: $config_keys = ["\160\151\x76\157\164\137\164\141\x62\154\145" => NULL, "\162\145\x66\145\162\145\x6e\x63\151\x6e\147\137\153\145\x79" => NULL, "\x72\x65\x66\x65\x72\x65\x6e\x63\145\x64\x5f\x6b\145\x79" => NULL, "\160\x69\x76\157\164\137\x72\145\146\145\162\145\x6e\143\151\156\x67\x5f\x6b\145\x79" => NULL, "\160\x69\166\x6f\x74\x5f\162\x65\x66\145\162\145\x6e\x63\145\144\137\153\x65\x79" => NULL]; if (!empty($this->table_keys[$this->table][$related_table])) { goto Aa6c8; } $fc_table_config = $this->recursive_change_array_keys_case($this->table_config, $this->case); $fc_base_table = $this->change_case($this->table, $this->case); $fc_related_table = $this->change_case($related_table, $this->case); $fc_related_tables_word = $this->change_case("\x72\145\x6c\x61\164\x65\144\137\164\x61\142\x6c\145\x73", $this->case); $fc_table_word = $this->change_case("\164\x61\142\154\x65", $this->case); $fc_referencing_key_word = $this->change_case("\x72\x65\x66\x65\x72\145\156\143\x69\156\147\x5f\153\x65\x79", $this->case); $fc_referenced_key_word = $this->change_case("\x72\x65\x66\x65\x72\x65\x6e\143\x65\144\137\153\x65\171", $this->case); $fc_pivot_table_word = $this->change_case("\160\x69\x76\157\164\137\x74\141\x62\154\x65", $this->case); $fc_pivot_referencing_key_word = $this->change_case("\160\151\166\x6f\x74\x5f\162\145\x66\145\162\x65\x6e\x63\151\156\147\x5f\x6b\145\171", $this->case); $fc_pivot_referenced_key_word = $this->change_case("\160\x69\166\x6f\x74\x5f\x72\145\x66\145\x72\x65\x6e\x63\x65\144\x5f\153\145\x79", $this->case); if (empty($fc_table_config[$fc_base_table][$fc_related_tables_word][$fc_related_table])) { goto f2562; } $crt = $fc_table_config[$fc_base_table][$fc_related_tables_word][$fc_related_table]; if (empty($crt[$fc_table_word])) { goto D8c75; } $related_table = $this->change_case($crt[$fc_table_word], $this->db_table_case); $config_keys["\x72\145\154\141\164\x65\x64\x5f\x74\141\x62\x6c\x65"] = $related_table; D8c75: if (empty($crt[$fc_referencing_key_word])) { goto Fb74e; } $config_keys["\162\x65\x66\x65\x72\145\x6e\143\151\x6e\x67\137\x6b\x65\x79"] = empty($referencing_key) ? $this->change_case($crt[$fc_referencing_key_word], $this->db_column_case) : $config_keys["\x72\x65\146\145\x72\x65\x6e\x63\151\156\147\x5f\153\145\x79"]; Fb74e: if (empty($crt[$fc_referenced_key_word])) { goto f953e; } $config_keys["\x72\145\146\145\x72\x65\156\143\x65\144\137\153\145\171"] = empty($referenced_key) ? $this->change_case($crt[$fc_referenced_key_word], $this->db_column_case) : $config_keys["\162\x65\x66\145\162\145\x6e\x63\x65\x64\x5f\x6b\145\171"]; f953e: if (empty($crt[$fc_pivot_table_word])) { goto bb842; } $config_keys["\x70\x69\x76\x6f\164\x5f\164\x61\142\x6c\x65"] = empty($pivot_table) ? $this->change_case($crt[$fc_pivot_table_word], $this->db_table_case) : $config_keys["\160\x69\166\157\164\137\x74\x61\142\x6c\145"]; bb842: if (empty($crt[$fc_pivot_referencing_key_word])) { goto Fedb0; } $config_keys["\x70\151\x76\x6f\x74\x5f\162\x65\146\145\x72\x65\x6e\x63\x69\x6e\x67\137\153\145\x79"] = empty($pivot_referencing_key) ? $this->change_case($crt[$fc_pivot_referencing_key_word], $this->db_column_case) : $config_keys["\x70\x69\x76\x6f\164\137\x72\x65\x66\145\x72\145\x6e\x63\x69\x6e\x67\x5f\x6b\x65\171"]; Fedb0: if (empty($crt[$fc_pivot_referenced_key_word])) { goto E4182; } $config_keys["\x70\151\x76\x6f\164\x5f\162\145\x66\x65\x72\x65\156\143\145\144\137\x6b\x65\x79"] = empty($pivot_referenced_key) ? $this->change_case($crt[$fc_pivot_referenced_key_word], $this->db_column_case) : $config_keys["\160\x69\166\157\x74\137\162\145\x66\x65\x72\145\x6e\143\x65\144\137\153\x65\171"]; E4182: f2562: $reference_keys = $this->_get_reference_keys($related_table, $this->table, $config_keys["\160\151\x76\157\x74\x5f\x74\141\142\x6c\x65"], $config_keys["\162\145\x66\x65\162\145\x6e\143\151\156\147\137\153\x65\x79"], $config_keys["\x72\x65\x66\145\162\145\x6e\143\x65\x64\x5f\153\x65\x79"], $config_keys["\x70\151\166\x6f\x74\137\x72\145\146\x65\162\x65\x6e\143\x69\x6e\x67\137\153\x65\x79"], $config_keys["\160\x69\x76\157\164\137\162\x65\x66\145\162\x65\156\x63\145\x64\137\x6b\145\x79"]); Aa6c8: if (!(empty($reference_keys["\x70\151\x76\157\164\x5f\x74\x61\142\154\145"]) && !empty($reference_keys["\x72\145\146\145\x72\x65\x6e\x63\151\156\x67\x5f\153\x65\x79"]) && !empty($reference_keys["\x72\x65\x66\145\x72\x65\156\x63\145\144\137\x6b\x65\171"]))) { goto cd005; } $reference_keys["\162\145\x66\145\162\x65\156\x63\x69\156\147\137\153\x65\x79"] = !empty($options["\162\145\146\x65\x72\x65\x6e\143\151\156\x67\137\153\x65\x79"]) ? $this->change_case($options["\162\x65\146\145\162\x65\x6e\143\x69\156\x67\x5f\153\145\x79"], $this->db_column_case) : $reference_keys["\162\145\146\x65\162\145\156\143\151\x6e\147\137\153\145\x79"]; $reference_keys["\x72\145\x66\x65\x72\145\156\143\x65\x64\x5f\x6b\x65\171"] = !empty($options["\162\x65\x66\145\x72\145\x6e\x63\145\x64\x5f\153\145\171"]) ? $this->change_case($options["\x72\145\146\x65\162\x65\x6e\x63\x65\144\137\153\145\x79"], $this->db_column_case) : $reference_keys["\162\145\146\145\x72\145\x6e\x63\x65\x64\137\153\145\171"]; $old_primary = $this->primary_key; $old_id = $id; $this->old_table = $this->table; $this->table = $related_table; $this->primary_key = $this->_get_primary_key($related_table); $parent = sprintf("\x53\x45\114\105\103\124\x20\x60\45\x73\140\x2e\140\45\163\x60\40\106\x52\x4f\115\x20\140\45\x73\x60\40\127\x48\105\122\x45\40\140\x25\163\x60\x20\x3d\x20\45\x73", mysqli_real_escape_string($this->mysqli, $this->old_table), mysqli_real_escape_string($this->mysqli, $reference_keys["\x72\x65\x66\145\162\145\156\x63\145\x64\x5f\x6b\145\171"]), mysqli_real_escape_string($this->mysqli, $this->old_table), mysqli_real_escape_string($this->mysqli, $old_primary), mysqli_real_escape_string($this->mysqli, $old_id)); $this->table($related_table)->where_raw($reference_keys["\162\145\x66\145\162\x65\156\x63\151\156\x67\137\x6b\145\x79"] . "\x20\x49\x4e\x20\x28{$parent}\x29"); return $this; cd005: $pivot_table = NULL; if (!(!empty($this->table_keys[$this->table]) && !empty($this->table_keys[$related_table]))) { goto d4d32; } $table_keys = array_keys($this->table_keys[$this->table]); $related_keys = array_keys($this->table_keys[$related_table]); $pivot_tables = array_intersect($table_keys, $related_keys); $pivot_table = NULL; foreach ($pivot_tables as $pivot) { $pivot_table = $pivot; goto C1332; F2e2c: } C1332: d4d32: if (!(empty($this->table_keys[$this->table]) && empty($this->table_keys[$related_table]))) { goto De143; } $pivot_table = $config_keys["\x70\151\x76\157\x74\x5f\x74\141\x62\154\145"]; De143: if (empty($options["\160\x69\x76\157\x74\137\164\x61\x62\x6c\145"])) { goto B4d8b; } $pivot_table = $this->change_case($options["\160\x69\x76\x6f\x74\x5f\164\x61\x62\x6c\x65"], $this->db_table_case); B4d8b: if (empty($pivot_table)) { goto Fd542; } $this->reference_tables[] = $this->db_prefix . $related_table; $this->reference_tables[] = $this->db_prefix . $pivot_table; $this->_get_table_columns(); $old_primary = $this->primary_key; $old_id = $id; $reference_keys = []; if (!(empty($options["\x72\145\146\145\x72\x65\156\143\151\x6e\x67\x5f\x6b\x65\x79"]) || empty($options["\x72\145\146\x65\162\145\x6e\x63\x65\x64\x5f\153\145\x79"]))) { goto E8af8; } $this->_get_table_keys(); $reference_keys = $this->_get_reference_keys($pivot_table, $this->table, NULL, $config_keys["\x72\145\146\x65\x72\145\x6e\143\151\156\147\x5f\153\145\x79"], $config_keys["\x72\145\x66\x65\x72\x65\156\x63\145\x64\137\x6b\145\171"]); E8af8: $reference_keys["\162\x65\x66\x65\x72\x65\156\x63\x69\x6e\147\x5f\153\x65\x79"] = !empty($options["\x72\145\x66\145\162\x65\156\x63\x69\x6e\x67\137\x6b\x65\x79"]) ? $this->change_case($options["\162\145\x66\145\x72\145\x6e\143\151\x6e\x67\137\153\145\171"], $this->db_column_case) : $reference_keys["\162\x65\x66\x65\x72\x65\x6e\143\151\x6e\147\x5f\153\x65\x79"]; $reference_keys["\162\x65\x66\145\x72\x65\x6e\x63\145\144\x5f\153\x65\x79"] = !empty($options["\162\145\146\x65\162\x65\156\143\x65\x64\137\x6b\145\171"]) ? $this->change_case($options["\162\x65\x66\x65\162\145\x6e\143\145\144\x5f\x6b\x65\171"], $this->db_column_case) : $reference_keys["\x72\x65\146\x65\x72\145\x6e\x63\145\144\x5f\x6b\x65\x79"]; $pivot_reference_keys = []; if (!(empty($options["\x70\x69\166\x6f\164\137\x72\x65\x66\145\162\x65\x6e\143\x69\156\x67\x5f\x6b\145\171"]) || empty($options["\160\151\166\x6f\x74\137\x72\145\146\x65\x72\x65\156\143\x65\x64\x5f\x6b\x65\171"]))) { goto f9b92; } $this->_get_table_keys(); $pivot_reference_keys = $this->_get_reference_keys($pivot_table, $related_table, NULL, $config_keys["\x70\x69\166\x6f\164\137\x72\145\146\145\x72\145\156\143\x69\x6e\147\x5f\153\145\x79"], $config_keys["\x70\x69\x76\157\x74\137\x72\x65\x66\145\162\x65\x6e\143\x65\x64\137\153\x65\171"]); f9b92: $pivot_reference_keys["\162\x65\146\145\x72\x65\156\x63\151\156\147\137\153\145\171"] = !empty($options["\160\151\x76\157\x74\x5f\x72\145\x66\145\162\145\156\143\x69\156\147\137\153\x65\171"]) ? $this->change_case($options["\x70\151\x76\x6f\x74\137\x72\145\x66\x65\x72\x65\156\x63\151\x6e\x67\x5f\x6b\145\171"], $this->db_column_case) : $pivot_reference_keys["\162\x65\x66\145\x72\145\x6e\143\151\156\147\x5f\x6b\145\x79"]; $pivot_reference_keys["\x72\x65\x66\145\162\x65\156\x63\145\x64\137\153\x65\171"] = !empty($options["\x70\x69\x76\x6f\x74\137\162\145\146\x65\x72\145\x6e\143\x65\144\137\x6b\145\x79"]) ? $this->change_case($options["\x70\151\166\x6f\164\137\x72\145\x66\145\162\145\x6e\143\145\144\x5f\x6b\145\171"], $this->db_column_case) : $pivot_reference_keys["\162\x65\x66\x65\x72\145\x6e\143\x65\144\137\x6b\145\171"]; $this->old_table = $this->table; $this->pivot_table = $pivot_table; $this->table = $related_table; $this->primary_key = $this->_get_primary_key($related_table); if (!empty($reference_keys["\x72\x65\146\145\162\145\x6e\x63\x69\156\147\x5f\x6b\145\x79"]) && !empty($pivot_reference_keys["\162\145\146\x65\x72\145\x6e\x63\145\x64\137\153\x65\171"])) { goto Dc7ba; } $this->is_single = TRUE; $this->validation_errors[$this->_lang("\x6d\145\164\x68\x6f\144\x5f\x63\150\x61\x69\156")][$this->_lang("\x66\151\156\x64")] = $this->_lang("\x75\156\162\145\x6c\x61\164\145\x64\x5f\164\141\x62\154\145\x73"); return $this; goto c1b1c; Dc7ba: $repo = new self($this->init_config); $parent = sprintf("\123\105\114\x45\103\124\x20\x60\45\x73\140\x2e\140\45\163\x60\40\x46\122\x4f\x4d\40\140\x25\x73\x60\x20\x57\x48\x45\x52\x45\40\x60\x25\x73\x60\x20\75\x20\45\x73", mysqli_real_escape_string($this->mysqli, $this->old_table), mysqli_real_escape_string($this->mysqli, $reference_keys["\162\x65\x66\x65\162\145\156\x63\x65\x64\x5f\153\145\x79"]), mysqli_real_escape_string($this->mysqli, $this->old_table), mysqli_real_escape_string($this->mysqli, $old_primary), mysqli_real_escape_string($this->mysqli, $old_id)); $pivots = $this->table($pivot_table)->where_raw($reference_keys["\x72\145\x66\x65\162\x65\156\143\151\156\147\137\x6b\x65\x79"] . "\40\x49\x4e\x20\x28{$parent}\51")->get(); $this->pivot_values["\162\x65\146\145\162\x65\x6e\x63\145\x5f\153\x65\x79"] = $pivot_reference_keys["\162\145\x66\x65\x72\x65\156\x63\x65\x64\137\153\x65\x79"]; $this->pivot_values["\162\x65\x66\145\x72\145\156\x63\x65\137\164\141\142\x6c\x65"] = $pivot_table; foreach ($pivots as $pivot) { if (!empty($this->pivot_values[$pivot[$pivot_reference_keys["\162\145\146\145\162\x65\x6e\143\x69\156\x67\137\x6b\x65\171"]]])) { goto a3a33; } $this->pivot_values[$pivot[$pivot_reference_keys["\x72\x65\146\145\x72\x65\156\x63\x69\x6e\147\x5f\153\145\171"]]] = [$pivot]; goto A2949; a3a33: $this->pivot_values[$pivot[$pivot_reference_keys["\x72\x65\x66\x65\162\x65\156\x63\151\x6e\x67\137\x6b\x65\x79"]]][] = $pivot; A2949: A1ec3: } C9980: $where_ins = array_column($pivots, $pivot_reference_keys["\x72\x65\146\145\162\x65\x6e\x63\x69\156\x67\137\x6b\145\171"]); $where_ins = !empty($where_ins) ? $where_ins : ["\x6e\x6f\x6e\145"]; $this->table($related_table)->where_in($pivot_reference_keys["\x72\x65\x66\145\162\145\x6e\143\x65\144\137\x6b\145\171"], $where_ins); c1b1c: return $this; Fd542: $this->is_single = TRUE; $this->validation_errors[$this->_lang("\155\x65\164\x68\157\x64\137\143\x68\141\151\156")][$this->_lang("\146\151\156\x64")] = $this->_lang("\165\156\x72\x65\154\x61\x74\x65\x64\137\164\x61\142\154\x65\x73"); return $this; goto e2ac1; B213e: $this->function_calls[] = ["\155\145\x74\150\157\144" => "\x77\x68\145\x72\x65", "\x61\x72\x67\163" => [$this->primary_key, $id]]; $this->is_single = TRUE; $this->where($this->primary_key, $id); return $this; e2ac1: } public function select($select) { if (!is_string($select)) { goto A0091; } $select = explode("\54", $select); A0091: if (!is_numeric($select)) { goto b82d3; } $select = [$select]; b82d3: if (!is_array($select)) { goto e397e; } $select = array_map(function ($value) { return mysqli_real_escape_string($this->mysqli, trim($value)); }, $select); $this->select = implode("\54", $select); e397e: return $this; } public function select_raw($select) { $this->select = $select; return $this; } public function search($search, $columns = array()) { if (empty($this->filter_search_columns)) { goto Fd743; } $table_columns = $this->filter_search_columns; goto dfbc5; Fd743: if (!empty($this->table_columns[$this->table]["\143\x6f\x6c\165\x6d\156\x73"])) { goto ce6ea; } $this->_get_table_columns(); ce6ea: $table_columns = !empty($this->table_columns[$this->table]["\143\157\x6c\x75\155\x6e\163"]) ? array_keys($this->table_columns[$this->table]["\143\x6f\154\x75\155\x6e\163"]) : []; dfbc5: if (!is_string($columns)) { goto fd4df; } $columns = explode("\x2c", $columns); fd4df: if (is_array($columns)) { goto f44cf; } $columns = []; f44cf: $columns = $this->change_array_case($columns, $this->db_column_case); $selected_columns = array_intersect($table_columns, $columns); $selected_columns = empty($selected_columns) ? $table_columns : $selected_columns; if (empty($selected_columns)) { goto A5f35; } $group_search = static function ($query) use($search, $selected_columns) { $counter = 0; foreach ($selected_columns as $key => $column) { if (!($counter === 0 && count($selected_columns) > 1)) { goto B0e4b; } $query->where($column, "\x4c\111\x4b\105", "\45{$search}\x25"); B0e4b: if (!($counter > 0 && $counter < count($selected_columns) - 1)) { goto baf83; } $query->or_where($column, "\x4c\111\x4b\105", "\45{$search}\45"); baf83: if (!($counter === count($selected_columns) - 1 && $counter === 0)) { goto Ed121; } return $query->where($column, "\x4c\x49\113\105", "\x25{$search}\45"); Ed121: if (!($counter === count($selected_columns) - 1 && $counter !== 0)) { goto Ba949; } return $query->or_where($column, "\x4c\x49\x4b\105", "\45{$search}\45"); Ba949: $counter++; C5a28: } E0dc0: }; if ($this->searched) { goto B6b45; } $this->where($group_search); goto Ee373; B6b45: $this->or_where($group_search); Ee373: A5f35: $this->searched = TRUE; return $this; } public function after($date, $columns) { if (is_string($date)) { goto b9389; } $this->validation_errors[$this->_lang("\145\162\x72\157\x72")][$this->_lang("\141\x66\x74\145\x72")] = $this->_lang("\x69\156\166\141\154\151\x64\137\x61\x66\164\x65\162\x5f\x64\141\x74\x65"); return $this; goto af01b; b9389: $fc_date = date("\x59\x2d\x6d\55\144\x20\110\72\x69\x3a\x73", strtotime($date)); af01b: if (is_array($columns)) { goto D6eae; } if (is_string($columns)) { goto f720b; } $fc_columns = []; goto d74f9; f720b: $columns = explode("\54", $columns); $fc_columns = $this->recursive_change_array_case($columns, $this->db_column_case); d74f9: goto C06e8; D6eae: $fc_columns = $this->recursive_change_array_case($columns, $this->db_column_case); C06e8: if (empty($this->filter_search_columns)) { goto cdb26; } $table_columns = $this->filter_search_columns; goto E1da9; cdb26: if (!empty($this->table_columns[$this->table]["\143\157\154\x75\155\156\163"])) { goto a9edc; } $this->_get_table_columns(); a9edc: $table_columns = !empty($this->table_columns[$this->table]["\143\157\x6c\165\155\x6e\x73"]) ? array_keys($this->table_columns[$this->table]["\143\x6f\x6c\165\155\x6e\x73"]) : []; E1da9: $selected_columns = array_intersect($table_columns, $fc_columns); if (!empty($selected_columns)) { goto ecc91; } $this->validation_errors[$this->_lang("\145\x72\162\x6f\x72")][$this->_lang("\141\x66\164\x65\x72\x5f\x66\151\145\x6c\144\x73")] = $this->_lang("\151\x6e\166\141\x6c\151\x64\137\141\146\164\145\162\137\x63\x6f\x6c\x75\155\156\x73"); return $this; ecc91: if (count($selected_columns) > 1) { goto f9925; } foreach ($selected_columns as $column) { $this->where($column, "\x3e", $fc_date); Df9fc: } A7b49: goto A49d1; f9925: $this->where(static function ($query) use($fc_date, $selected_columns) { $counter = 0; foreach ($selected_columns as $key => $column) { if (!($counter === 0 && count($selected_columns) > 1)) { goto D97a7; } $query->where($column, "\76", $fc_date); D97a7: if (!($counter > 0 && $counter < count($selected_columns) - 1)) { goto fce56; } $query->or_where($column, "\x3e", $fc_date); fce56: if (!($counter === count($selected_columns) - 1 && $counter === 0)) { goto A441b; } return $query->where($column, "\76", $fc_date); A441b: if (!($counter === count($selected_columns) - 1 && $counter !== 0)) { goto aa2d5; } return $query->or_where($column, "\x3e", $fc_date); aa2d5: $counter++; b373e: } B54e2: }); A49d1: return $this; } public function filter() { if (!empty($this->table_columns[$this->table]["\143\157\x6c\165\x6d\x6e\163"])) { goto Abe5a; } $this->_get_table_columns(); Abe5a: $table_columns = !empty($this->table_columns[$this->table]["\x63\157\x6c\165\155\x6e\x73"]) ? array_keys($this->table_columns[$this->table]["\x63\x6f\x6c\x75\x6d\x6e\x73"]) : []; return $this->_get_filters($table_columns); } private function _get_filters($table_columns) { $this->is_filtered = TRUE; $get_params = $_GET; $get_params = !empty($get_params) ? $this->recursive_change_array_keys_case($get_params, "\x75\156\x64\145\162\x73\x63\157\x72\145") : []; if (empty($get_params["\x6c\151\155\x69\164"])) { goto c21c2; } if (is_array($get_params["\154\151\155\x69\164"]) && !empty($get_params["\x6c\151\155\151\164"][0])) { goto C436d; } if (is_string($get_params["\154\151\155\151\x74"])) { goto ca051; } unset($get_params["\x6c\151\155\x69\164"]); goto df9df; ca051: $get_params["\x6c\151\155\x69\x74"] = $get_params["\154\x69\x6d\x69\164"]; df9df: goto fb52a; C436d: $get_params["\154\x69\155\x69\164"] = $get_params["\154\151\x6d\151\x74"][0]; fb52a: c21c2: if (empty($get_params["\157\146\x66\163\x65\x74"])) { goto Ee924; } if (is_array($get_params["\x6f\x66\x66\163\x65\164"]) && !empty($get_params["\x6f\x66\146\163\x65\164"][0])) { goto dbb31; } if (is_string($get_params["\x6f\x66\x66\163\145\164"])) { goto a38e1; } unset($get_params["\x6f\146\146\x73\x65\x74"]); goto D2827; a38e1: $get_params["\x6f\146\146\163\145\164"] = $get_params["\157\146\x66\x73\x65\x74"]; D2827: goto b342e; dbb31: $get_params["\x6f\x66\x66\163\145\164"] = $get_params["\157\x66\x66\x73\145\164"][0]; b342e: Ee924: if (empty($get_params)) { goto bfcbd; } foreach ($get_params as $key => $param) { $fixed_case = $this->change_case($key, $this->db_column_case); if (!in_array($fixed_case, $table_columns)) { goto Ccdab; } $this->filter_equal_columns[$fixed_case] = $param; Ccdab: c0bd4: } a8d64: bfcbd: if (empty($get_params["\163\x65\x61\162\143\150"])) { goto Ed70a; } if (is_array($get_params["\163\145\x61\x72\x63\150"])) { goto e517e; } if (is_string($get_params["\163\x65\x61\x72\143\150"])) { goto cf776; } $get_params["\x73\145\x61\x72\143\x68"] = []; goto c2da3; cf776: $get_params["\x73\145\x61\162\x63\150"] = explode("\54", $get_params["\x73\x65\141\162\x63\150"]); c2da3: goto dfdd2; e517e: $get_params["\163\145\x61\x72\143\x68"] = $get_params["\x73\x65\141\x72\x63\150"]; dfdd2: Ed70a: if (empty($get_params["\163\145\x61\162\x63\x68\137\x66\x69\145\154\144\x73"])) { goto ae48a; } if (is_array($get_params["\x73\x65\x61\162\x63\150\137\x66\x69\x65\154\x64\x73"])) { goto F18a9; } if (is_string($get_params["\x73\x65\x61\162\x63\x68\x5f\146\x69\x65\x6c\x64\163"])) { goto C1f53; } $get_params["\x73\145\141\162\x63\x68\x5f\x66\x69\145\154\144\163"] = []; goto F8c3d; C1f53: $search_fields = explode("\54", $get_params["\163\x65\141\162\x63\x68\x5f\x66\151\x65\x6c\x64\x73"]); $get_params["\x73\x65\141\x72\143\x68\x5f\x66\x69\145\154\144\163"] = $this->change_array_case($search_fields, $this->db_column_case); F8c3d: goto E97be; F18a9: $search_fields = $get_params["\163\x65\141\x72\x63\150\x5f\146\151\x65\x6c\144\x73"]; $get_params["\163\x65\141\x72\143\x68\x5f\146\151\145\154\144\163"] = $this->change_array_case($search_fields, $this->db_column_case); E97be: ae48a: if (empty($get_params["\141\146\x74\145\x72\x5f\146\x69\145\154\144\163"])) { goto fac71; } if (is_array($get_params["\x61\146\x74\145\162\137\x66\151\x65\x6c\144\163"])) { goto a4c45; } if (is_string($get_params["\141\146\x74\x65\162\137\x66\151\145\x6c\144\x73"])) { goto a57b5; } $get_params["\x61\x66\x74\x65\162\137\146\151\145\x6c\144\x73"] = []; goto A8b17; a57b5: $after_fields = explode("\54", $get_params["\141\x66\x74\x65\162\137\x66\x69\145\x6c\144\163"]); $get_params["\141\146\164\145\x72\137\x66\151\145\154\144\x73"] = $this->change_array_case($after_fields, $this->db_column_case); A8b17: goto d2f62; a4c45: $after_fields = $get_params["\141\x66\164\145\x72\137\146\151\x65\x6c\x64\163"]; $get_params["\x61\x66\164\145\162\x5f\146\x69\145\x6c\144\163"] = $this->change_array_case($after_fields, $this->db_column_case); d2f62: fac71: if (empty($get_params["\x73\157\x72\x74"])) { goto Aad1a; } if (is_array($get_params["\163\x6f\x72\164"])) { goto c75b7; } if (is_string($get_params["\163\157\x72\x74"])) { goto e649a; } $get_params["\x73\157\162\164\145\x72\163"] = []; goto Ba15c; e649a: $sorters = explode("\54", $get_params["\x73\157\x72\x74"]); $get_params["\163\157\162\x74\145\162\x73"] = $this->change_array_case($sorters, $this->db_column_case); Ba15c: goto C524b; c75b7: $sorters = $get_params["\x73\157\x72\164"]; $get_params["\163\x6f\162\164\x65\x72\x73"] = $this->change_array_case($sorters, $this->db_column_case); C524b: Aad1a: if (empty($get_params["\157\162\144\x65\162"])) { goto Bbf8f; } if (is_array($get_params["\157\162\x64\145\x72"])) { goto A6830; } if (is_string($get_params["\157\162\x64\145\x72"])) { goto C1c90; } $get_params["\x6f\x72\x64\x65\162\163"] = []; goto Be06f; C1c90: $get_params["\157\162\144\145\x72\x73"] = explode("\x2c", $get_params["\x6f\162\144\145\x72"]); Be06f: goto B40c2; A6830: $get_params["\x6f\162\144\x65\162\x73"] = $get_params["\157\x72\x64\145\162"]; B40c2: Bbf8f: $rules = ["\154\x69\155\151\x74" => ["\162\x65\x6e\141\x6d\145" => "\154\151\155\x69\x74", "\x72\x75\x6c\x65\163" => "\163\x6f\x6d\145\x74\x69\155\x65\x73\x7c\x69\156\x74\145\x67\145\x72\174\x6d\151\156\x3a\60"], "\157\146\146\x73\145\164" => ["\162\145\156\141\155\145" => "\x6f\146\146\163\x65\x74", "\x72\165\x6c\145\163" => "\163\157\155\x65\x74\x69\x6d\x65\x73\x7c\151\156\x74\145\x67\145\162\174\155\151\156\72\x2d\61"], "\x63\141\163\x65" => ["\162\145\x6e\141\155\145" => "\x63\141\x73\x65", "\162\x75\154\145\163" => "\163\157\155\x65\164\151\x6d\x65\x73\x7c\x69\156\x3a\143\x61\155\145\x6c\x2c\144\x61\163\150\54\x70\x61\163\x63\141\154\x2c\163\x6e\x61\153\x65\54\165\156\144\x65\x72\163\x63\x6f\x72\145"], "\146\x6f\162\x6d\141\164" => ["\x72\x65\156\x61\x6d\x65" => "\x66\157\162\155\141\164", "\162\x75\154\145\x73" => "\163\157\x6d\x65\164\x69\155\x65\x73\x7c\x69\156\72\x63\x73\166\54\152\163\157\x6e\x2c\152\x73\x6f\x6e\x70\54\x73\x65\162\151\141\154\x69\x7a\x65\144\54\x78\155\x6c"]]; $table_fields = implode("\x2c", $table_columns); if (empty($get_params["\x73\x65\141\x72\x63\150\137\x66\151\x65\x6c\x64\163"])) { goto e2f95; } foreach ($get_params["\163\x65\141\162\x63\x68\x5f\x66\x69\x65\x6c\144\163"] as $key => $field) { $rules["\163\145\141\x72\143\150\137\146\151\x65\x6c\x64\x73\56{$key}"] = ["\x72\145\x6e\x61\x6d\x65" => "\163\x65\x61\162\x63\x68\x20\x66\x69\x65\x6c\x64", "\162\165\x6c\145\x73" => "\x69\x6e\72{$table_fields}"]; Dee22: } B6887: e2f95: if (empty($get_params["\141\146\x74\145\162"])) { goto F0936; } $rules["\x61\x66\164\145\162\137\x66\151\x65\x6c\144\163\56\x30"] = ["\162\x65\x6e\x61\x6d\145" => "\141\x66\164\145\x72\40\146\x69\145\154\144", "\x72\x75\x6c\x65\x73" => "\162\145\x71\x75\151\x72\145\x64"]; F0936: if (empty($get_params["\x61\x66\164\x65\162\x5f\x66\151\x65\154\x64\163"])) { goto e7f6c; } foreach ($get_params["\141\146\164\x65\x72\x5f\146\x69\x65\x6c\144\163"] as $key => $field) { $rules["\x61\x66\164\x65\x72\137\x66\151\x65\x6c\144\163\56{$key}"] = ["\162\145\x6e\x61\x6d\x65" => "\x61\146\164\145\162\x20\x66\151\145\x6c\x64", "\162\x75\154\x65\x73" => "\x69\156\72{$table_fields}"]; a2baf: } d5ae3: e7f6c: if (empty($get_params["\x73\157\162\x74\145\x72\163"])) { goto ff088; } foreach ($get_params["\x73\157\162\x74\145\162\x73"] as $key => $sort) { $rules["\x73\x6f\162\x74\145\x72\163\x2e{$key}"] = ["\162\x65\156\141\x6d\x65" => "\x73\157\x72\x74", "\x72\165\154\x65\x73" => "\151\156\72{$table_fields}"]; F3cf0: } Ae6e1: ff088: if (empty($get_params["\x6f\162\x64\x65\162\x73"])) { goto d87ec; } foreach ($get_params["\x6f\162\144\145\x72\x73"] as $key => $order) { $rules["\157\162\x64\x65\x72\x73\56{$key}"] = ["\x72\x65\x6e\x61\155\x65" => "\x6f\x72\x64\145\162", "\162\x75\154\x65\163" => "\x69\x6e\72\x61\x73\x63\x2c\x64\x65\x73\x63\x2c\101\x73\143\54\104\145\x73\x63"]; eab3c: } C5542: d87ec: $this->get_parameters = $get_params; $this->validate($get_params, $rules); return $this; } public function where($column, $operation = null, $value = null) { $this->_wheres($this->wheres, $column, $operation, $value); return $this; } public function where_raw($sql) { $this->where_raws[] = $sql; return $this; } public function or_where($column, $operation = null, $value = null) { $this->_wheres($this->or_wheres, $column, $operation, $value); return $this; } public function where_in($column, $in) { $this->_where_ins($this->where_ins, $column, $in); return $this; } public function or_where_in($column, $in) { $this->_where_ins($this->or_where_ins, $column, $in); return $this; } public function where_not_in($column, $in) { $this->_where_ins($this->where_not_ins, $column, $in); return $this; } public function like($column, $like) { $this->likes[] = ["\143\x6f\x6c\165\x6d\156" => $column, "\166\141\x6c\x75\x65" => $like]; return $this; } public function or_like($column, $like) { $this->or_likes[] = ["\x63\157\x6c\165\x6d\156" => $column, "\x76\x61\x6c\x75\x65" => $like]; return $this; } public function having($column, $operation = null, $value = null) { $this->_wheres($this->havings, $column, $operation, $value); return $this; } public function or_having($column, $operation = null, $value = null) { $this->_wheres($this->or_havings, $column, $operation, $value); return $this; } public function having_in($column, $in) { $this->_where_ins($this->having_ins, $column, $in); return $this; } public function or_having_in($column, $in) { $this->_where_ins($this->or_having_ins, $column, $in); return $this; } public function having_not_in($column, $in) { $this->_where_ins($this->having_not_ins, $column, $in); return $this; } private function _wheres(&$where, $columns, $operation = null, $value = null) { if (!is_string($columns)) { goto D3f59; } $where[] = ["\143\157\154\165\x6d\x6e" => $columns, "\x6f\160\x65\x72\x61\164\151\157\x6e" => isset($value) && isset($operation) ? $operation : "\x3d", "\166\x61\x6c\165\145" => isset($value) ? $value : $operation]; D3f59: if (!is_array($columns)) { goto df22a; } if (!is_string($columns[0])) { goto ff91c; } $column = $columns; $where[] = ["\x63\157\154\x75\x6d\156" => $column[0], "\x6f\160\145\x72\x61\164\x69\x6f\156" => isset($column[2]) && isset($column[1]) ? $column[1] : "\75", "\166\141\154\x75\x65" => isset($column[2]) ? $column[2] : $column[1]]; ff91c: if (!is_array($columns[0])) { goto Ce75f; } foreach ($columns as $column) { if (!is_string($column[0])) { goto f4d81; } $where[] = ["\143\157\x6c\165\155\x6e" => $column[0], "\157\160\145\162\141\x74\x69\157\156" => isset($column[2]) && isset($column[1]) ? $column[1] : "\75", "\x76\x61\154\165\x65" => isset($column[2]) ? $column[2] : $column[1]]; f4d81: C9ecd: } D00dc: Ce75f: df22a: if (!is_callable($columns)) { goto cec90; } $where[] = $columns; cec90: } private function _where_ins(&$where_in, $column, $ins) { if (!is_string($ins)) { goto d0ede; } $ins = explode("\54", $ins); d0ede: if (!is_numeric($ins)) { goto f715d; } $ins = [$ins]; f715d: if (!is_array($ins)) { goto F63dd; } $ins = array_map(function ($value) { return empty($value) ? $value : mysqli_real_escape_string($this->mysqli, trim($value)); }, $ins); $ins = "\x28\x27" . implode("\x27\x2c\47", $ins) . "\47\x29"; F63dd: if (!is_string($column)) { goto fbfe7; } $where_in[] = ["\143\157\x6c\165\155\156" => $column, "\151\x6e" => $ins]; fbfe7: } public function group_by($group) { $this->group_bys[] = $group; return $this; } public function sort($sort, $order = "\x41\123\x43") { return $this->order_by($sort, $order); } public function order_by($sort, $order = "\101\123\103") { $valid_orders = ["\101\123\x43" => "\x41\123\x43", "\101\x53\x43\x45\116\104\111\x4e\107" => "\x41\x53\103", "\104\105\x53\103" => "\x44\105\123\x43", "\104\105\x53\x43\105\x4e\x44\x49\x4e\107" => "\104\x45\x53\x43"]; if (!in_array(strtoupper($order), $valid_orders)) { goto E04f5; } $this->sorters[] = $sort; $this->orders[] = $valid_orders[strtoupper($order)]; E04f5: return $this; } public function limit($limit, $offset = NULL) { $this->limit = $limit; if (empty($offset)) { goto Dfefd; } $this->offset = $offset; Dfefd: return $this; } public function offset($offset) { $this->offset = $offset; return $this; } public function take($limit, $offset = NULL) { return $this->limit($limit, $offset); } public function skip($offset) { return $this->offset($offset); } public function switch_case($case) { $this->case = $case; return $this; } public function with($table, $options = array()) { $this->function_calls[] = ["\x6d\145\x74\150\x6f\x64" => "\x77\151\x74\x68", "\x61\162\147\x73" => func_get_args()]; $this->_add_reference_table($table, $this->with_tables, NULL, NULL, NULL, FALSE, FALSE, $options); return $this; } public function with_recursive($table, $recursive_options = array(), $options = array()) { $this->_add_reference_table($table, $this->with_recursive_tables, NULL, NULL, NULL, FALSE, FALSE, $options); return $this; } public function where_with($table, $callback, $options = array()) { $this->function_calls[] = ["\155\x65\x74\x68\x6f\144" => "\x77\x68\x65\x72\x65\137\167\x69\x74\150", "\141\x72\147\163" => func_get_args()]; $this->_add_reference_table($table, $this->where_with_tables, NULL, $callback, NULL, FALSE, FALSE, $options); return $this; } public function where_pivot($table, $pivot_callback, $options = array()) { $this->function_calls[] = ["\155\x65\x74\x68\x6f\144" => "\x77\x68\x65\162\145\x5f\160\151\x76\157\164", "\141\x72\x67\x73" => func_get_args()]; $this->_add_reference_table($table, $this->where_pivot_tables, NULL, NULL, $pivot_callback, FALSE, FALSE, $options); return $this; } public function where_with_pivot($table, $callback, $pivot_callback, $options = array()) { $this->function_calls[] = ["\155\x65\x74\x68\x6f\x64" => "\x77\x68\145\162\145\137\x77\x69\x74\150\137\x70\151\166\x6f\164", "\141\x72\147\x73" => func_get_args()]; $this->_add_reference_table($table, $this->where_with_pivot_tables, NULL, $callback, $pivot_callback, FALSE, $delete, $options); return $this; } public function with_custom($name, $callback, $options = array()) { $this->function_calls[] = ["\155\145\x74\x68\x6f\x64" => "\167\151\x74\x68\137\143\165\x73\x74\x6f\155", "\141\162\x67\163" => func_get_args()]; $this->custom_callbacks[] = ["\156\141\x6d\x65" => $name, "\x63\141\154\x6c\x62\141\x63\153" => $callback, "\157\x70\x74\x69\x6f\x6e\163" => $options]; return $this; } public function has($table, $options = array()) { $this->function_calls[] = ["\155\145\164\x68\x6f\x64" => "\x68\141\163", "\141\162\147\163" => func_get_args()]; $this->_add_reference_table($table, $this->has_tables, NULL, NULL, NULL, FALSE, FALSE, $options); return $this; } public function where_has($table, $callback, $options = array()) { $this->function_calls[] = ["\x6d\145\x74\x68\157\144" => "\167\150\x65\x72\x65\x5f\x68\x61\163", "\141\x72\x67\163" => func_get_args()]; $this->_add_reference_table($table, $this->where_has_tables, NULL, $callback, NULL, FALSE, FALSE, $options); return $this; } public function has_no($table, $options = array()) { $this->function_calls[] = ["\155\x65\x74\150\157\144" => "\150\141\x73\137\x6e\157", "\x61\x72\x67\163" => func_get_args()]; $this->_add_reference_table($table, $this->has_no_tables, NULL, NULL, NULL, FALSE, FALSE, $options); return $this; } public function where_has_no($table, $callback, $options = array()) { $this->function_calls[] = ["\x6d\x65\x74\150\x6f\x64" => "\x77\x68\145\x72\145\137\x68\141\163\137\x6e\157", "\x61\162\x67\x73" => func_get_args()]; $this->_add_reference_table($table, $this->where_has_no_tables, NULL, $callback, NULL, FALSE, FALSE, $options); return $this; } public function with_count($table, $options = array()) { $this->function_calls[] = ["\155\145\x74\x68\157\x64" => "\167\151\x74\150\137\x63\157\x75\156\x74", "\x61\x72\147\x73" => func_get_args()]; $this->_add_reference_table($table, $this->count_tables, NULL, NULL, NULL, FALSE, FALSE, $options); return $this; } public function has_count($table, $options = array()) { $this->function_calls[] = ["\x6d\145\164\x68\157\x64" => "\x68\x61\163\137\143\157\x75\x6e\x74", "\141\x72\x67\163" => func_get_args()]; $this->_add_reference_table($table, $this->count_tables, NULL, NULL, NULL, FALSE, FALSE, $options); return $this; } public function attach($table, $records, $options = array()) { $this->_add_attach_detach_table($this->attach_tables, $table, $records, FALSE, $options); return $this; } public function attach_new($table, $records, $new = FALSE, $options = array()) { $this->_add_reference_table($table, $this->attach_new_tables, $records, NULL, NULL, $new, FALSE, $options); return $this; } public function detach($table, $records, $options = array()) { $this->_add_attach_detach_table($this->detach_tables, $table, $records, FALSE, $options); return $this; } public function sync($table, $records, $delete = FALSE, $options = array()) { $this->_add_attach_detach_table($this->sync_tables, $table, $records, $delete, $options); return $this; } public function sync_new($table, $records, $new = FALSE, $delete = FALSE, $options = array()) { $this->_add_reference_table($table, $this->sync_new_tables, $records, NULL, NULL, $new, $delete, $options); return $this; } public function to_sql() { $this->_build_result(); return $this->sql; } public function to_group_query($action) { $this->_query_builder(); return "\x20\x28" . substr($this->sql, strlen($action)) . "\40\51"; } public function close() { $this->mysqli->close(); } public function __call($method, $args) { $this->function_calls[] = ["\x6d\145\164\x68\x6f\x64" => $method, "\x61\x72\x67\163" => $args]; $method_case = $this->change_case($method, "\165\x6e\144\145\x72\163\143\157\x72\145"); if (!method_exists($this, $method_case)) { goto dac28; } return call_user_func_array([$this, $method_case], $args); dac28: return $this; } private function _query_builder() { if (empty($this->where_raws)) { goto D7a98; } foreach ($this->where_raws as $key => $raw) { reset($this->where_raws); $first = $key === key($this->where_raws) ? "\x57\x48\105\x52\x45" : "\x41\x4e\104\40\127\x48\105\122\x45"; $this->sql .= sprintf("\x20\45\x73\x20\45\163", $first, $raw); c3ce7: } Fa24c: $this->has_where_clause = true; D7a98: if (empty($this->wheres)) { goto b7c77; } foreach ($this->wheres as $key => $where) { reset($this->wheres); $first = !$this->has_where_clause && $key === key($this->wheres) ? "\x57\x48\105\122\105" : "\x41\x4e\x44"; if (is_callable($where)) { goto E04fc; } $this->sql .= sprintf("\40\45\163\40\45\x73\x20\x25\163\40\x27\45\163\47", $first, mysqli_real_escape_string($this->mysqli, $where["\x63\157\154\x75\x6d\x6e"]), mysqli_real_escape_string($this->mysqli, $where["\x6f\x70\145\x72\x61\x74\x69\157\x6e"]), mysqli_real_escape_string($this->mysqli, $where["\x76\x61\x6c\165\145"])); goto B3563; E04fc: $repo = new self($this->init_config); $this->sql .= sprintf("\x20\x25\163", $first); $this->sql .= $where($repo)->to_group_query("\x57\x48\105\122\105\x20"); $repo->close(); $repo = NULL; B3563: C28ed: } Ac17f: $this->has_where_clause = true; b7c77: if (empty($this->or_wheres)) { goto e00dd; } foreach ($this->or_wheres as $key => $where) { reset($this->or_wheres); $first = !$this->has_where_clause && $key === key($this->or_wheres) ? "\127\x48\x45\x52\x45" : "\117\122"; if (is_callable($where)) { goto d14e7; } $this->sql .= sprintf("\40\x25\x73\40\45\163\40\x25\163\x20\47\x25\163\x27", $first, mysqli_real_escape_string($this->mysqli, $where["\x63\157\x6c\165\155\x6e"]), mysqli_real_escape_string($this->mysqli, $where["\157\x70\145\162\x61\164\151\157\156"]), mysqli_real_escape_string($this->mysqli, $where["\x76\141\x6c\165\145"])); goto Afffb; d14e7: $repo = new self($this->init_config); $this->sql .= sprintf("\40\45\163", $first); $this->sql .= $where($repo)->to_group_query("\127\x48\105\x52\x45\40"); $repo->close(); $repo = NULL; Afffb: Bbf03: } b8777: $this->has_where_clause = true; e00dd: if (empty($this->where_ins)) { goto E3e03; } foreach ($this->where_ins as $key => $in) { reset($this->where_ins); $first = !$this->has_where_clause && $key === key($this->where_ins) ? "\x57\x48\105\122\105" : "\101\116\104"; $this->sql .= sprintf("\40\x25\163\40\45\163\40\x49\116\40\x25\163", $first, mysqli_real_escape_string($this->mysqli, $in["\143\157\x6c\165\x6d\x6e"]), $in["\x69\x6e"]); Dbfea: } Acedb: $this->has_where_clause = true; E3e03: if (empty($this->or_where_ins)) { goto d519a; } foreach ($this->or_where_ins as $key => $in) { reset($this->or_where_ins); $first = !$this->has_where_clause && $key === key($this->or_where_ins) ? "\x57\x48\x45\x52\105" : "\117\122"; $this->sql .= sprintf("\40\45\x73\40\45\x73\40\111\116\x20\45\x73", $first, mysqli_real_escape_string($this->mysqli, $in["\143\x6f\154\x75\x6d\156"]), $in["\151\x6e"]); d4fdf: } a4da9: $this->has_where_clause = true; d519a: if (empty($this->where_not_ins)) { goto b80c9; } foreach ($this->where_not_ins as $key => $in) { reset($this->where_not_ins); $first = !$this->has_where_clause && $key === key($this->where_not_ins) ? "\x57\110\105\x52\x45" : "\101\x4e\104"; $this->sql .= sprintf("\x20\x25\x73\x20\45\x73\40\116\x4f\124\40\111\116\x20\45\x73", $first, mysqli_real_escape_string($this->mysqli, $in["\x63\157\x6c\165\x6d\x6e"]), $in["\151\156"]); a93be: } Ca9fd: $this->has_where_clause = true; b80c9: if (empty($this->likes)) { goto b102e; } foreach ($this->likes as $key => $like) { reset($this->likes); $first = !$this->has_where_clause && $key === key($this->likes) ? "\127\x48\105\122\105" : "\x41\116\x44"; $this->sql .= sprintf("\40\x25\x73\x20\45\x73\40\x4c\111\113\105\x20\47\45\163\47", $first, mysqli_real_escape_string($this->mysqli, $like["\143\157\x6c\165\155\x6e"]), mysqli_real_escape_string($this->mysqli, $like["\x76\x61\x6c\165\145"])); f634c: } Edc19: $this->has_where_clause = true; b102e: if (empty($this->or_likes)) { goto A3f54; } foreach ($this->or_likes as $key => $like) { reset($this->or_likes); $first = !$this->has_where_clause && $key === key($this->or_likes) ? "\127\110\105\x52\x45" : "\x4f\x52"; $this->sql .= sprintf("\40\x25\163\40\x25\163\x20\114\111\x4b\x45\40\x27\45\x73\x27", $first, mysqli_real_escape_string($this->mysqli, $like["\x63\x6f\x6c\x75\155\x6e"]), mysqli_real_escape_string($this->mysqli, $like["\x76\141\x6c\165\x65"])); a146d: } F7228: $this->has_where_clause = true; A3f54: if (empty($this->has_tables)) { goto D7a94; } foreach ($this->has_tables as $key => $has) { reset($this->has_tables); $first = !$this->has_where_clause && $key === key($this->has_tables) ? "\127\x48\105\x52\x45" : "\x41\116\x44"; if (!($has["\x74\x79\160\145"] === "\146\157\x72\145\151\147\156\x5f\x6b\145\x79")) { goto D021e; } $this->sql .= sprintf("\x20\x25\163\x20\x45\130\x49\123\x54\x53\x20\x28\123\x45\x4c\x45\103\124\40\x31\x20\x46\x52\x4f\x4d\40\x25\x73\x20\x57\x48\105\x52\x45\40\x25\x73\x2e\x25\x73\40\x3d\x20\45\x73\x2e\x25\163\x29", $first, mysqli_real_escape_string($this->mysqli, $has["\164\x61\142\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\164\141\x62\x6c\145"]), mysqli_real_escape_string($this->mysqli, $has["\x72\145\x66\x65\162\x65\156\x63\151\156\x67\x5f\153\x65\171"]), mysqli_real_escape_string($this->mysqli, $has["\162\x65\x6c\x61\x74\x65\144\x5f\164\x61\x62\154\145"]), mysqli_real_escape_string($this->mysqli, $has["\162\145\146\x65\x72\145\156\143\x65\x64\137\x6b\x65\171"])); D021e: if (!($has["\x74\171\x70\x65"] === "\x69\156\x76\x65\x72\163\145\137\x72\x65\154\141\x74\x69\157\156")) { goto A4a80; } $this->sql .= sprintf("\x20\45\163\x20\x25\163\x2e\x25\x73\x20\x49\123\x20\x4e\117\124\x20\x4e\125\114\114", $first, mysqli_real_escape_string($this->mysqli, $has["\162\145\x6c\141\164\x65\x64\x5f\x74\x61\x62\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\x72\145\146\x65\162\x65\156\x63\x65\x64\x5f\153\145\171"])); A4a80: if (!($has["\164\171\160\145"] === "\155\141\x6e\171\x5f\164\157\137\155\x61\x6e\171")) { goto c85ea; } $this->sql .= sprintf("\x20\45\163\x20\x45\130\111\x53\124\123\40\x28\x53\x45\114\x45\x43\124\x20\x31\x20\106\x52\x4f\115\x20\x25\x73\x20\112\117\111\x4e\40\x25\163\40\117\116\40\x25\x73\x2e\45\x73\x20\x3d\x20\45\163\56\x25\x73\40\x57\110\x45\122\x45\x20\x25\163\x2e\x25\x73\40\x3d\x20\x25\163\56\x25\x73\51", $first, mysqli_real_escape_string($this->mysqli, $has["\x70\x69\x76\157\164\x5f\164\141\142\x6c\x65"]), mysqli_real_escape_string($this->mysqli, $has["\x74\x61\142\x6c\x65"]), mysqli_real_escape_string($this->mysqli, $has["\x70\x69\x76\x6f\164\137\x74\x61\142\154\145"]), mysqli_real_escape_string($this->mysqli, $has["\160\x69\x76\157\164\137\162\145\146\145\x72\145\156\143\151\x6e\147\x5f\x6b\145\171"]), mysqli_real_escape_string($this->mysqli, $has["\x74\141\142\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\160\151\166\x6f\x74\137\162\x65\x66\145\x72\x65\156\143\145\x64\137\x6b\145\x79"]), mysqli_real_escape_string($this->mysqli, $has["\x72\x65\x6c\x61\x74\x65\144\137\x74\141\x62\x6c\145"]), mysqli_real_escape_string($this->mysqli, $has["\x72\x65\x66\x65\162\x65\156\x63\x65\144\x5f\x6b\x65\171"]), mysqli_real_escape_string($this->mysqli, $has["\160\151\166\x6f\x74\x5f\x74\141\142\x6c\145"]), mysqli_real_escape_string($this->mysqli, $has["\162\x65\x66\145\x72\145\x6e\143\151\156\147\137\x6b\145\171"])); c85ea: ea34b: } e1e17: $this->has_where_clause = true; D7a94: if (empty($this->where_has_tables)) { goto bf5f0; } foreach ($this->where_has_tables as $key => $has) { reset($this->where_has_tables); $first = !$this->has_where_clause && $key === key($this->where_has_tables) ? "\x57\x48\x45\122\105" : "\x41\116\x44"; $query = "\40\101\x4e\104"; if (!is_callable($has["\x63\x61\x6c\x6c\x62\x61\143\x6b"])) { goto C0701; } $repo = new self($this->init_config); $repo = $has["\x63\141\x6c\154\x62\141\143\153"]($repo); $query .= $repo->to_group_query("\127\110\105\122\105\x20"); C0701: if (!($has["\x74\171\160\145"] === "\146\157\x72\145\x69\x67\156\x5f\153\145\171")) { goto b5801; } $this->sql .= sprintf("\x20\x25\163\x20\105\130\x49\x53\x54\123\x20\x28\123\105\114\x45\103\124\40\61\x20\x46\x52\117\115\x20\45\x73\40\127\x48\x45\x52\x45\x20\45\x73\56\x25\163\x20\x3d\x20\45\163\56\45\163", $first, mysqli_real_escape_string($this->mysqli, $has["\x74\141\x62\154\145"]), mysqli_real_escape_string($this->mysqli, $has["\164\141\142\x6c\145"]), mysqli_real_escape_string($this->mysqli, $has["\162\145\146\x65\162\145\x6e\x63\151\x6e\147\x5f\153\x65\x79"]), mysqli_real_escape_string($this->mysqli, $has["\x72\145\154\x61\164\145\x64\x5f\x74\x61\x62\x6c\x65"]), mysqli_real_escape_string($this->mysqli, $has["\x72\145\146\x65\x72\145\156\143\x65\x64\137\x6b\x65\171"])); $this->sql .= $query; $this->sql .= "\51"; b5801: if (!($has["\x74\171\160\x65"] === "\x69\x6e\166\145\x72\163\145\x5f\162\145\154\141\164\151\x6f\156")) { goto d2107; } $this->sql .= sprintf("\x20\45\x73\40\105\x58\x49\x53\x54\x53\x20\50\x53\x45\114\105\x43\x54\x20\x31\40\x46\x52\x4f\115\x20\45\x73\40\x57\110\x45\x52\105\40\45\x73\56\45\163\x20\x3d\40\45\163\56\x25\163", $first, mysqli_real_escape_string($this->mysqli, $has["\164\x61\x62\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\x72\x65\154\x61\164\x65\x64\x5f\x74\141\x62\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\x72\145\x66\x65\162\145\x6e\143\x65\144\137\153\145\x79"]), mysqli_real_escape_string($this->mysqli, $has["\x74\x61\x62\x6c\145"]), mysqli_real_escape_string($this->mysqli, $has["\162\x65\x66\x65\162\x65\156\x63\151\156\x67\137\153\145\171"])); $this->sql .= $query; $this->sql .= "\x29"; d2107: if (!($has["\164\x79\160\x65"] === "\155\141\156\171\137\x74\x6f\137\x6d\x61\156\x79")) { goto D2196; } $this->sql .= sprintf("\x20\x25\x73\40\105\130\111\x53\124\123\40\50\123\x45\x4c\x45\103\x54\x20\61\40\106\x52\117\115\x20\45\x73\40\127\x48\105\x52\x45\40\45\x73\56\45\163\40\75\40\x25\x73\56\x25\x73\x20\101\116\x44\40\x45\130\111\x53\124\x53\40\x28\123\105\114\105\x43\124\x20\x31\x20\106\122\x4f\115\x20\x25\x73\40\x57\x48\x45\122\105\x20\45\x73\56\x25\163\40\75\40\45\163\x2e\x25\163", $first, mysqli_real_escape_string($this->mysqli, $has["\160\x69\166\157\x74\137\x74\141\x62\154\145"]), mysqli_real_escape_string($this->mysqli, $has["\162\145\x6c\141\x74\145\144\137\x74\141\x62\x6c\145"]), mysqli_real_escape_string($this->mysqli, $has["\162\145\x66\x65\x72\145\x6e\143\x65\x64\x5f\x6b\x65\171"]), mysqli_real_escape_string($this->mysqli, $has["\x70\x69\x76\x6f\164\x5f\164\141\x62\154\145"]), mysqli_real_escape_string($this->mysqli, $has["\162\x65\x66\x65\x72\x65\x6e\x63\151\x6e\147\137\153\145\x79"]), mysqli_real_escape_string($this->mysqli, $has["\164\141\x62\x6c\x65"]), mysqli_real_escape_string($this->mysqli, $has["\160\151\x76\x6f\164\x5f\x74\141\x62\154\145"]), mysqli_real_escape_string($this->mysqli, $has["\160\x69\166\x6f\x74\137\162\x65\x66\x65\x72\145\x6e\x63\x69\x6e\147\137\153\x65\x79"]), mysqli_real_escape_string($this->mysqli, $has["\164\141\142\154\145"]), mysqli_real_escape_string($this->mysqli, $has["\x70\151\x76\157\164\137\x72\145\x66\145\162\145\x6e\x63\145\x64\137\x6b\145\171"])); $this->sql .= $query; $this->sql .= "\x29\51"; D2196: Cec35: } f636a: $this->has_where_clause = true; bf5f0: if (empty($this->has_no_tables)) { goto Dd9ab; } foreach ($this->has_no_tables as $key => $has) { reset($this->has_no_tables); $first = !$this->has_where_clause && $key === key($this->has_no_tables) ? "\127\110\105\x52\x45" : "\101\x4e\x44"; if (!($has["\164\171\160\x65"] === "\146\x6f\x72\x65\151\147\x6e\137\153\145\x79")) { goto b11ab; } $this->sql .= sprintf("\40\45\163\x20\x4e\x4f\124\x20\105\x58\x49\123\124\123\40\50\123\x45\114\105\x43\x54\40\61\40\x46\122\117\115\40\x25\163\40\127\110\x45\122\x45\40\45\x73\x2e\x25\x73\x20\x3d\x20\45\x73\x2e\45\x73\51", $first, mysqli_real_escape_string($this->mysqli, $has["\164\141\x62\154\145"]), mysqli_real_escape_string($this->mysqli, $has["\164\141\x62\154\145"]), mysqli_real_escape_string($this->mysqli, $has["\162\x65\x66\x65\x72\145\x6e\x63\151\156\147\x5f\153\145\171"]), mysqli_real_escape_string($this->mysqli, $has["\162\145\x6c\x61\164\145\144\x5f\164\141\x62\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\162\x65\146\x65\x72\x65\x6e\x63\145\x64\x5f\153\x65\171"])); b11ab: if (!($has["\164\171\160\145"] === "\151\156\166\x65\x72\163\x65\137\x72\145\x6c\x61\x74\x69\157\156")) { goto c8d7a; } $this->sql .= sprintf("\40\x25\x73\x20\45\163\56\45\x73\40\111\123\40\x4e\125\114\x4c", $first, mysqli_real_escape_string($this->mysqli, $has["\162\x65\154\141\164\145\x64\x5f\164\x61\142\x6c\145"]), mysqli_real_escape_string($this->mysqli, $has["\162\x65\146\145\x72\145\x6e\143\145\x64\x5f\153\145\x79"])); c8d7a: if (!($has["\164\171\x70\x65"] === "\155\141\x6e\x79\137\164\157\x5f\x6d\x61\156\x79")) { goto af49f; } $this->sql .= sprintf("\x20\45\x73\x20\x4e\x4f\x54\40\105\x58\x49\x53\x54\123\x20\x28\123\105\114\105\103\124\40\x31\x20\x46\x52\x4f\x4d\x20\x25\x73\40\112\x4f\111\116\x20\x25\x73\40\x4f\116\40\45\163\56\x25\x73\40\75\40\x25\x73\x2e\45\x73\40\127\110\105\122\105\40\45\163\x2e\45\x73\x20\x3d\40\45\163\56\45\x73\51", $first, mysqli_real_escape_string($this->mysqli, $has["\x70\x69\x76\x6f\164\137\x74\x61\142\x6c\x65"]), mysqli_real_escape_string($this->mysqli, $has["\x74\141\142\x6c\145"]), mysqli_real_escape_string($this->mysqli, $has["\x70\151\166\157\x74\137\x74\141\x62\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\160\151\166\157\164\137\x72\x65\146\145\162\x65\x6e\143\151\156\x67\137\x6b\145\x79"]), mysqli_real_escape_string($this->mysqli, $has["\164\x61\142\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\160\151\166\x6f\x74\x5f\x72\145\146\145\x72\145\x6e\x63\145\x64\137\x6b\x65\x79"]), mysqli_real_escape_string($this->mysqli, $has["\x72\x65\x6c\x61\164\x65\144\x5f\x74\141\x62\x6c\145"]), mysqli_real_escape_string($this->mysqli, $has["\x72\145\146\x65\162\145\156\x63\x65\x64\x5f\153\145\x79"]), mysqli_real_escape_string($this->mysqli, $has["\x70\151\x76\x6f\x74\137\164\141\x62\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\162\x65\146\145\x72\145\156\143\151\x6e\147\x5f\153\x65\x79"])); af49f: F0f44: } ec69f: $this->has_where_clause = true; Dd9ab: if (empty($this->where_has_no_tables)) { goto fbb93; } foreach ($this->where_has_no_tables as $key => $has) { reset($this->where_has_no_tables); $first = !$this->has_where_clause && $key === key($this->where_has_no_tables) ? "\x57\x48\x45\122\x45" : "\101\x4e\x44"; $query = "\40\101\x4e\104"; if (!is_callable($has["\x63\141\x6c\154\142\x61\x63\153"])) { goto ce651; } $repo = new self($this->init_config); $repo = $has["\143\141\x6c\x6c\142\x61\x63\x6b"]($repo); $query .= $repo->to_group_query("\x57\110\x45\x52\105\x20"); ce651: if (!($has["\164\171\160\145"] === "\146\157\x72\x65\151\x67\156\137\153\x65\x79")) { goto Ad63d; } $this->sql .= sprintf("\40\45\163\40\116\x4f\124\40\x45\130\x49\123\x54\x53\x20\50\x53\x45\114\x45\x43\x54\x20\x31\40\106\122\117\x4d\x20\x25\x73\x20\x57\x48\105\122\x45\40\x25\163\56\x25\163\x20\x3d\40\45\163\56\45\x73", $first, mysqli_real_escape_string($this->mysqli, $has["\164\x61\x62\x6c\145"]), mysqli_real_escape_string($this->mysqli, $has["\164\x61\142\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\162\145\146\x65\162\x65\156\x63\x69\156\147\137\x6b\145\x79"]), mysqli_real_escape_string($this->mysqli, $has["\162\145\154\141\x74\145\x64\137\x74\141\142\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\162\145\x66\145\x72\145\x6e\x63\145\144\137\153\145\171"])); $this->sql .= $query; $this->sql .= "\51"; Ad63d: if (!($has["\164\171\x70\145"] === "\x69\156\166\x65\162\163\x65\x5f\162\x65\x6c\x61\164\x69\x6f\x6e")) { goto B9e70; } $this->sql .= sprintf("\x20\x25\163\40\105\130\x49\123\124\123\x20\50\x53\105\x4c\x45\x43\124\x20\61\40\106\122\x4f\115\40\45\163\x20\127\x48\105\122\x45\x20\45\163\x2e\x25\x73\40\x3d\40\45\163\56\45\x73", $first, mysqli_real_escape_string($this->mysqli, $has["\164\141\142\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\x72\x65\154\141\x74\x65\144\x5f\164\x61\142\x6c\x65"]), mysqli_real_escape_string($this->mysqli, $has["\x72\145\x66\145\x72\145\x6e\x63\145\x64\137\x6b\x65\171"]), mysqli_real_escape_string($this->mysqli, $has["\x74\x61\142\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\x72\145\x66\145\162\x65\156\x63\151\156\x67\137\153\145\x79"])); $this->sql .= $query; $this->sql .= "\x29"; B9e70: if (!($has["\x74\x79\x70\x65"] === "\155\x61\x6e\171\137\164\x6f\137\155\141\x6e\x79")) { goto Dc4cf; } $this->sql .= sprintf("\40\x25\x73\x20\116\117\x54\40\105\130\111\x53\124\x53\40\50\123\x45\114\105\103\x54\40\61\x20\106\x52\x4f\x4d\x20\45\x73\x20\127\110\x45\x52\x45\40\45\x73\x2e\45\x73\x20\x3d\40\x25\x73\56\x25\163\40\101\x4e\x44\x20\105\x58\111\123\124\123\40\50\x53\105\114\x45\103\124\x20\x31\x20\106\x52\x4f\x4d\x20\x25\163\40\x57\110\105\122\105\40\45\x73\x2e\45\163\40\75\40\45\x73\56\x25\163", $first, mysqli_real_escape_string($this->mysqli, $has["\160\151\166\157\164\137\x74\x61\x62\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\x72\145\154\x61\164\x65\x64\137\x74\x61\x62\x6c\145"]), mysqli_real_escape_string($this->mysqli, $has["\x72\145\146\x65\162\x65\x6e\x63\x65\144\x5f\153\x65\171"]), mysqli_real_escape_string($this->mysqli, $has["\160\x69\166\157\x74\137\164\x61\x62\154\145"]), mysqli_real_escape_string($this->mysqli, $has["\x72\145\146\145\162\145\156\143\x69\156\147\x5f\x6b\145\171"]), mysqli_real_escape_string($this->mysqli, $has["\164\141\142\x6c\x65"]), mysqli_real_escape_string($this->mysqli, $has["\160\x69\x76\x6f\164\137\164\141\x62\154\x65"]), mysqli_real_escape_string($this->mysqli, $has["\x70\x69\x76\157\164\137\162\x65\x66\x65\162\145\x6e\x63\x69\x6e\x67\137\153\x65\171"]), mysqli_real_escape_string($this->mysqli, $has["\x74\141\x62\x6c\x65"]), mysqli_real_escape_string($this->mysqli, $has["\160\151\x76\x6f\164\x5f\x72\145\146\x65\162\145\156\x63\x65\144\137\x6b\x65\171"])); $this->sql .= $query; $this->sql .= "\x29\51"; Dc4cf: Ee64c: } b297e: $this->has_where_clause = true; fbb93: if (empty($this->group_bys)) { goto A43af; } foreach ($this->group_bys as $key => $group) { reset($this->group_bys); $group_by = $key === key($this->group_bys) ? "\x20\x47\122\x4f\x55\x50\x20\x42\131" : "\54"; $this->sql .= sprintf("{$group_by}\x20\x25\x73", $group); d491a: } E5a29: A43af: if (empty($this->havings)) { goto D0850; } foreach ($this->havings as $key => $having) { reset($this->havings); $first = !$this::$has_having_clause && $key === key($this->havings) ? "\x48\x41\x56\111\x4e\107" : "\101\x4e\x44"; if (is_callable($having)) { goto c168a; } $this->sql .= sprintf("\40\45\163\40\x25\x73\x20\45\163\40\47\45\x73\47", $first, mysqli_real_escape_string($this->mysqli, $having["\143\x6f\x6c\165\155\156"]), mysqli_real_escape_string($this->mysqli, $having["\157\x70\145\162\141\x74\x69\157\x6e"]), mysqli_real_escape_string($this->mysqli, $having["\x76\141\x6c\165\x65"])); goto Fa848; c168a: $repo = new self($this->init_config); $this->sql .= sprintf("\x20\x25\163", $first); $this->sql .= $having($repo)->to_group_query("\110\101\x56\111\x4e\107\40"); $repo->close(); $repo = NULL; Fa848: b78b3: } aebb2: $this::$has_having_clause = true; D0850: if (empty($this->or_havings)) { goto a4f5a; } foreach ($this->or_havings as $key => $having) { reset($this->or_havings); $first = !$this::$has_having_clause && $key === key($this->or_havings) ? "\110\x41\x56\x49\116\x47" : "\117\x52"; if (is_callable($having)) { goto d7ccf; } $this->sql .= sprintf("\40\x25\x73\40\x25\163\40\45\x73\x20\x27\x25\x73\x27", $first, mysqli_real_escape_string($this->mysqli, $having["\x63\157\x6c\165\x6d\x6e"]), mysqli_real_escape_string($this->mysqli, $having["\157\160\x65\x72\x61\x74\151\x6f\156"]), mysqli_real_escape_string($this->mysqli, $having["\166\x61\154\x75\x65"])); goto E7251; d7ccf: $repo = new self($this->init_config); $this->sql .= sprintf("\40\x25\x73", $first); $this->sql .= $having($repo)->to_group_query("\110\101\126\111\x4e\x47\x20"); $repo->close(); $repo = NULL; E7251: a517a: } C160d: $this::$has_having_clause = true; a4f5a: if (empty($this->having_ins)) { goto fd388; } foreach ($this->having_ins as $key => $in) { reset($this->having_ins); $first = !$this::$has_having_clause && $key === key($this->having_ins) ? "\110\101\x56\111\116\107" : "\101\x4e\104"; $this->sql .= sprintf("\x20\x25\x73\40\x25\x73\x20\x49\x4e\40\x25\x73", $first, mysqli_real_escape_string($this->mysqli, $in["\x63\x6f\154\x75\x6d\156"]), $in["\151\x6e"]); C0768: } e25ca: $this::$has_having_clause = true; fd388: if (empty($this->or_having_ins)) { goto Ba86c; } foreach ($this->or_having_ins as $key => $in) { reset($this->or_having_ins); $first = !$this::$has_having_clause && $key === key($this->or_having_ins) ? "\110\101\126\111\116\107" : "\117\x52"; $this->sql .= sprintf("\40\45\163\x20\x25\x73\x20\111\x4e\x20\45\x73", $first, mysqli_real_escape_string($this->mysqli, $in["\x63\157\x6c\165\155\156"]), $in["\151\156"]); C46e2: } De832: $this::$has_having_clause = true; Ba86c: if (empty($this->having_not_ins)) { goto cbd95; } foreach ($this->having_not_ins as $key => $in) { reset($this->having_not_ins); $first = !$this::$has_having_clause && $key === key($this->having_not_ins) ? "\110\x41\126\x49\x4e\x47" : "\x41\116\x44"; $this->sql .= sprintf("\x20\45\163\x20\45\163\x20\116\117\x54\40\x49\116\x20\45\x73", $first, mysqli_real_escape_string($this->mysqli, $in["\143\x6f\154\165\155\x6e"]), $in["\x69\x6e"]); Ae5d6: } c5f58: $this::$has_having_clause = true; cbd95: if (empty($this->sorters)) { goto D7809; } $current_order = isset($this->orders[0]) ? $this->orders[0] : "\x41\123\x43"; foreach ($this->sorters as $key => $sort) { $current_order = isset($this->orders[$key]) ? $this->orders[$key] : $current_order; reset($this->sorters); $order_by = $key === key($this->sorters) ? "\x20\x4f\x52\104\105\122\x20\x42\x59" : "\x2c"; $this->sql .= sprintf("{$order_by}\x20\45\x73\40\x25\163", $sort, $current_order); b9b9f: } Baeaf: D7809: if (!isset($this->limit)) { goto Ad38d; } $this->sql .= sprintf("\40\114\x49\x4d\x49\x54\x20\x25\144\40", $this->limit); Ad38d: if (!(isset($this->limit) && isset($this->offset))) { goto F5edb; } $this->sql .= sprintf("\x20\x4f\x46\106\123\105\x54\40\x25\144\x20", $this->offset); F5edb: } private function _build_result() { $has_related_records = FALSE; if (!(!empty($this->with_tables) || !empty($this->with_recursive_tables) || !empty($this->where_with_tables) || !empty($this->where_pivot_tables) || !empty($this->where_with_pivot_tables) || !empty($this->has_tables) || !empty($this->where_has_tables) || !empty($this->has_no_tables) || !empty($this->where_has_no_tables) || !empty($this->count_tables) || !empty($this->where_count_tables))) { goto db596; } $this->_get_table_columns(); $this->_get_table_keys(); $has_related_records = TRUE; db596: if (empty($this->with_tables)) { goto B54ed; } foreach ($this->with_tables as $key => $with) { $this->with_tables[$key] = $this->_loop_keys($with); cd86a: } f1153: B54ed: if (empty($this->with_recursive_tables)) { goto e2326; } foreach ($this->with_recursive_tables as $key => $with) { $this->with_recursive_tables[$key] = $this->_loop_keys($with); b243b: } a340a: e2326: if (empty($this->where_with_tables)) { goto Dc0d0; } foreach ($this->where_with_tables as $key => $with) { $this->where_with_tables[$key] = $this->_loop_keys($with); fa2b1: } ebfb8: Dc0d0: if (empty($this->where_pivot_tables)) { goto efa11; } foreach ($this->where_pivot_tables as $key => $with) { $this->where_pivot_tables[$key] = $this->_loop_keys($with); ef1e7: } d5340: efa11: if (empty($this->where_with_pivot_tables)) { goto f7a31; } foreach ($this->where_with_pivot_tables as $key => $with) { $this->where_with_pivot_tables[$key] = $this->_loop_keys($with); eeb0b: } B2a9c: f7a31: if (empty($this->has_tables)) { goto Caba8; } foreach ($this->has_tables as $key => $has) { $this->has_tables[$key] = $this->_loop_keys($has); A771e: } C408a: Caba8: if (empty($this->where_has_tables)) { goto c4cd5; } foreach ($this->where_has_tables as $key => $has) { $this->where_has_tables[$key] = $this->_loop_keys($has); d40df: } f9d1a: c4cd5: if (empty($this->has_no_tables)) { goto Fdb92; } foreach ($this->has_no_tables as $key => $has_no) { $this->has_no_tables[$key] = $this->_loop_keys($has_no); b031f: } Af385: Fdb92: if (empty($this->where_has_no_tables)) { goto C21de; } foreach ($this->where_has_no_tables as $key => $has_no) { $this->where_has_no_tables[$key] = $this->_loop_keys($has_no); a69b4: } A8033: C21de: if (empty($this->count_tables)) { goto a13c8; } foreach ($this->count_tables as $key => $count) { $this->count_tables[$key] = $this->_loop_keys($count); Ab7d2: } e9f7f: a13c8: $table_columns = isset($this->table_columns[$this->table]["\143\157\x6c\x75\x6d\x6e\x73"]) ? array_keys($this->table_columns[$this->table]["\x63\157\154\165\x6d\x6e\163"]) : []; $select_columns = $this->select !== NULL ? explode("\54", $this->select) : []; $select = array_intersect($table_columns, $select_columns); $select_count = !empty($select) && !$has_related_records ? implode("\x2c\40", $select) : "{$this->table}\x2e\52"; $count_qyeries = ''; if (empty($this->count_tables)) { goto c26bf; } foreach ($this->count_tables as $key => $count) { if ($count["\x74\171\160\145"] != "\156\157\137\162\145\x6c\x61\164\151\157\x6e") { goto Eacc7; } $this->validation_errors[$this->_lang("\155\145\164\150\x6f\144\x5f\143\150\141\151\156")][$this->_lang("\x67\145\x74")] = $this->_lang("\x75\x6e\162\145\154\x61\x74\x65\144\137\164\141\x62\x6c\145\x73") . "\40" . $count["\162\145\154\x61\164\145\144\x5f\164\141\x62\154\145"] . "\54" . $count["\x74\x61\x62\154\x65"]; goto Bf90c; Eacc7: if (!empty($count["\160\x69\x76\157\x74\x5f\x74\141\x62\154\x65"])) { goto e1647; } $main_table = $this->db_prefix . $this->change_case($count["\164\141\x62\x6c\x65"], $this->db_table_case); $related_table = $this->db_prefix . $this->change_case($count["\162\x65\154\x61\164\145\x64\137\x74\x61\x62\x6c\145"], $this->db_table_case); $clean_main_table = mysqli_real_escape_string($this->mysqli, $main_table); $clean_related_table = mysqli_real_escape_string($this->mysqli, $related_table); $clean_referencing_key = mysqli_real_escape_string($this->mysqli, $count["\x72\145\x66\x65\x72\145\x6e\143\151\x6e\x67\137\x6b\145\171"]); $clean_referenced_key = mysqli_real_escape_string($this->mysqli, $count["\162\x65\x66\x65\x72\145\x6e\143\x65\144\137\153\145\171"]); $count_sql = sprintf("\40\114\105\106\124\40\x4a\x4f\111\x4e\40\x28\123\x45\x4c\105\x43\x54\40\x60\45\x73\x60\54\x20\103\x4f\125\116\x54\x28\52\51\x20\x41\x53\x20\164\x6f\164\x61\154\137\45\163\x20\x46\x52\117\x4d\40\140\45\x73\x60\40\x47\122\x4f\125\x50\x20\x42\131\x20\x60\x25\163\x60\x29\40\x41\123\40\140\143\157\165\x6e\x74\x5f\45\163\x60\40\117\x4e\x20\140\x25\x73\140\x2e\140\x25\x73\140\40\75\40\140\143\157\165\156\164\137\45\x73\140\x2e\x60\45\163\x60", $clean_referencing_key, $clean_main_table, $clean_main_table, $clean_referencing_key, $clean_main_table, $clean_related_table, $clean_referenced_key, $clean_main_table, $clean_referencing_key); $select_count .= sprintf("\x2c\x20\x49\x46\x4e\125\x4c\114\50\140\x74\157\x74\141\x6c\x5f\45\x73\140\54\40\60\x29\40\x41\x53\40\x60\x74\x6f\x74\x61\x6c\x5f\45\163\140\40", $clean_main_table, $clean_main_table); $count_qyeries .= $count_sql; goto C81ad; e1647: $main_table = $this->db_prefix . $this->change_case($count["\164\x61\142\x6c\145"], $this->db_table_case); $related_table = $this->db_prefix . $this->change_case($count["\162\145\x6c\x61\x74\145\144\137\164\141\142\154\x65"], $this->db_table_case); $pivot_table = $this->db_prefix . $this->change_case($count["\x70\151\x76\157\164\x5f\x74\141\x62\154\145"], $this->db_table_case); $clean_main_table = mysqli_real_escape_string($this->mysqli, $main_table); $clean_related_table = mysqli_real_escape_string($this->mysqli, $related_table); $clean_pivot_table = mysqli_real_escape_string($this->mysqli, $pivot_table); $clean_referencing_key = mysqli_real_escape_string($this->mysqli, $count["\x72\145\146\145\162\145\156\x63\151\156\x67\137\153\145\x79"]); $clean_referenced_key = mysqli_real_escape_string($this->mysqli, $count["\162\x65\146\x65\x72\145\x6e\143\x65\x64\x5f\153\145\171"]); $count_sql = sprintf("\40\114\105\106\124\x20\x4a\x4f\x49\116\x20\x28\x53\105\114\105\x43\x54\x20\140\x25\163\x60\54\x20\103\x4f\x55\x4e\124\50\52\x29\x20\x41\x53\x20\x60\x74\x6f\x74\141\x6c\x5f\45\163\x60\x20\106\x52\x4f\x4d\x20\x60\45\163\x60\x20\107\122\117\x55\x50\40\102\x59\40\140\x25\x73\x60\51\40\x41\x53\40\140\143\x6f\x75\x6e\164\x5f\x25\163\x60\x20\117\116\40\140\x25\x73\140\56\140\x25\163\140\40\75\40\x60\x63\x6f\165\156\x74\137\45\x73\x60\x2e\140\45\x73\140", $clean_referencing_key, $clean_main_table, $clean_pivot_table, $clean_referencing_key, $clean_main_table, $clean_related_table, $clean_referenced_key, $clean_main_table, $clean_referencing_key); $select_count .= sprintf("\x2c\x20\111\106\116\x55\x4c\x4c\50\140\x74\x6f\164\x61\154\x5f\45\163\x60\54\x20\x30\51\40\101\x53\x20\x60\164\157\164\141\154\137\45\163\140\40", $clean_main_table, $clean_main_table); $count_qyeries .= $count_sql; C81ad: Bf90c: D6641: } F3f17: c26bf: if (!empty($this->sql)) { goto de156; } $this->sql = sprintf("\x53\105\114\x45\103\124\40\45\x73\x20\x46\x52\117\x4d\40\x60\45\x73\140", mysqli_real_escape_string($this->mysqli, $select_count), mysqli_real_escape_string($this->mysqli, $this->table)); $this->sql .= $count_qyeries; de156: if ($this->is_filtered) { goto d0ccc; } if (empty($this->sql)) { goto a2d70; } $result = mysqli_query($this->mysqli, $this->sql); $this->result_counter = $result ? mysqli_num_rows($result) : 0; a2d70: goto eb900; d0ccc: if (!(!empty($this->get_parameters["\x61\x66\x74\x65\x72"]) && !empty($this->get_parameters["\x61\146\x74\145\162\x5f\x66\x69\145\154\144\163"]))) { goto e8de3; } $date = $this->get_parameters["\141\146\164\x65\x72"]; $columns = $this->get_parameters["\141\146\x74\145\x72\x5f\x66\151\x65\154\x64\x73"]; $this->after($date, $columns); e8de3: if ($this->searched) { goto a76a6; } if (empty($this->get_parameters["\163\x65\141\x72\x63\x68"])) { goto cdc50; } foreach ($this->get_parameters["\x73\145\x61\x72\x63\x68"] as $search) { $search_fields = empty($this->get_parameters["\x73\145\x61\x72\143\x68\x5f\146\x69\145\x6c\x64\163"]) ? [] : $this->get_parameters["\x73\145\x61\162\x63\150\137\x66\151\x65\x6c\144\x73"]; $this->search($search, $search_fields); A528f: } C0917: cdc50: a76a6: if (empty($this->filter_equal_columns)) { goto Cb412; } foreach ($this->filter_equal_columns as $key => $param) { $this->where($key, $param); ca801: } b25b3: Cb412: if (empty($this->get_parameters["\x73\157\x72\x74\145\x72\x73"])) { goto b6f11; } $current_order = "\141\163\x63"; $orders = !empty($this->get_parameters["\157\162\x64\x65\162\x73"]) ? $this->get_parameters["\157\x72\x64\145\x72\163"] : []; foreach ($this->get_parameters["\x73\157\162\x74\145\162\163"] as $key => $sorter) { $sort_case = $this->change_case($sorter, $this->db_column_case); $order = isset($orders[$key]) ? $orders[$key] : $current_order; $current_order = $order; $this->order_by($sort_case, $order); F9bea: } Be461: b6f11: $result = mysqli_query($this->mysqli, $this->sql); $this->result_counter = $result ? mysqli_num_rows($result) : 0; if (empty($this->get_parameters["\x6c\x69\x6d\151\x74"])) { goto adafa; } $this->limit($this->get_parameters["\154\151\x6d\151\164"]); adafa: if (!(!empty($this->get_parameters["\154\x69\x6d\151\x74"]) && !empty($this->get_parameters["\157\x66\x66\163\145\164"]))) { goto B3a17; } $this->offset($this->get_parameters["\x6f\x66\x66\163\145\164"]); B3a17: $valid_cases = ["\x63\x61\x6d\x65\154", "\144\x61\163\150", "\160\x61\x73\x63\x61\x6c", "\x73\x6e\141\x6b\x65", "\x75\x6e\144\x65\162\163\143\x6f\162\x65"]; if (!(!empty($this->get_parameters["\x63\x61\x73\x65"]) && in_array($this->get_parameters["\x63\141\x73\145"], $valid_cases))) { goto A0e9b; } $this->case = $this->get_parameters["\x63\141\163\145"]; A0e9b: eb900: $this->_query_builder(); $result = $this->mysqli->query($this->sql); $records = $result->fetch_all(MYSQLI_ASSOC); $result->free_result(); return $records; } public function get($options = array()) { if (empty($this->validation_errors)) { goto a3b67; } return FALSE; a3b67: $records = $this->_build_result(); $all_withs = []; if (empty($this->with_tables)) { goto ed039; } foreach ($this->with_tables as $key => $with) { $related_options = ["\141\143\x63\x65\x73\163\157\162\163" => !empty($options["\141\x63\x63\x65\x73\x73\157\x72\163"][$key]) ? $options["\141\x63\x63\x65\x73\163\157\162\x73"][$key] : [], "\x66\x72\141\x63\164\141\x6c\163" => NULL]; if (empty($with["\162\145\x66\x65\162\145\x6e\143\145\144\137\153\145\171"])) { goto c768b; } $record_keys = array_column($records, $with["\162\145\146\x65\162\145\156\x63\x65\144\137\x6b\145\171"]); if (empty($record_keys)) { goto ea13c; } $count = !empty($this->count_tables[$key]) ? $this->count_tables[$key] : NULL; $related_records = $this->_get_related_records($this->with_tables[$key], $count, $record_keys, $related_options, "\x77\x69\164\x68"); $all_withs[$key] = $related_records; ea13c: c768b: Ff95d: } e1661: ed039: $all_with_recursives = []; if (empty($this->with_recursive_tables)) { goto C2e49; } foreach ($this->with_recursive_tables as $key => $with) { $related_options = ["\141\x63\x63\145\163\x73\x6f\x72\x73" => !empty($options["\141\143\143\145\x73\x73\157\x72\163"][$key]) ? $options["\141\143\143\145\x73\x73\x6f\x72\163"][$key] : [], "\x66\162\141\143\164\x61\154\163" => NULL]; if (empty($with["\162\145\x66\145\x72\x65\156\143\x65\144\x5f\153\145\171"])) { goto d82b1; } $record_keys = array_column($records, $with["\x72\145\146\x65\162\x65\156\143\145\144\137\153\145\171"]); if (empty($record_keys)) { goto E0f60; } $count = !empty($this->count_tables[$key]) ? $this->count_tables[$key] : NULL; $related_records = $this->_get_related_records($this->with_recursive_tables[$key], $count, $record_keys, $related_options, "\167\x69\164\150\137\162\145\143\165\x72\163\x69\166\145"); $all_with_recursives[$key] = $related_records; E0f60: d82b1: ec5ca: } D8e8a: C2e49: $all_where_withs = []; if (empty($this->where_with_tables)) { goto C1ba6; } foreach ($this->where_with_tables as $key => $where_with) { $related_options = ["\141\143\x63\145\163\163\x6f\162\x73" => !empty($options["\x61\143\143\145\163\163\157\x72\x73"][$key]) ? $options["\x61\143\x63\x65\x73\163\x6f\x72\163"][$key] : [], "\x66\162\141\x63\x74\x61\154\x73" => NULL]; if (empty($where_with["\162\x65\146\x65\162\145\156\143\145\144\137\153\x65\171"])) { goto b2847; } $record_keys = array_column($records, $where_with["\x72\145\146\x65\x72\x65\156\x63\145\x64\x5f\x6b\145\171"]); if (empty($record_keys)) { goto Dee3d; } $count = !empty($this->count_tables[$key]) ? $this->count_tables[$key] : NULL; $related_records = $this->_get_related_records($this->where_with_tables[$key], $count, $record_keys, $related_options, "\167\150\145\162\145\137\x77\151\164\x68"); $all_where_withs[$key] = $related_records; Dee3d: b2847: D4c1f: } B2cd3: C1ba6: $all_with_pivots = []; if (empty($this->where_pivot_tables)) { goto b47fa; } foreach ($this->where_pivot_tables as $key => $with_pivot) { $related_options = ["\x61\143\x63\145\x73\x73\x6f\x72\x73" => !empty($options["\141\143\x63\x65\x73\163\157\x72\163"][$key]) ? $options["\x61\143\143\x65\163\x73\x6f\x72\x73"][$key] : [], "\146\x72\141\x63\x74\141\154\163" => NULL]; if (empty($with_pivot["\x72\x65\x66\145\162\145\156\x63\x65\x64\137\x6b\145\x79"])) { goto E71ca; } $record_keys = array_column($records, $with_pivot["\x72\x65\146\145\x72\145\156\x63\x65\x64\137\x6b\x65\x79"]); if (empty($record_keys)) { goto a25d5; } $count = !empty($this->count_tables[$key]) ? $this->count_tables[$key] : NULL; $related_records = $this->_get_related_records($this->where_pivot_tables[$key], $count, $record_keys, $related_options, "\x77\x69\x74\x68\137\160\151\x76\x6f\164"); $all_with_pivots[$key] = $related_records; a25d5: E71ca: D1fb8: } cadb0: b47fa: $all_where_with_pivots = []; if (empty($this->where_with_pivot_tables)) { goto b212b; } foreach ($this->where_with_pivot_tables as $key => $where_with_pivot) { $related_options = ["\141\x63\x63\x65\x73\x73\157\162\163" => !empty($options["\141\x63\x63\x65\x73\x73\157\162\163"][$key]) ? $options["\141\143\143\x65\163\x73\x6f\162\x73"][$key] : [], "\x66\x72\x61\143\164\141\x6c\163" => NULL]; if (empty($where_with_pivot["\x72\x65\146\145\x72\145\156\x63\145\x64\137\153\145\x79"])) { goto bcb2b; } $record_keys = array_column($records, $where_with_pivot["\x72\x65\146\x65\x72\x65\x6e\143\x65\x64\137\153\145\x79"]); if (empty($record_keys)) { goto bae24; } $count = !empty($this->count_tables[$key]) ? $this->count_tables[$key] : NULL; $related_records = $this->_get_related_records($this->where_with_pivot_tables[$key], $count, $record_keys, $related_options, "\x77\x68\x65\x72\145\x5f\167\x69\164\x68\x5f\160\x69\x76\157\164"); $all_where_with_pivots[$key] = $related_records; bae24: bcb2b: b4e02: } f7d9f: b212b: $all_has = []; if (empty($this->has_tables)) { goto B0f6c; } foreach ($this->has_tables as $key => $has) { $related_options = ["\141\x63\x63\x65\x73\x73\x6f\162\163" => !empty($options["\141\143\143\145\163\x73\157\162\163"][$key]) ? $options["\x61\x63\x63\145\163\163\x6f\x72\x73"][$key] : [], "\x66\162\x61\143\164\x61\154\163" => NULL]; if (empty($has["\162\x65\146\145\x72\145\156\x63\x65\x64\137\x6b\x65\171"])) { goto Aa2dc; } $record_keys = array_column($records, $has["\x72\x65\x66\145\x72\145\x6e\143\x65\144\x5f\153\x65\171"]); if (empty($record_keys)) { goto C91c6; } $count = !empty($this->count_tables[$key]) ? $this->count_tables[$key] : NULL; $related_records = $this->_get_related_records($this->has_tables[$key], $count, $record_keys, $related_options, "\x68\141\163"); $all_has[$key] = $related_records; C91c6: Aa2dc: b47d2: } D3d93: B0f6c: $all_where_has = []; if (empty($this->where_has_tables)) { goto E0bab; } foreach ($this->where_has_tables as $key => $where_has) { $related_options = ["\x61\x63\x63\145\163\x73\157\x72\x73" => !empty($options["\x61\x63\x63\x65\163\x73\157\x72\163"][$key]) ? $options["\x61\x63\143\145\163\163\x6f\162\163"][$key] : [], "\x66\162\x61\x63\x74\x61\154\x73" => NULL]; if (empty($where_has["\162\145\146\x65\x72\x65\x6e\x63\145\144\x5f\153\x65\171"])) { goto C0034; } $record_keys = array_column($records, $where_has["\162\145\146\x65\x72\145\156\x63\x65\x64\x5f\x6b\x65\171"]); if (empty($record_keys)) { goto Cd547; } $count = !empty($this->count_tables[$key]) ? $this->count_tables[$key] : NULL; $related_records = $this->_get_related_records($this->where_has_tables[$key], $count, $record_keys, $related_options, "\x77\150\x65\x72\x65\137\x68\141\x73"); $all_where_has[$key] = $related_records; Cd547: C0034: f2dd2: } De1e6: E0bab: $all_has_no = []; if (empty($this->has_no_tables)) { goto fcbaf; } foreach ($this->has_no_tables as $key => $has_no) { $related_options = ["\x61\x63\x63\x65\163\x73\x6f\x72\163" => !empty($options["\141\x63\143\x65\163\x73\157\162\163"][$key]) ? $options["\141\143\143\145\163\163\157\x72\x73"][$key] : [], "\x66\162\x61\x63\164\141\x6c\x73" => NULL]; if (empty($has_no["\x72\x65\146\145\162\145\156\143\x65\x64\137\x6b\145\171"])) { goto C3aa2; } $record_keys = array_column($records, $has_no["\x72\x65\x66\145\162\145\x6e\143\145\x64\137\153\x65\171"]); if (empty($record_keys)) { goto ee8eb; } $count = !empty($this->count_tables[$key]) ? $this->count_tables[$key] : NULL; $related_records = $this->_get_related_records($this->has_no_tables[$key], $count, $record_keys, $related_options, "\x68\141\x73\137\156\x6f"); $all_has_no[$key] = $related_records; ee8eb: C3aa2: C1a08: } ac6dd: fcbaf: $all_where_has_no = []; if (empty($this->where_has_no_tables)) { goto f3643; } foreach ($this->where_has_no_tables as $key => $where_has_no) { $related_options = ["\141\143\x63\x65\163\163\157\x72\163" => !empty($options["\x61\143\143\145\163\x73\157\162\163"][$key]) ? $options["\141\143\143\x65\x73\x73\x6f\x72\163"][$key] : [], "\x66\162\x61\x63\x74\x61\x6c\x73" => NULL]; if (empty($where_has_no["\x72\145\x66\x65\x72\145\x6e\143\145\144\x5f\153\x65\171"])) { goto A3cbe; } $record_keys = array_column($records, $where_has_no["\162\145\146\x65\162\145\x6e\x63\145\x64\x5f\153\145\x79"]); if (empty($record_keys)) { goto eb555; } $count = !empty($this->count_tables[$key]) ? $this->count_tables[$key] : NULL; $related_records = $this->_get_related_records($this->where_has_no_tables[$key], $count, $record_keys, $related_options, "\x77\150\145\162\145\137\x68\141\163\x5f\x6e\x6f"); $all_where_has_no[$key] = $related_records; eb555: A3cbe: Cbad3: } abdaf: f3643: $config_fractals = !empty($this->table_config[$this->table]["\x66\x72\141\x63\164\x61\154\x73"]["\162\145\141\144"]) ? $this->table_config[$this->table]["\146\x72\141\143\164\141\154\163"]["\x72\x65\x61\144"] : NULL; $config_accessors = !empty($this->table_config[$this->table]["\x61\x63\x63\145\163\163\157\162\x73"]) ? $this->table_config[$this->table]["\141\143\x63\145\163\x73\157\162\163"] : []; $accessors = !empty($options["\x61\143\x63\x65\163\x73\157\162\x73"]) ? $options["\x61\x63\143\145\x73\x73\157\162\163"] : $config_accessors; $option_fractals = !empty($options["\x66\162\141\143\x74\x61\x6c\x73"]) ? $options["\146\x72\x61\143\164\x61\154\x73"] : NULL; $response = []; $counter = 0; foreach ($records as $key => $record) { $raw_record = $record; $record_pivots = []; if (empty($this->pivot_values)) { goto dda2b; } $ref_key = !empty($this->pivot_values["\x72\145\146\x65\x72\145\x6e\x63\145\137\153\x65\171"]) ? $this->pivot_values["\x72\145\146\145\162\145\156\143\x65\x5f\153\x65\171"] : NULL; if (empty($this->pivot_values[$raw_record[$ref_key]])) { goto da453; } $record_pivots = $this->pivot_values[$raw_record[$ref_key]]; da453: dda2b: bbcd3: if (empty($accessors)) { goto bf06e; } foreach ($accessors as $key => $callback) { if (empty($record[$key])) { goto E79c5; } $record[$key] = $callback($record[$key]); E79c5: ba8c2: } a6b37: bf06e: if (!(is_null($option_fractals) && !is_null($config_fractals) && is_callable($config_fractals))) { goto ce1d8; } $record = $config_fractals($record); ce1d8: if (empty($all_withs)) { goto A400d; } foreach ($all_withs as $key => $with) { $local_key = $this->with_tables[$key]["\162\x65\x66\x65\x72\145\x6e\143\145\x64\137\x6b\145\x79"]; $local_key_value = $record[$local_key]; if (empty($raw_record["\x74\x6f\164\x61\x6c\x5f" . $key])) { goto D005c; } $record["\x74\157\x74\141\154\x5f" . $key] = $raw_record["\164\157\x74\141\154\x5f" . $key]; D005c: $fc_key = $this->change_case($key, $this->db_column_case); $record[$fc_key] = !empty($with[$local_key_value]["\x72\145\143\157\162\x64\x73"]) ? $with[$local_key_value]["\x72\145\x63\x6f\162\144\163"] : []; bdf5e: } c09a5: A400d: if (empty($all_with_recursives)) { goto A2697; } foreach ($all_with_recursives as $key => $with) { $local_key = $this->with_recursive_tables[$key]["\x72\145\146\x65\162\x65\x6e\x63\x65\144\137\153\x65\x79"]; $local_key_value = $record[$local_key]; if (empty($raw_record["\164\x6f\164\141\154\x5f" . $key])) { goto edfb4; } $record["\164\157\164\141\154\x5f" . $key] = $raw_record["\x74\157\x74\x61\154\137" . $key]; edfb4: $fc_key = $this->change_case($key, $this->db_column_case); $record[$fc_key] = !empty($with[$local_key_value]["\162\145\143\157\x72\144\x73"]) ? $with[$local_key_value]["\162\x65\143\157\162\x64\163"] : []; B92e6: } D49ac: A2697: if (empty($all_where_withs)) { goto d770d; } foreach ($all_where_withs as $key => $where_with) { $local_key = $this->where_with_tables[$key]["\x72\145\x66\145\162\145\x6e\x63\145\144\137\153\x65\x79"]; $local_key_value = $record[$local_key]; if (empty($raw_record["\164\157\164\141\x6c\x5f" . $key])) { goto b7a47; } $record["\x74\x6f\x74\141\154\137" . $key] = $raw_record["\164\157\x74\141\x6c\x5f" . $key]; b7a47: $fc_key = $this->change_case($key, $this->db_column_case); $record[$fc_key] = !empty($where_with[$local_key_value]["\x72\x65\x63\x6f\162\x64\x73"]) ? $where_with[$local_key_value]["\162\x65\x63\x6f\162\144\x73"] : []; e7415: } Cec45: d770d: if (empty($all_with_pivots)) { goto c2360; } foreach ($all_with_pivots as $key => $with_pivot) { $local_key = $this->where_pivot_tables[$key]["\x72\x65\146\145\x72\x65\x6e\143\145\144\x5f\x6b\145\x79"]; $local_key_value = $record[$local_key]; if (empty($raw_record["\x74\157\164\141\x6c\137" . $key])) { goto D1d3f; } $record["\164\x6f\164\x61\154\x5f" . $key] = $raw_record["\x74\157\164\x61\x6c\137" . $key]; D1d3f: $fc_key = $this->change_case($key, $this->db_column_case); $record[$fc_key] = !empty($with_pivot[$local_key_value]["\162\145\143\x6f\162\144\163"]) ? $with_pivot[$local_key_value]["\x72\x65\143\157\x72\x64\163"] : []; C2693: } d7ed0: c2360: if (empty($all_where_with_pivots)) { goto Bdff4; } foreach ($all_where_with_pivots as $key => $where_with_pivot) { $local_key = $this->where_with_pivot_tables[$key]["\162\145\146\145\x72\145\x6e\x63\145\x64\137\153\x65\171"]; $local_key_value = $record[$local_key]; if (empty($raw_record["\x74\157\x74\141\x6c\x5f" . $key])) { goto Cc858; } $record["\164\157\164\x61\x6c\137" . $key] = $raw_record["\x74\157\164\141\x6c\x5f" . $key]; Cc858: $fc_key = $this->change_case($key, $this->db_column_case); $record[$fc_key] = !empty($where_with_pivot[$local_key_value]["\162\145\x63\x6f\x72\144\x73"]) ? $where_with_pivot[$local_key_value]["\x72\x65\143\157\x72\144\x73"] : []; c35d5: } A9752: Bdff4: if (empty($all_has)) { goto C9127; } foreach ($all_has as $key => $has) { if (empty($record)) { goto Da729; } $local_key = $this->has_tables[$key]["\162\145\x66\x65\x72\x65\156\143\145\144\x5f\153\145\x79"]; $local_key_value = $record[$local_key]; if (empty($raw_record["\x74\x6f\x74\141\154\137" . $key])) { goto A8ed5; } $record["\x74\x6f\x74\x61\x6c\137" . $key] = $raw_record["\x74\x6f\x74\141\x6c\x5f" . $key]; A8ed5: $fc_key = $this->change_case($key, $this->db_column_case); $record[$fc_key] = !empty($has[$local_key_value]["\x72\145\x63\x6f\x72\144\163"]) ? $has[$local_key_value]["\x72\x65\x63\x6f\x72\144\x73"] : []; if (!empty($has[$local_key_value])) { goto b5626; } $record = []; b5626: Da729: F91b2: } F5983: C9127: if (empty($all_where_has)) { goto d8b6e; } foreach ($all_where_has as $key => $where_has) { if (empty($record)) { goto D06c6; } $local_key = $this->where_has_tables[$key]["\x72\x65\146\x65\162\145\x6e\143\x65\x64\137\153\x65\171"]; $local_key_value = $record[$local_key]; if (empty($raw_record["\164\157\164\x61\154\x5f" . $key])) { goto A1e55; } $record["\x74\x6f\x74\141\154\x5f" . $key] = $raw_record["\164\x6f\164\141\154\137" . $key]; A1e55: $fc_key = $this->change_case($key, $this->db_column_case); $record[$fc_key] = !empty($where_has[$local_key_value]["\x72\145\143\157\x72\x64\163"]) ? $where_has[$local_key_value]["\162\145\143\x6f\162\144\163"] : []; if (!empty($where_has[$local_key_value])) { goto E5e4c; } $record = []; E5e4c: D06c6: fc3a5: } Fc4d0: d8b6e: if (empty($all_has_no)) { goto e0997; } foreach ($all_has_no as $key => $has_no) { if (empty($record)) { goto bfb16; } $local_key = $this->has_no_tables[$key]["\x72\145\x66\x65\x72\145\156\x63\145\x64\137\x6b\145\171"]; $local_key_value = $record[$local_key]; if (!empty($has_no[$local_key_value])) { goto e519e; } if (empty($raw_record["\164\x6f\164\x61\x6c\x5f" . $key])) { goto efa33; } $fc_total = $this->change_case("\164\x6f\x74\141\x6c\137" . $key, $this->db_column_case); $record[$fc_total] = $raw_record["\164\x6f\x74\141\x6c\137" . $key]; efa33: goto C1224; e519e: $record = []; C1224: bfb16: c4a6c: } Efedb: e0997: if (empty($all_where_has_no)) { goto E1bdf; } foreach ($all_where_has_no as $key => $where_has_no) { if (empty($record)) { goto Fe29e; } $local_key = $this->where_has_no_tables[$key]["\x72\x65\146\145\x72\145\156\143\x65\144\x5f\x6b\145\171"]; $local_key_value = $record[$local_key]; if (!empty($where_has_no[$local_key_value])) { goto C9f06; } if (empty($raw_record["\x74\x6f\164\141\154\137" . $key])) { goto F4e0e; } $fc_total = $this->change_case("\164\157\164\141\x6c\137" . $key, $this->db_column_case); $record[$fc_total] = $raw_record["\164\x6f\164\x61\x6c\x5f" . $key]; F4e0e: goto Fba59; C9f06: $record = []; Fba59: Fe29e: bdd79: } bfc1c: E1bdf: $pivot = array_shift($record_pivots); if (!(!empty($record) && !empty($this->pivot_values["\162\x65\146\145\x72\145\156\143\x65\137\x74\141\x62\x6c\x65"]))) { goto A9155; } $fc_pivot_reference_table = $this->change_case($this->pivot_values["\162\145\x66\145\162\x65\156\x63\x65\x5f\164\141\142\154\145"], $this->db_column_case); $record[$fc_pivot_reference_table] = $pivot; A9155: if (empty($this->custom_callbacks)) { goto A0861; } foreach ($this->custom_callbacks as $custom) { if (!is_callable($custom["\143\141\x6c\154\142\141\143\153"])) { goto D9070; } $rename = !empty($custom["\157\x70\x74\151\x6f\x6e\x73"]["\x72\145\156\x61\x6d\x65"]) ? $custom["\x6f\x70\x74\x69\x6f\156\x73"]["\162\145\x6e\x61\155\145"] : $custom["\x6e\141\155\145"]; $fc_rename = $this->change_case($rename, $this->db_column_case); $record[$fc_rename] = $custom["\x63\141\x6c\154\142\x61\143\x6b"]($record); D9070: E097e: } D371e: A0861: if (empty($this->select)) { goto A3a64; } $new_record = []; $selected_columns = explode("\x2c", $this->select); foreach ($selected_columns as $sc) { if (strpos($sc, "\x2e")) { goto f8723; } if (!isset($record[$sc])) { goto b9113; } $new_record[$sc] = $record[$sc]; b9113: goto B7d4d; f8723: $cols = explode("\x2e", $sc); $record_pointer =& $record; $new_record_pointer =& $new_record; foreach ($cols as $col) { A1f25: } E217f: B7d4d: D36ed: } F6dd1: $record = $new_record; A3a64: if (!(!empty($record) && !is_null($option_fractals) && is_callable($option_fractals))) { goto c23d7; } $record = $option_fractals($record); c23d7: if (!($this->case != "\x73\x6e\141\x6b\x65")) { goto a9873; } $record = $this->recursive_change_array_keys_case($record, $this->case); a9873: if (empty($record)) { goto Bc4a7; } $response[] = $record; if (!(!empty($this->has_tables) && !empty($this->limit) || !empty($this->where_has_tables) && !empty($this->limit) || !empty($this->has_no_tables) && !empty($this->limit) || !empty($this->where_has_no_tables) && !empty($this->limit))) { goto D2997; } $counter++; if (!($counter >= $this->limit)) { goto B249e; } goto Df7ef; B249e: D2997: Bc4a7: if (!empty($record_pivots)) { goto bbcd3; } Df7ef: fb970: } fc7f0: return $this->is_single && isset($response[0]) ? $response[0] : $response; } public function get_recursive($options = array(), $get_options = array()) { $referenced_key_text = $this->change_case("\162\x65\146\x65\162\145\156\143\145\x64\137\153\145\x79", $this->case); $referencing_key_text = $this->change_case("\x72\145\x66\x65\x72\x65\x6e\x63\151\x6e\147\x5f\153\x65\x79", $this->case); $parent_referencing_key_text = $this->change_case("\160\x61\162\x65\156\x74\137\x72\x65\x66\145\x72\x65\x6e\143\x69\156\x67\137\153\145\x79", $this->case); $pivot_table_text = $this->change_case("\x70\151\166\x6f\164\137\x74\141\x62\154\145", $this->case); $rename_text = $this->change_case("\162\x65\x6e\x61\155\x65", $this->case); $options = is_array($options) ? $options : []; $options = $this->change_array_keys_case($options, $this->case); $get_options = $this->change_array_keys_case($get_options, $this->case); $referenced_key = !empty($options[$referenced_key_text]) ? $this->change_case($options[$referenced_key_text], $this->db_column_case) : NULL; $rename = !empty($options[$rename_text]) ? $this->change_case($options[$rename_text], $this->db_column_case) : $this->change_case($this->table, $this->db_column_case); $is_single = $this->is_single; $this->is_single = FALSE; $records = $this->get($get_options); if (!(empty($referenced_key) || empty($referencing_key))) { goto ea1a6; } if (empty($options[$pivot_table_text])) { goto ee2cc; } $pivot_table = $this->change_case($options[$pivot_table_text], $this->db_table_case); $this->reference_tables[] = $this->db_prefix . $pivot_table; ee2cc: $this->_get_table_keys(); if (!empty($options[$pivot_table_text])) { goto e860a; } $db_keys = !empty($this->table_keys[$this->table][$this->table]) ? $this->table_keys[$this->table][$this->table] : []; foreach ($db_keys as $dbk) { if (!($dbk[$this->change_case("\162\145\146\x65\x72\x65\156\x63\145\x5f\x74\141\x62\154\145", $this->case)] == $this->table && $dbk[$this->change_case("\x74\171\160\x65", $this->case)] == "\x66\157\162\145\151\147\x6e\x5f\153\145\171")) { goto ff646; } $referenced_key = $dbk[$referenced_key_text]; $referencing_key = $dbk[$referencing_key_text]; $options[$referenced_key_text] = empty($options[$referenced_key_text]) ? $referenced_key : $options[$referenced_key_text]; $options[$referencing_key_text] = empty($options[$referencing_key_text]) ? $referencing_key : $options[$referencing_key_text]; goto C4d22; ff646: c8a45: } C4d22: if (!(empty($options[$referenced_key_text]) or empty($options[$referencing_key_text]))) { goto ab6bf; } $this->validation_errors[$this->_lang("\155\145\164\x68\x6f\144\137\143\150\141\151\156")][$this->_lang("\x67\x65\164\x5f\162\145\143\165\x72\163\x69\x76\145")] = $this->_lang("\x6e\x6f\x6e\x5f\x72\x65\143\165\162\x73\151\166\145"); return FALSE; ab6bf: goto acd7b; e860a: $db_keys = !empty($this->table_keys[$pivot_table][$this->table]) ? $this->table_keys[$pivot_table][$this->table] : []; foreach ($db_keys as $dbk) { if (!($dbk[$this->change_case("\162\145\146\145\x72\145\156\143\x65\137\x74\x61\x62\154\145", $this->case)] == $this->table && $dbk[$this->change_case("\164\x79\160\x65", $this->case)] == "\x66\x6f\162\x65\x69\147\x6e\137\153\x65\171")) { goto e9415; } $referenced_key = $dbk[$referenced_key_text]; $options[$referenced_key_text] = empty($options[$referenced_key_text]) ? $referenced_key : $options[$referenced_key_text]; $referencing_key = $dbk[$referencing_key_text]; if (!(empty($options[$referencing_key_text]) && (empty($options[$parent_referencing_key_text]) or !empty($options[$parent_referencing_key_text]) && $options[$parent_referencing_key_text] != $referencing_key))) { goto A4678; } $options[$referencing_key_text] = $referencing_key; A4678: if (!(empty($options[$parent_referencing_key_text]) && (empty($options[$referencing_key_text]) or !empty($options[$referencing_key_text]) && $options[$referencing_key_text] != $referencing_key))) { goto A932b; } $options[$parent_referencing_key_text] = $referencing_key; A932b: e9415: c824c: } e1427: if (!(empty($options[$referenced_key_text]) or empty($options[$referencing_key_text]) or empty($options[$parent_referencing_key_text]))) { goto B7386; } $this->validation_errors[$this->_lang("\155\145\164\150\157\x64\x5f\x63\x68\141\x69\x6e")][$this->_lang("\147\145\x74\137\162\145\143\165\162\x73\151\166\145")] = $this->_lang("\x6e\157\156\137\x72\x65\143\165\x72\163\x69\x76\x65"); return FALSE; B7386: acd7b: ea1a6: $keys = array_column($records, $referenced_key); if (empty($keys)) { goto Fc490; } $children = $this->_recursive($options, $keys); foreach ($records as $key => $record) { if (empty($children[$record[$referenced_key]])) { goto a7447; } $record[$rename] = $children[$record[$referenced_key]]; $records[$key] = $record; a7447: F9f31: } da334: Fc490: return $is_single && !empty($records[0]) ? $records[0] : $records; } private function _recursive($options, $ids) { $referenced_key = $this->change_case($options[$this->change_case("\162\145\x66\x65\162\145\x6e\143\x65\x64\x5f\x6b\145\171", $this->case)], $this->db_column_case); $referencing_key = $this->change_case($options[$this->change_case("\162\145\146\145\162\x65\156\x63\151\156\147\x5f\153\145\171", $this->case)], $this->db_column_case); $rename = !empty($options[$this->change_case("\162\145\x6e\x61\155\x65", $this->case)]) ? $this->change_case($options[$this->change_case("\162\x65\x6e\141\x6d\145", $this->case)], $this->db_column_case) : $this->change_case($this->table, $this->db_column_case); $pivot_table = !empty($options[$this->change_case("\x70\x69\166\157\164\137\164\141\x62\x6c\145", $this->case)]) ? $this->change_case($options[$this->change_case("\x70\151\x76\x6f\x74\137\x74\x61\x62\154\x65", $this->case)], $this->db_table_case) : NULL; if (empty($options[$this->change_case("\160\x69\x76\157\164\137\164\141\x62\154\x65", $this->case)])) { goto A791c; } $parent_referencing_key = !empty($options[$this->change_case("\160\x61\162\145\x6e\x74\x5f\162\x65\146\145\x72\x65\x6e\143\x69\156\147\x5f\153\145\171", $this->case)]) ? $this->change_case($options[$this->change_case("\160\x61\x72\145\x6e\164\x5f\x72\145\x66\145\x72\x65\156\143\x69\x6e\147\137\x6b\x65\171", $this->case)], $this->db_column_case) : NULL; $repo = new self($this->init_config); $parents = $repo->table($pivot_table)->where_in($parent_referencing_key, $ids)->get(); $repo->close(); $repo = NULL; $ids = array_column($parents, $referencing_key); if (!empty($ids)) { goto a7e5b; } return []; a7e5b: $referencing_key = $referenced_key; A791c: $repo = new self($this->init_config); $repo->where_in($referencing_key, $ids); $exceptions = ["\167\x68\x65\x72\145", "\157\162\137\167\x68\x65\x72\145", "\x6f\x72\137\x77\150\x65\x72\x65\x5f\151\x6e", "\157\x72\137\167\x68\145\162\x65\x5f\x6e\x6f\x74\x5f\151\156", "\x77\150\x65\162\145\137\x69\x6e", "\167\x68\145\x72\x65\x5f\x6e\x6f\x74\x5f\x69\156", "\154\151\153\145", "\x6f\x72\137\x6c\151\153\145", "\156\x6f\164\x5f\154\151\153\x65", "\157\x72\137\x6e\x6f\164\137\154\x69\x6b\145", "\150\x61\166\x69\156\147", "\157\x72\137\150\141\166\151\156\147"]; foreach ($this->function_calls as $call) { if (!($call["\155\145\164\x68\157\x64"] == "\164\x61\x62\x6c\145" && !empty($this->old_table))) { goto E3f50; } call_user_func_array([$repo, $call["\x6d\x65\x74\150\157\x64"]], [$this->table]); goto a9c25; E3f50: if (!(!in_array($call["\x6d\x65\x74\x68\x6f\144"], $exceptions) && !empty($call["\x61\x72\x67\163"][0]) && $call["\x61\162\x67\163"][0] != $referencing_key)) { goto f74f3; } call_user_func_array([$repo, $call["\155\x65\x74\150\157\144"]], $call["\141\162\x67\x73"]); f74f3: a9c25: } A6974: $records = $repo->get(); $repo->close(); $repo = NULL; $keys = array_column($records, $referenced_key); $children = []; $grand_children = []; if (empty($keys)) { goto Ad895; } $grand_children = $this->_recursive($options, $keys); Ad895: foreach ($records as $record) { if (empty($grand_children[$record[$referenced_key]])) { goto a6ba4; } $record[$rename] = $grand_children[$record[$referenced_key]]; a6ba4: $children[$record[$referencing_key]][] = $record; e6f13: } f0ad9: return $children; } public function add($records, $options = array()) { if (!empty($this->table)) { goto F2290; } $this->validation_errors[$this->_lang("\155\x65\164\x68\x6f\144\x5f\x63\150\141\151\x6e")][$this->_lang("\164\x61\142\x6c\x65")] = $this->_lang("\x6e\157\137\164\x61\142\x6c\x65"); return FALSE; F2290: if (empty($this->validation_errors)) { goto A0e09; } return FALSE; A0e09: $this->_get_table_columns(); $this->_get_table_keys(); if (empty($this->with_tables)) { goto ae573; } foreach ($this->with_tables as $key => $with) { $this->with_tables[$key] = $this->_loop_keys($with); D07f0: } be09e: ae573: if (empty($this->has_tables)) { goto c1605; } foreach ($this->has_tables as $key => $has) { $this->has_tables[$key] = $this->_loop_keys($has); d0d57: } Fb1c0: c1605: if (empty($this->attach_tables)) { goto D44f0; } $this->_get_relations($this->attach_tables); D44f0: if (empty($this->attach_new_tables)) { goto bcbc9; } foreach ($this->attach_new_tables as $key => $attach) { $this->attach_new_tables[$key] = $this->_loop_keys($attach); C164e: } fb1bf: bcbc9: if (empty($this->attach_new_tables)) { goto bbd3f; } $this->_loop_records($this->attach_new_tables); bbd3f: if (!(!empty($this->with_tables) || !empty($this->has_tables) || !empty($this->attach_tables) || !empty($this->attach_new_tables))) { goto f36e4; } $this->_get_table_columns(); f36e4: $is_single = FALSE; if (isset($records[0]) && is_array($records[0])) { goto B53de; } $is_single = TRUE; $records = [$records]; goto Bdd5c; B53de: Bdd5c: if (empty($this->old_table)) { goto a9871; } $keys = $this->_get_reference_keys($this->old_table, $this->table); if (!($keys["\x74\171\160\x65"] == "\151\156\x76\x65\x72\163\x65\x5f\162\145\154\141\x74\151\157\x6e")) { goto A2936; } $repo = new self($this->init_config); $selected = $repo->table($this->old_table)->find($this->primary_key_value)->get(); $repo->close(); $repo = NULL; foreach ($records as $k => $record) { $record[$keys["\x72\x65\146\145\x72\145\156\x63\x65\144\x5f\x6b\145\x79"]] = $selected[$keys["\162\145\146\145\x72\145\156\x63\151\156\147\137\153\x65\171"]]; $records[$k] = $record; D0d38: } Dbef2: A2936: a9871: if ($this->_validate_attach()) { goto d665e; } return FALSE; d665e: if ($this->_validate_attach_new()) { goto deea4; } return FALSE; deea4: foreach ($records as $r => $record) { $record = $this->_change_record_case($record); $record = $this->_change_record_array($record, $this->with_tables); $record = $this->_change_record_array($record, $this->has_tables); foreach ($this->attach_tables as $attach) { if (!($attach["\x74\x79\x70\x65"] == "\151\x6e\166\145\x72\x73\x65\137\162\x65\154\141\164\151\157\x6e")) { goto Fde69; } $pk = $this->_get_primary_key($attach["\x74\x61\x62\154\x65"]); $last_id = $referenced_key = $attach["\x69\144\x73"][count($attach["\x69\144\163"]) - 1]; if (!($attach["\x72\145\x66\145\x72\x65\156\x63\145\144\137\x6b\145\171"] != $pk)) { goto ea426; } $repo = new self($this->init_config); $referenced = $repo->table($attach["\x74\141\x62\154\145"])->find($last_id)->get(); $repo->close(); $repo = NULL; $referenced_key = $referenced[$attach["\x72\x65\146\145\x72\x65\x6e\x63\x69\x6e\147\137\153\145\171"]]; ea426: $record[$attach["\x72\145\x66\x65\x72\145\x6e\143\145\x64\137\153\145\171"]] = $referenced_key; Fde69: a505e: } A0b55: $foreign_keys = []; if (empty($this->with_tables)) { goto baa71; } foreach ($this->with_tables as $key => $with) { $fk = $this->change_case($with["\164\141\x62\x6c\145"], $this->db_table_case); $rename_fk = $this->change_case($key, $this->db_table_case); if (!($with["\x74\x79\x70\x65"] == "\x69\x6e\166\x65\162\163\145\x5f\x72\x65\154\141\164\x69\x6f\156" && (!empty($record[$fk]) || !empty($record[$rename_fk])))) { goto f7191; } $foreign_keys[] = $with["\x72\x65\146\x65\x72\x65\156\x63\145\144\x5f\x6b\145\x79"]; f7191: B4808: } a137b: baa71: if (empty($this->has_tables)) { goto C500d; } foreach ($this->has_tables as $key => $has) { $fk = $this->change_case($has["\164\x61\142\x6c\x65"], $this->db_table_case); $rename_fk = $this->change_case($key, $this->db_table_case); if (!($has["\x74\171\x70\145"] == "\x69\156\x76\x65\x72\163\x65\137\162\x65\154\x61\164\x69\157\x6e" && (!empty($record[$fk]) || !empty($record[$rename_fk])))) { goto cea00; } $foreign_keys[] = $has["\x72\145\146\145\x72\x65\x6e\x63\x65\x64\137\153\145\x79"]; cea00: Ae3b4: } f9c97: C500d: $rules = []; $table_columns = $this->table_columns[$this->table]["\x63\157\154\165\x6d\x6e\163"]; foreach ($table_columns as $column) { $column["\x76\x61\154\151\144\x61\x74\151\157\156\x5f\x6e\x61\x6d\145"] = $column["\156\141\x6d\x65"]; if (in_array($column["\156\x61\x6d\x65"], $foreign_keys)) { goto B3d00; } $rules[$column["\166\x61\x6c\x69\x64\x61\x74\151\157\156\137\x6e\x61\155\x65"]] = $this->_create_validation($record, $this->table, $column); goto B22ca; B3d00: $rules[$column["\166\141\154\151\x64\x61\x74\151\x6f\156\x5f\156\141\155\x65"]] = $this->_create_validation($record, $this->table, $column, "\141\144\144", "\156\x6f\x74\137\x72\x65\161\165\x69\162\145\144"); B22ca: b3d34: } dd66b: if (empty($this->with_tables)) { goto aa4c7; } foreach ($this->with_tables as $key => $with) { $use_key = $validation_name = array_key_exists($key, $record) ? $key : $with["\164\141\x62\154\x65"]; if (!(!empty($record[$key]) || !empty($record[$with["\164\x61\142\154\x65"]]))) { goto bd6fe; } $related_rules = $this->_related_validation($with, $record[$use_key], $validation_name); $rules = array_merge($rules, $related_rules); bd6fe: e39f2: } F6733: aa4c7: if (empty($this->has_tables)) { goto e5297; } $counter = 0; foreach ($this->has_tables as $key => $has) { $use_key = $validation_name = array_key_exists($key, $record) ? $key : $has["\164\x61\x62\154\x65"]; $human_name = $this->change_case($use_key, "\x68\165\155\141\x6e"); $rules[$validation_name . "\133\135"] = ["\x72\145\x6e\141\x6d\145" => $human_name, "\x72\165\154\x65\163" => "\162\145\161\165\151\162\145\144"]; if (!empty($record[$key]) || !empty($record[$has["\164\141\142\x6c\x65"]])) { goto a786a; } $has_rules = $this->_has_validation($has, NULL, $validation_name . "\x5b\60\x5d", $human_name); goto B7779; a786a: $has_rules = $this->_has_validation($has, $record[$use_key], $validation_name, $human_name); B7779: $rules = array_merge($rules, $has_rules); $counter++; c2929: } ad58e: e5297: if (empty($this->has_tables)) { goto Cdcd0; } foreach ($this->has_tables as $key => $has) { if (!(empty($has["\x72\x65\146\x65\x72\x65\156\x63\x69\156\147\x5f\x6b\145\x79"]) || empty($has["\162\145\x66\145\162\x65\156\x63\145\144\x5f\x6b\145\171"]))) { goto A958d; } $reference_keys = $this->_get_reference_keys($has["\x74\x61\142\x6c\145"], $this->table); $has["\162\145\x66\x65\x72\145\x6e\x63\151\156\x67\x5f\153\x65\171"] = empty($has["\162\145\146\145\x72\x65\x6e\143\x69\156\x67\137\x6b\x65\x79"]) ? $reference_keys["\162\145\146\x65\x72\145\156\x63\x69\x6e\x67\137\153\x65\x79"] : $has["\162\x65\x66\145\x72\145\x6e\143\151\x6e\x67\137\x6b\x65\171"]; $has["\162\145\x66\145\162\145\156\x63\x65\144\x5f\153\x65\x79"] = empty($has["\x72\145\146\145\x72\145\x6e\x63\x65\144\x5f\x6b\x65\x79"]) ? $reference_keys["\x72\145\x66\145\162\145\156\x63\145\x64\137\x6b\145\x79"] : $has["\162\x65\x66\x65\162\145\x6e\143\x65\144\x5f\x6b\145\171"]; A958d: $use_key = $validation_name = array_key_exists($key, $record) ? $key : $has["\x74\x61\x62\154\x65"]; if (!(!empty($record[$key]) || !empty($record[$has["\164\x61\x62\154\x65"]]))) { goto a7ada; } $related_rules = $this->_related_validation($has, $record[$use_key], $validation_name); $rules = array_merge($rules, $related_rules); a7ada: Fab2e: } C4b59: Cdcd0: foreach ($record as $key => $value) { $config_mutator = !empty($this->table_config[$this->table]["\155\x75\x74\x61\x74\x6f\162\x73"][$key]) ? $this->table_config[$this->table]["\155\165\164\141\x74\157\162\x73"][$key] : NULL; $model_mutator = !empty($this->mutators[$key]) ? $this->mutators[$key] : NULL; $options_mutator = !empty($options["\155\x75\164\x61\164\157\x72\x73"][$key]) ? $options["\155\165\164\141\164\x6f\162\163"][$key] : NULL; if (!(!empty($options["\155\165\164\x61\164\157\x72\x73"][$key]) && is_callable($options_mutator))) { goto aa902; } $record[$key] = $options_mutator($value); aa902: if (!(empty($options["\155\165\164\x61\164\x6f\x72\163"][$key]) && !is_callable($model_mutator) && is_callable($config_mutator))) { goto c47f1; } $record[$key] = $config_mutator($value); c47f1: if (!(empty($options["\155\165\164\141\164\x6f\162\163"][$key]) && is_callable($model_mutator))) { goto D63cd; } $record[$key] = $model_mutator($value); D63cd: C4281: } cc73f: if (!($this->validate($record, $rules) === FALSE)) { goto c74c5; } if ($is_single) { goto Af95a; } $record_count = $r + 1; $this->validation_errors[$this->_lang("\155\x65\x74\x68\157\x64\137\143\x68\141\x69\x6e")][$this->_lang("\x61\x64\144")] = "\122\x65\143\157\162\x64\40{$record_count}"; Af95a: return FALSE; c74c5: dddf9: } A5820: $record_ids = []; $this->mysqli->begin_transaction(); try { foreach ($records as $record) { $record = $this->_change_record_case($record); $record = $this->_change_record_array($record, $this->with_tables); $record = $this->_change_record_array($record, $this->has_tables); foreach ($this->attach_tables as $attach) { if (!($attach["\x74\x79\160\x65"] == "\151\x6e\166\145\x72\x73\x65\x5f\162\x65\154\x61\x74\x69\x6f\156")) { goto A538c; } $pk = $this->_get_primary_key($attach["\x74\x61\142\x6c\x65"]); $last_id = $referenced_key = $attach["\x69\144\163"][count($attach["\x69\x64\x73"]) - 1]; if (!($attach["\162\x65\x66\x65\162\x65\156\143\145\144\x5f\153\x65\x79"] != $pk)) { goto ec10b; } $repo = new self($this->init_config); $referenced = $repo->table($attach["\x74\141\x62\x6c\145"])->find($last_id)->get(); $repo->close(); $repo = NULL; $referenced_key = $referenced[$attach["\162\x65\146\145\162\145\156\x63\x69\156\147\137\x6b\145\x79"]]; ec10b: $record[$attach["\x72\145\146\x65\162\x65\156\x63\x65\x64\x5f\x6b\x65\171"]] = $referenced_key; A538c: e7439: } Fc9a3: $main_fractal = $this->_get_create_fractal($this->table); $insert_record = $main_fractal($record); if (!empty($insert_record)) { goto b472c; } $this->mysqli->rollback(); $this->validation_errors[$this->_lang("\155\145\x74\x68\157\x64\137\143\x68\141\x69\x6e")][$this->_lang("\141\x64\144")] = $this->_lang("\165\x6e\141\142\154\x65\137\x74\x6f\137\141\144\144\137\145\155\160\164\x79\x5f\162\x65\143\157\x72\144"); return FALSE; b472c: $inserted_records = []; if (empty($this->with_tables)) { goto A5dff; } foreach ($this->with_tables as $key => $with) { if (!($with["\x74\x79\x70\145"] == "\x69\156\166\x65\x72\163\x65\137\162\x65\x6c\x61\164\151\x6f\x6e")) { goto cdd48; } $related_options = ["\155\165\x74\x61\164\157\x72\x73" => !empty($options["\155\165\x74\141\164\x6f\162\163"][$key]) ? $options["\155\165\x74\141\164\x6f\x72\163"][$key] : [], "\146\x72\x61\x63\164\x61\x6c\163" => NULL]; if (!(!empty($record[$key]) || !empty($record[$with["\164\141\142\154\x65"]]))) { goto a72b6; } $use_key = !empty($record[$key]) ? $key : $with["\x74\141\x62\154\x65"]; foreach ($record[$use_key] as $related) { $rename = $key; $actual_name = $with["\164\x61\142\x6c\x65"]; $inserted_id = $this->_insert_related_records($rename, $actual_name, 0, $with, $related, $related_options); $insert_record[$with["\162\145\146\145\162\145\x6e\143\145\x64\137\x6b\145\x79"]] = $inserted_id; if (!empty($inserted_records[$rename])) { goto Ce391; } $options = ["\162\x65\x6e\x61\155\145" => "\141\x74\164\141\143\150\145\x64\x5f" . $rename, "\160\x69\166\157\164\x5f\164\141\x62\x6c\145" => $with["\x70\x69\166\x6f\164\x5f\x74\141\x62\x6c\145"], "\162\x65\x66\145\162\145\x6e\x63\x69\x6e\x67\137\153\x65\x79" => $with["\x72\145\146\145\162\x65\156\x63\151\x6e\x67\x5f\153\x65\171"], "\162\145\x66\x65\162\145\x6e\143\145\144\x5f\x6b\x65\x79" => $with["\162\145\x66\145\162\x65\x6e\143\x65\x64\137\x6b\145\171"], "\160\x69\x76\157\164\x5f\x72\145\146\145\x72\x65\x6e\x63\151\156\147\137\153\145\x79" => $with["\160\151\x76\x6f\x74\x5f\x72\x65\x66\145\x72\x65\156\143\x69\156\147\137\153\145\x79"], "\160\151\166\x6f\164\x5f\162\x65\x66\x65\162\x65\x6e\x63\x65\144\137\x6b\145\x79" => $with["\x70\x69\166\157\164\x5f\x72\x65\146\x65\x72\145\156\143\145\x64\x5f\153\x65\171"]]; $primary_key = $this->_get_primary_key($with["\164\x61\142\x6c\x65"]); $inserted_records[$rename] = ["\x6b\x65\x79" => $primary_key, "\x72\145\156\x61\155\145" => $rename, "\141\x63\164\165\141\x6c\137\156\x61\x6d\x65" => $actual_name, "\x6b\x65\171\163" => [$inserted_id], "\x6f\160\164\x69\x6f\156\163" => $options]; goto F967e; Ce391: $inserted_records[$rename]["\153\145\x79\163"][] = $inserted_id; F967e: dc9c7: } f5b2e: a72b6: cdd48: f2263: } Bacc3: A5dff: if (empty($this->has_tables)) { goto F7dc5; } foreach ($this->has_tables as $key => $has) { if (!($has["\164\x79\x70\145"] == "\x69\x6e\166\x65\x72\163\x65\x5f\x72\x65\154\141\164\151\x6f\156")) { goto d9b21; } $related_options = ["\155\x75\x74\141\x74\157\162\163" => !empty($options["\155\165\x74\141\164\157\x72\x73"][$key]) ? $options["\155\x75\x74\141\164\x6f\162\163"][$key] : [], "\x66\x72\141\x63\x74\141\154\x73" => NULL]; if (!(!empty($record[$key]) || !empty($record[$has["\x74\x61\x62\x6c\145"]]))) { goto F4fc1; } $use_key = !empty($record[$key]) ? $key : $has["\x74\x61\142\x6c\145"]; foreach ($record[$use_key] as $related) { $rename = $key; $actual_name = $has["\164\141\142\154\x65"]; $inserted_id = $this->_insert_related_records($rename, $actual_name, 0, $has, $related, $related_options); $insert_record[$has["\x72\145\146\145\x72\145\x6e\x63\145\x64\137\x6b\x65\171"]] = $inserted_id; if (!empty($inserted_records[$rename])) { goto afc0d; } $options = ["\162\x65\x6e\141\x6d\x65" => "\141\x74\164\x61\x63\150\x65\x64\x5f" . $rename, "\160\151\x76\x6f\164\x5f\x74\x61\142\x6c\x65" => $has["\x70\151\x76\x6f\164\x5f\164\141\x62\x6c\x65"], "\162\x65\x66\x65\x72\145\156\x63\151\156\147\137\153\x65\171" => $has["\x72\145\x66\145\x72\x65\156\143\151\156\147\x5f\x6b\x65\171"], "\162\145\146\145\162\x65\x6e\x63\145\144\137\x6b\145\171" => $has["\162\145\x66\x65\162\x65\x6e\143\145\144\x5f\153\145\x79"], "\x70\151\166\157\164\137\x72\x65\146\x65\162\x65\156\x63\x69\156\147\x5f\x6b\x65\x79" => $has["\160\151\166\x6f\x74\x5f\162\145\x66\145\x72\x65\x6e\x63\151\156\147\x5f\x6b\x65\x79"], "\x70\x69\x76\157\x74\137\x72\x65\146\x65\162\x65\156\143\145\x64\x5f\x6b\145\171" => $has["\160\x69\x76\157\x74\137\162\145\x66\x65\x72\x65\156\143\x65\144\x5f\153\x65\x79"]]; $primary_key = $this->_get_primary_key($has["\164\141\142\x6c\145"]); $inserted_records[$rename] = ["\153\x65\171" => $primary_key, "\162\x65\156\x61\x6d\x65" => $rename, "\x61\x63\164\165\141\154\137\x6e\141\x6d\x65" => $actual_name, "\153\x65\171\163" => [$inserted_id], "\157\x70\164\151\157\156\x73" => $options]; goto E0467; afc0d: $inserted_records[$rename]["\153\145\x79\x73"][] = $inserted_id; E0467: Ead93: } D3183: F4fc1: d9b21: ad232: } a8919: F7dc5: $sql = sprintf("\x49\x4e\x53\x45\122\124\x20\111\x4e\x54\117\x20\x60\x25\163\x60\40\x28", mysqli_real_escape_string($this->mysqli, $this->table)); $params = ''; $columns = []; $values = []; $value_placeholder = []; foreach ($insert_record as $key => $value) { $params .= "\x73"; $value_placeholder[] = "\x3f"; $columns[] = mysqli_real_escape_string($this->mysqli, $key); $values[] = mysqli_real_escape_string($this->mysqli, $value); d6828: } Fdb0c: $sql .= implode("\54", $columns); $sql .= "\51\40\x56\101\x4c\x55\105\123\x20\x28"; $sql .= implode("\54", $value_placeholder); $sql .= "\51"; $stmt = $this->mysqli->prepare($sql); $stmt->bind_param($params, ...$values); if (!$stmt->execute()) { goto Adfb6; } $primary_key = $this->_get_primary_key($this->table); $record_id = $this->mysqli->insert_id; if ($record_id) { goto c7816; } $record_id = $record[$primary_key]; c7816: $record[$primary_key] = $record_id; if (empty($inserted_records)) { goto f94ce; } foreach ($inserted_records as $key => $inserted_record) { $this->inserted_records[$record_id][$key] = $inserted_record; e7b05: } B8ed7: f94ce: if (empty($this->old_table)) { goto D83dc; } if (!($keys["\x74\171\160\x65"] == "\146\x6f\x72\x65\151\x67\156\x5f\153\x65\171")) { goto B921b; } $old_primary_key = $this->table_columns[$this->old_table]["\160\162\151\x6d\x61\162\171\137\x6b\145\171"]; $this->update($this->old_table, [$keys["\162\145\146\145\x72\x65\156\x63\x69\x6e\147\x5f\153\145\171"] => $record[$keys["\x72\x65\x66\x65\x72\x65\x6e\143\145\x64\x5f\153\145\171"]]], [$old_primary_key => $this->primary_key_value]); B921b: D83dc: $insert_record[$primary_key] = $record_id; $this->_attach_to_record($insert_record); if (empty($this->with_tables)) { goto ce61b; } foreach ($this->with_tables as $key => $with) { if (!($with["\164\171\x70\145"] != "\x69\x6e\166\145\x72\163\145\x5f\162\x65\154\141\164\x69\x6f\156")) { goto C4577; } $related_options = ["\x6d\165\164\x61\164\157\x72\163" => !empty($options["\x6d\165\x74\141\164\157\x72\x73"][$key]) ? $options["\x6d\165\164\141\164\x6f\x72\x73"][$key] : [], "\146\162\141\x63\164\x61\154\163" => NULL]; if (empty($record[$key])) { goto b6c10; } foreach ($record[$key] as $related) { $record_reference_id = $insert_record[$with["\162\x65\x66\145\x72\145\156\143\145\x64\x5f\153\145\171"]]; $related[$with["\x72\145\x66\x65\x72\x65\156\x63\151\156\x67\137\153\x65\x79"]] = $record_reference_id; $rename = $key; $actual_name = $with["\164\x61\x62\x6c\145"]; $this->_insert_related_records($rename, $actual_name, $record_id, $with, $related, $related_options, $record_reference_id); ae9ad: } D6ad4: b6c10: C4577: df5a9: } D63a3: ce61b: if (empty($this->has_tables)) { goto ac949; } foreach ($this->has_tables as $key => $has) { if (!($has["\164\x79\160\x65"] != "\x69\156\x76\x65\x72\163\145\x5f\162\x65\x6c\x61\x74\x69\157\156")) { goto E3d89; } $related_options = ["\155\165\164\x61\x74\157\162\163" => !empty($options["\x6d\165\164\141\164\157\162\163"][$key]) ? $options["\x6d\165\164\141\164\157\162\163"][$key] : [], "\146\162\x61\143\164\141\x6c\x73" => NULL]; if (empty($record[$key])) { goto cffe7; } foreach ($record[$key] as $related) { $record_reference_id = $insert_record[$with["\162\x65\x66\x65\x72\145\156\x63\145\144\x5f\x6b\145\171"]]; $related[$has["\x72\x65\x66\145\162\145\x6e\x63\151\156\147\137\153\x65\171"]] = $record_reference_id; $rename = $key; $actual_name = $has["\164\x61\142\154\x65"]; $this->_insert_related_records($rename, $actual_name, $record_id, $has, $related, $related_options, $record_reference_id); c7a89: } f106a: cffe7: E3d89: a4afe: } C7bd9: ac949: Adfb6: $record_ids[] = $record_id; c6f55: } F1719: $stmt->close(); $this->mysqli->commit(); } catch (mysqli_sql_exception $exception) { $this->mysqli->rollback(); $this->validation_errors[$this->_lang("\144\141\x74\x61\x62\141\163\145")][$this->_lang("\x74\x72\141\156\163\x61\143\x74\x69\x6f\156")] = $this->_lang("\x64\141\164\x61\142\141\163\x65\137\x74\x72\x61\156\x73\141\x63\164\x69\157\156\137\146\141\x69\x6c\x65\x64"); return FALSE; } $reponse_records = []; foreach ($record_ids as $record_id) { $repo = new self($this->init_config); $inserted = $repo->table($this->table)->find($record_id); if (empty($this->inserted_records[$record_id])) { goto B5adf; } foreach (array_reverse($this->inserted_records[$record_id]) as $with) { $inserted = $inserted->where_with($with["\141\143\x74\165\x61\154\137\x6e\141\x6d\x65"], static function ($query) use($with) { return $query->where_in($with["\x6b\x65\x79"], $with["\153\145\171\163"]); }, ["\x72\145\x6e\141\155\x65" => $with["\x72\145\156\x61\155\x65"]]); F44bf: } A2b73: B5adf: if (empty($this->all_attached_records[$record_id])) { goto d952e; } foreach (array_reverse($this->all_attached_records[$record_id]) as $with) { $inserted = $inserted->where_with($with["\x61\143\164\165\x61\x6c\x5f\156\x61\x6d\145"], static function ($query) use($with) { return $query->where_in($with["\153\145\x79"], $with["\x6b\x65\171\163"]); }, $with["\157\x70\164\x69\x6f\x6e\x73"]); eb507: } f45c4: d952e: if (!($this->db_column_case != $this->case)) { goto D16b2; } $inserted = $inserted->switch_case($this->case); D16b2: $reponse_records[] = $inserted->get(); $repo->close(); $repo = NULL; edb01: } A410f: return $is_single ? $reponse_records[0] : $reponse_records; } public function edit($records, $options = array()) { if (!empty($this->table)) { goto eeb19; } $this->validation_errors[$this->_lang("\x6d\x65\x74\150\157\144\137\x63\x68\141\151\x6e")][$this->_lang("\164\x61\x62\x6c\145")] = $this->_lang("\156\x6f\x5f\164\x61\x62\154\x65"); return FALSE; eeb19: if (empty($this->validation_errors)) { goto Df058; } return FALSE; Df058: $this->_get_table_columns(); $this->_get_table_keys(); if (empty($this->with_tables)) { goto Dae54; } foreach ($this->with_tables as $key => $with) { $this->with_tables[$key] = $this->_loop_keys($with); Bc12e: } E0320: Dae54: if (empty($this->has_tables)) { goto a4c0a; } foreach ($this->has_tables as $key => $has) { $this->has_tables[$key] = $this->_loop_keys($has); Ee2da: } bcd7e: a4c0a: if (empty($this->attach_tables)) { goto D12a9; } $this->_get_relations($this->attach_tables); D12a9: if (empty($this->attach_new_tables)) { goto D4530; } foreach ($this->attach_new_tables as $key => $attach) { $this->attach_new_tables[$key] = $this->_loop_keys($attach); e4c14: } c4753: D4530: if (empty($this->attach_new_tables)) { goto A916a; } $this->_loop_records($this->attach_new_tables); A916a: if (empty($this->detach_tables)) { goto Ed580; } $this->_get_relations($this->detach_tables); Ed580: if (empty($this->sync_tables)) { goto a575f; } $this->_get_relations($this->sync_tables); a575f: if (empty($this->sync_new_tables)) { goto e2941; } foreach ($this->sync_new_tables as $key => $sync) { $this->sync_new_tables[$key] = $this->_loop_keys($sync); de8b1: } e93c9: e2941: if (empty($this->sync_new_tables)) { goto C5852; } $this->_loop_records($this->sync_new_tables); C5852: if (!(!empty($this->with_tables) || !empty($this->has_tables) || !empty($this->attach_tables) || !empty($this->attach_new_tables) || !empty($this->detach_tables) || !empty($this->sync_tables) || !empty($this->sync_new_tables))) { goto Dcf2b; } $this->_get_table_columns(); Dcf2b: $is_single = FALSE; if (isset($records[0]) && is_array($records[0])) { goto c2b0e; } $is_single = TRUE; $records = [$records]; goto D01fb; c2b0e: D01fb: if (!(!empty($this->primary_key_value) && empty($this->old_table))) { goto Df8c4; } foreach ($records as $k => $record) { $record[$this->primary_key] = $this->primary_key_value; $records[$k] = $record; Ed7fd: } Cb78c: Df8c4: $primary_key = !empty($options["\160\162\151\155\x61\x72\171\137\153\x65\171"]) ? $options["\160\x72\x69\x6d\141\x72\171\137\x6b\x65\171"] : $this->_get_primary_key($this->table); foreach ($records as $r => $record) { $record = $this->_change_record_case($record); $record = $this->_change_record_array($record, $this->with_tables); $record = $this->_change_record_array($record, $this->has_tables); foreach ($this->attach_tables as $attach) { if (!($attach["\x74\171\x70\x65"] == "\151\156\166\145\x72\x73\145\x5f\x72\x65\x6c\141\x74\151\x6f\x6e")) { goto Bbb0a; } $pk = $this->_get_primary_key($attach["\x74\x61\142\x6c\x65"]); $last_id = $referenced_key = $attach["\x69\x64\163"][count($attach["\x69\x64\x73"]) - 1]; if (!($attach["\x72\145\x66\x65\x72\x65\x6e\143\x65\144\x5f\x6b\x65\x79"] != $pk)) { goto Cedc7; } $repo = new self($this->init_config); $referenced = $repo->table($attach["\x74\x61\x62\x6c\145"])->find($last_id)->get(); $repo->close(); $repo = NULL; $referenced_key = $referenced[$attach["\162\145\146\x65\x72\x65\156\143\151\x6e\x67\137\153\x65\171"]]; Cedc7: $record[$attach["\162\145\x66\x65\162\145\x6e\143\x65\144\137\153\x65\x79"]] = $referenced_key; Bbb0a: c2a47: } D580e: $rules = []; $table_columns = $this->table_columns[$this->table]["\x63\157\x6c\x75\155\x6e\163"]; foreach ($table_columns as $column) { $column["\x76\x61\x6c\151\144\x61\x74\x69\157\156\137\x6e\141\155\145"] = $column["\x6e\x61\x6d\x65"]; $rules[$column["\156\x61\x6d\145"]] = $this->_create_validation($record, $this->table, $column, "\x65\x64\x69\x74"); F363b: } a2df1: if (empty($this->with_tables)) { goto e7031; } foreach ($this->with_tables as $key => $with) { $validation_name = $with["\x74\141\142\154\x65"]; if (empty($record[$key])) { goto A7e87; } $related_rules = $this->_related_validation($with, $record[$key], $validation_name, "\x65\x64\x69\x74"); $rules = array_merge($rules, $related_rules); A7e87: c4130: } A20a6: e7031: if (empty($this->has_tables)) { goto c0879; } $counter = 0; foreach ($this->has_tables as $key => $has) { $validation_name = $key; $human_name = $this->change_case($key, "\150\x75\x6d\x61\x6e"); $rules[$validation_name . "\x5b\x5d"] = ["\x72\145\156\141\x6d\145" => $human_name, "\x72\165\154\x65\163" => "\x72\145\161\165\151\x72\x65\x64"]; if (!empty($record[$key])) { goto a5743; } $has_rules = $this->_has_validation($has, NULL, $validation_name . "\133\60\135", $human_name); $rules = array_merge($rules, $has_rules); goto ec97d; a5743: $has_rules = $this->_has_validation($has, $record[$key], $validation_name, $human_name); $rules = array_merge($rules, $has_rules); ec97d: $counter++; bf11e: } D6a66: c0879: if (empty($this->has_tables)) { goto f3bd6; } foreach ($this->has_tables as $key => $has) { $validation_name = $has["\x74\x61\142\154\x65"]; if (empty($record[$key])) { goto f38bf; } $related_rules = $this->_related_validation($has, $record[$key], $validation_name, "\145\144\x69\164"); $rules = array_merge($rules, $related_rules); f38bf: d3238: } cbb01: f3bd6: if (!($this->validate($record, $rules) === FALSE)) { goto c8676; } if ($is_single) { goto cdd37; } $record_count = $r + 1; $this->validation_errors[$this->_lang("\x6d\145\164\150\157\x64\137\x63\150\x61\x69\x6e")][$this->_lang("\145\144\151\x74")] = "\x52\x65\x63\x6f\x72\x64\40{$record_count}"; cdd37: return FALSE; c8676: edaea: } d9ea7: if ($this->_validate_attach()) { goto ad0e2; } return FALSE; ad0e2: if ($this->_validate_attach_new()) { goto B9874; } return FALSE; B9874: if ($this->_validate_detach()) { goto A215e; } return FALSE; A215e: if ($this->_validate_sync($this->sync_tables)) { goto F9cd0; } return FALSE; F9cd0: if ($this->_validate_sync_new()) { goto fac4e; } return FALSE; fac4e: $record_ids = []; $updated_records = []; $this->mysqli->begin_transaction(); try { foreach ($records as $record) { $record = $this->_change_record_case($record); $record = $this->_change_record_array($record, $this->with_tables); $record = $this->_change_record_array($record, $this->has_tables); foreach ($this->attach_tables as $attach) { if (!($attach["\164\x79\x70\x65"] == "\x69\156\x76\145\x72\163\x65\x5f\162\x65\154\x61\164\x69\x6f\156")) { goto Cf55f; } $pk = $this->_get_primary_key($attach["\x74\x61\142\154\x65"]); $last_id = $referenced_key = $attach["\151\x64\x73"][count($attach["\x69\x64\163"]) - 1]; if (!($attach["\x72\x65\x66\145\x72\145\x6e\143\x65\x64\x5f\153\145\x79"] != $pk)) { goto C7d5e; } $repo = new self(); $referenced = $repo->table($attach["\164\141\x62\x6c\145"])->find($last_id)->get_result(); $repo->close(); $repo = NULL; $referenced_key = $referenced[$attach["\x72\x65\146\x65\162\x65\x6e\x63\151\x6e\x67\137\x6b\x65\171"]]; C7d5e: $record[$attach["\162\x65\x66\145\162\x65\156\143\x65\x64\137\x6b\x65\x79"]] = $referenced_key; Cf55f: F607f: } e6516: $primary_key_value = !empty($record[$primary_key]) ? $record[$primary_key] : NULL; $main_mutator = $this->_get_create_fractal($this->table); $update_record = $main_mutator($record); $sql = sprintf("\x55\x50\104\x41\x54\105\40\140\45\163\140\x20\123\x45\x54\x20", mysqli_real_escape_string($this->mysqli, $this->table)); $params = "\x73"; $columns = []; $values = []; foreach ($update_record as $key => $value) { $params .= "\x73"; $columns[] = mysqli_real_escape_string($this->mysqli, $key); $values[] = mysqli_real_escape_string($this->mysqli, $value); Bb1e2: } Ed595: $sql .= implode("\x20\x3d\x20\x3f\54\40", $columns); $sql .= sprintf("\40\x3d\40\77\x20\127\110\x45\x52\105\40\45\x73\40\75\x20\x3f", mysqli_real_escape_string($this->mysqli, $primary_key)); $values[] = mysqli_real_escape_string($this->mysqli, $primary_key_value); $stmt = $this->mysqli->prepare($sql); $stmt->bind_param($params, ...$values); if (!$stmt->execute()) { goto Ceec7; } if (empty($this->with_tables)) { goto f3574; } foreach ($this->with_tables as $key => $with) { $reference_keys = $this->_get_reference_keys($with["\x74\141\x62\154\145"], $this->table, NULL, $with["\162\145\146\x65\162\x65\x6e\143\x69\156\147\137\x6b\x65\x79"], $with["\x72\145\146\x65\162\x65\156\143\x65\144\x5f\x6b\x65\171"]); $with["\x72\x65\x66\x65\x72\x65\x6e\143\x69\156\147\x5f\x6b\145\171"] = $reference_keys["\162\x65\x66\x65\x72\x65\156\x63\x69\x6e\x67\x5f\x6b\145\x79"]; $with["\162\x65\146\x65\162\145\156\143\145\x64\137\153\145\171"] = $reference_keys["\162\x65\x66\x65\162\145\x6e\x63\145\x64\x5f\153\x65\171"]; $with["\x74\171\x70\145"] = $reference_keys["\x74\171\x70\x65"]; $related_options = ["\155\165\x74\141\164\x6f\x72\x73" => !empty($options["\x6d\x75\164\141\164\x6f\x72\163"][$key]) ? $options["\155\x75\x74\x61\164\157\162\x73"][$key] : [], "\x66\162\x61\143\x74\141\154\x73" => NULL]; if (empty($record[$key])) { goto B09fe; } foreach ($record[$key] as $related) { $related[$with["\x72\x65\x66\145\x72\145\x6e\x63\151\156\147\x5f\x6b\x65\x79"]] = $primary_key_value; $rename = $key; $actual_name = $with["\164\x61\142\x6c\x65"]; $this->_update_related_records($rename, $actual_name, $primary_key_value, $with, $related, $related_options); c960c: } bdf0a: B09fe: B5bd9: } A15ef: f3574: if (empty($this->has_tables)) { goto Ff461; } foreach ($this->has_tables as $key => $has) { $reference_keys = $this->_get_reference_keys($has["\164\x61\x62\x6c\145"], $this->table, NULL, $has["\162\145\146\145\x72\x65\x6e\143\151\x6e\x67\137\153\145\x79"], $has["\162\145\x66\x65\162\145\156\143\145\x64\137\x6b\x65\171"]); $has["\162\145\146\145\x72\145\x6e\143\151\x6e\x67\137\153\145\171"] = $reference_keys["\x72\145\146\145\x72\x65\x6e\143\151\156\x67\x5f\x6b\145\171"]; $has["\x72\145\x66\x65\162\x65\x6e\143\x65\144\137\x6b\x65\x79"] = $reference_keys["\x72\145\x66\x65\x72\x65\156\x63\x65\x64\x5f\153\x65\171"]; $has["\164\x79\x70\x65"] = $reference_keys["\x74\x79\x70\x65"]; $related_options = ["\155\x75\x74\x61\x74\x6f\x72\163" => !empty($options["\155\165\x74\x61\x74\x6f\x72\163"][$key]) ? $options["\155\165\x74\x61\x74\x6f\162\163"][$key] : [], "\146\162\141\143\x74\141\154\x73" => NULL]; if (empty($record[$key])) { goto F11fa; } foreach ($record[$key] as $related) { $related[$has["\162\145\146\x65\162\x65\x6e\x63\151\x6e\147\137\153\145\x79"]] = $primary_key_value; $rename = $key; $actual_name = $has["\x74\141\142\x6c\x65"]; $this->_update_related_records($rename, $actual_name, $primary_key_value, $has, $related, $related_options); Cfcc5: } Cd13c: F11fa: ae67b: } b912d: Ff461: if (!(!empty($this->attach_tables) || !empty($this->attach_new_tables) || !empty($this->detach_tables) || !empty($this->sync_tables) || !empty($this->sync_new_tables))) { goto c2748; } $repo = new self(); $complete_record = $repo->table($this->table)->find($primary_key_value)->get(); $repo->close(); $repo = NULL; $updated_records[] = $complete_record; $this->_attach_to_record($complete_record); $this->_detach_to_record($complete_record); $this->_sync_to_record($this->sync_tables, $complete_record); c2748: Ceec7: $record_ids[] = $primary_key_value; C62ba: } c5c8c: $stmt->close(); if (empty($this->attach_new_tables)) { goto f5203; } foreach ($this->attach_new_tables as $key => $attach_new_table) { if ($attach_new_table["\x6e\x65\x77"]) { goto Ab9ae; } $this->_attach_new_to_all_records($updated_records, $attach_new_table, $key); goto E4645; Ab9ae: foreach ($updated_records as $updated_rec) { $this->_attach_new_to_record($updated_rec, $attach_new_table, $key); b5f87: } f873e: E4645: E2ed7: } ca802: f5203: if (empty($this->sync_new_tables)) { goto Ddfbf; } foreach ($this->sync_new_tables as $key => $sync_new_table) { if ($sync_new_table["\x6e\145\167"]) { goto Fbc87; } $this->_sync_new_to_all_records($updated_records, $sync_new_table, $key); goto C14e2; Fbc87: foreach ($updated_records as $updated_rec) { $this->_sync_new_to_record($updated_rec, $sync_new_table, $key); a3bde: } a10aa: C14e2: Af80f: } Adbe3: Ddfbf: $this->mysqli->commit(); } catch (mysqli_sql_exception $ex) { $this->mysqli->rollback(); $this->validation_errors[$this->_lang("\144\141\x74\141\x62\x61\x73\145")][$this->_lang("\164\x72\141\156\x73\141\143\x74\x69\157\x6e")] = $this->_lang("\144\x61\164\x61\142\141\x73\x65\137\164\x72\141\x6e\163\141\143\164\x69\x6f\156\x5f\x66\141\151\x6c\x65\144"); return FALSE; } $reponse_records = []; foreach ($record_ids as $primary_key_value) { $repo = new self($this->init_config); $updated = $repo->table($this->table)->find($primary_key_value); if (empty($this->all_synced_records[$primary_key_value])) { goto A2e87; } foreach (array_reverse($this->all_synced_records[$primary_key_value]) as $with) { $updated = $updated->where_with($with["\x61\143\x74\165\141\x6c\137\x6e\141\x6d\145"], static function ($query) use($with) { return $query->where_in($with["\x6b\x65\x79"], $with["\x6b\x65\x79\163"]); }, $with["\x6f\x70\x74\x69\x6f\156\x73"]); ff0ba: } Ba71c: A2e87: if (empty($this->inserted_records[$primary_key_value])) { goto F4c66; } foreach (array_reverse($this->inserted_records[$primary_key_value]) as $attach) { $updated = $updated->where_with($attach["\x61\x63\164\x75\141\154\x5f\156\141\155\145"], static function ($query) use($attach) { return $query->where_in($attach["\x6b\x65\x79"], $attach["\153\x65\171\163"]); }, $attach["\x6f\160\164\151\x6f\x6e\163"]); A8ee4: } f284e: F4c66: if (empty($this->all_attached_records[$primary_key_value])) { goto babba; } foreach (array_reverse($this->all_attached_records[$primary_key_value]) as $with) { $updated = $updated->where_with($with["\141\143\164\x75\x61\x6c\137\x6e\141\155\x65"], static function ($query) use($with) { return $query->where_in($with["\x6b\x65\x79"], $with["\153\145\171\x73"]); }, $with["\157\160\x74\151\x6f\156\x73"]); Ee41e: } eb0d5: babba: if (empty($this->all_updated_records[$primary_key_value])) { goto B1580; } foreach (array_reverse($this->all_updated_records[$primary_key_value]) as $with) { $updated = $updated->where_with($with["\141\x63\x74\165\141\154\x5f\x6e\x61\x6d\145"], static function ($query) use($with) { return $query->where_in($with["\153\145\x79"], $with["\153\145\x79\x73"]); }, $with["\x6f\160\164\151\x6f\156\163"]); d47ea: } Aad11: B1580: if (!($this->db_column_case != $this->case)) { goto E6453; } $updated = $updated->switch_case($this->case); E6453: $updated_record = $updated->get(); if (empty($this->all_detached_records[$primary_key_value])) { goto dd168; } foreach ($this->all_detached_records[$primary_key_value] as $dr => $detached_record) { $fc_dr = $this->change_case($dr, $this->db_column_case); $updated_record[$fc_dr] = $detached_record; C85d9: } Bd20b: dd168: $reponse_records[] = $updated_record; $repo->close(); $repo = NULL; c82ce: } ae83c: return $is_single ? $reponse_records[0] : $reponse_records; } private function _change_record_case($records) { $fc_records = []; foreach ($records as $key => $record) { if (is_array($record)) { goto c16da; } $fc_key = $this->change_case($key, $this->db_column_case); $fc_records[$fc_key] = $record; goto B32f3; c16da: $fc_key = $this->change_case($key, $this->db_table_case); $fc_records[$fc_key] = $this->_change_record_case($record); B32f3: bb6d9: } F4b52: return $fc_records; } private function _change_record_array($records, $relations) { foreach ($relations as $key => $relation) { if (!(!empty($records[$key]) || !empty($records[$relation["\x74\141\x62\x6c\x65"]]))) { goto d3639; } $use_key = !empty($records[$key]) ? $key : $relation["\164\x61\142\154\145"]; if (!empty($records[$use_key][0])) { goto b8229; } $single = $records[$use_key]; $records[$use_key] = []; $records[$use_key][0] = $single; b8229: if (empty($relation["\162\x65\154\141\164\x65\144\x5f\x74\x61\x62\x6c\145\x73"])) { goto e114a; } foreach ($records[$use_key] as $r => $record) { $records[$use_key][$r] = $this->_change_record_array($record, $relation["\162\x65\x6c\141\x74\145\144\x5f\164\141\142\154\145\163"]); ed466: } b9639: e114a: d3639: ee887: } d25b1: return $records; } private function _create_validation($record, $table, $column, $action = "\141\144\144", $is_required = '') { $name = $column["\x6e\x61\x6d\x65"]; $underscore_name = $this->change_case($name, "\x75\156\x64\x65\x72\163\x63\157\x72\x65"); $human_name = $this->change_case($name, "\x68\165\x6d\x61\x6e\137\x63\141\x70\x69\164\x61\x6c"); $validation_name = $column["\166\141\x6c\151\144\141\164\x69\157\156\137\156\141\155\145"]; $numeric_only = ["\x74\151\x6e\171\151\156\164", "\155\x65\x64\x69\x75\155\151\156\x74", "\x69\x6e\164", "\155\145\x64\151\165\x6d\x69\156\x74", "\142\151\147\151\x6e\x74", "\x64\x65\x63\x69\x6d\x61\x6c", "\x64\x6f\x75\x62\x6c\x65", "\146\x6c\157\141\164"]; $required = $column["\156\x75\x6c\x6c"] && empty($column["\144\x65\x66\141\x75\x6c\x74"]) && !$column["\141\x75\164\157\137\x69\156\143\x72\x65\155\145\156\164"] ? "\174\162\x65\x71\x75\x69\162\x65\x64" : "\x7c\x73\x6f\x6d\x65\x74\151\x6d\145\163"; $required = $is_required == "\162\145\161\165\151\x72\145\x64" ? "\x7c\162\145\161\165\x69\162\145\x64" : $required; if (!($is_required == "\156\157\164\137\x72\x65\161\165\x69\162\145\x64" || $action == "\x65\x64\151\x74")) { goto B9522; } $required = "\174\x73\x6f\x6d\x65\164\x69\155\x65\163"; B9522: if (!($action == "\x65\144\151\x74" && $column["\x6b\x65\171"] == "\120\122\111" && empty($record[$name]))) { goto b93d5; } $required = "\x7c\x72\145\161\x75\x69\162\x65\x64"; b93d5: $unique = ''; $is_unique = $column["\153\145\x79"] == "\x55\x4e\x49" || $column["\x6b\145\171"] == "\x50\122\x49" ? "\174\165\156\151\161\165\x65\x3a{$table}\x2e{$name}" : ''; if (!($action == "\145\x64\x69\164")) { goto C80b6; } $is_unique = ''; $unique_value = !empty($record[$name]) ? $record[$name] : ''; if (!($column["\x6b\x65\x79"] == "\125\116\111" || $column["\x6b\x65\171"] == "\x50\x52\x49")) { goto da88f; } $unique = "\x7c\165\156\x69\x71\x75\145\x3a{$table}\x2e{$name}\x2c{$unique_value}"; da88f: C80b6: $max = !empty($column["\x6d\141\170"]) ? "\174\x6d\x61\x78\x3a" . $column["\x6d\141\170"] : ''; $url = $underscore_name == "\165\162\x6c" || strpos($underscore_name, "\x5f\165\x72\154") ? "\x7c\x75\162\x6c" : ''; $email = $underscore_name == "\145\x6d\x61\x69\x6c" || $underscore_name == "\145\x5f\x6d\x61\x69\x6c" ? "\174\x65\155\141\x69\x6c" : ''; $numeric = in_array($column["\164\x79\x70\x65"], $numeric_only) ? "\174\156\165\x6d\142\x65\162" : ''; $integer = $column["\x74\x79\160\145"] == "\x69\x6e\x74" ? "\174\151\x6e\x74\x65\147\x65\162" : ''; $positive = strpos($column["\143\157\x6d\x70\154\145\x74\145\137\x74\x79\x70\145"], "\165\156\163\151\x67\x6e\x65\x64") ? "\x7c\x6e\x61\x74\x75\x72\141\154" : ''; $in_list = ''; if (!($column["\164\x79\160\145"] == "\145\156\x75\155")) { goto df04a; } preg_match_all("\x2f\47\x28\x2e\x2a\77\51\47\57", $column["\143\x6f\155\x70\x6c\x65\x74\145\137\164\x79\160\x65"], $matches); if (empty($matches[1])) { goto Bc4ca; } $list = implode("\x2c", $matches[1]); $in_list = "\174\151\156\x3a{$list}"; Bc4ca: df04a: $exists = ''; if (!($column["\153\145\x79"] == "\x4d\x55\x4c" && !empty($this->table_keys[$table]))) { goto A5179; } $tables = $this->table_keys[$table]; foreach ($tables as $key => $tbl) { foreach ($tables[$key] as $k => $col) { if (!($k == $column["\x6e\141\x6d\145"])) { goto F74f6; } $refrenced = $col["\x72\145\146\145\x72\x65\x6e\143\145\144\x5f\x6b\145\x79"]; $exists = "\x7c\145\170\151\163\164\x3a{$key}\56{$refrenced}"; goto c6d1f; F74f6: Bba31: } Ed2f7: Ff0e0: } c6d1f: A5179: $rules = "{$required}{$is_unique}{$unique}{$max}{$in_list}{$email}{$url}{$numeric}{$integer}{$exists}{$positive}"; $fixed_rules = $this->_get_validation(substr($rules, 1), $table, $column["\x6e\x61\155\145"], $action); if (empty($fixed_rules)) { goto b49d2; } return ["\162\145\x6e\141\155\145" => $human_name, "\x72\165\154\x65\x73" => $fixed_rules]; b49d2: return []; } private function _get_validation($rules, $table, $column, $action) { $additional_rules = ''; if (empty($this->table_config[$table]["\x76\141\x6c\x69\x64\141\164\151\157\x6e\163"][$action][$column])) { goto E32ca; } $rules = $this->table_config[$table]["\x76\141\x6c\151\144\x61\x74\151\x6f\x6e\x73"][$action][$column]; E32ca: if (empty($this->table_config[$table]["\141\x64\144\151\x74\151\157\x6e\x61\x6c\x5f\166\141\154\151\x64\141\164\x69\x6f\x6e\x73"][$action][$column])) { goto Ca15f; } $additional = $this->table_config[$table]["\x61\x64\144\x69\x74\x69\x6f\x6e\x61\154\x5f\166\x61\154\x69\144\x61\x74\x69\x6f\x6e\163"][$action][$column]; $additional_rules = substr($additional, 0, 1) === "\174" ? $additional : "\x7c" . $additional; Ca15f: if (empty($this->additional_validations[$action][$column])) { goto Bd8d9; } $additional = $this->additional_validations[$action][$column]; $additional_rules = substr($additional, 0, 1) === "\x7c" ? $additional : "\174" . $additional; Bd8d9: return $rules . $additional_rules; } private function _related_validation($table, $records, $validation_name = '', $action = "\141\144\x64") { $rules = []; $related_table = $table["\164\141\142\x6c\x65"]; $i = 0; Dafee: if (!($i < count($records))) { goto F2231; } foreach ($this->table_columns[$related_table]["\143\x6f\x6c\165\x6d\156\x73"] as $column) { $column["\166\141\x6c\x69\x64\141\x74\x69\157\156\x5f\156\x61\155\145"] = "{$validation_name}\56{$i}\x2e{$column["\156\x61\155\x65"]}"; if (!($table["\164\x79\160\145"] == "\151\156\166\145\x72\x73\x65\x5f\x72\x65\x6c\x61\x74\151\157\x6e" && $column["\156\x61\x6d\145"] == $table["\x72\x65\x66\x65\162\145\x6e\143\151\x6e\x67\137\153\x65\171"] && $column["\x6b\x65\171"] == "\x55\x4e\111")) { goto A9a77; } $rules[$column["\x76\x61\154\151\x64\x61\164\x69\x6f\x6e\137\156\x61\155\x65"]] = $this->_create_validation($records[$i], $related_table, $column, $action); A9a77: if (!($column["\x6e\141\155\x65"] != $table["\x72\x65\146\145\x72\145\156\143\151\156\147\x5f\153\145\x79"] && $column["\153\145\171"] != "\115\125\x4c")) { goto Ded2f; } $rules[$column["\166\x61\x6c\151\144\141\164\x69\x6f\156\x5f\x6e\141\x6d\145"]] = $this->_create_validation($records[$i], $related_table, $column, $action); Ded2f: if (!($column["\x6e\x61\155\x65"] != $table["\162\145\x66\x65\x72\145\x6e\x63\151\x6e\x67\x5f\153\x65\x79"] && $column["\x6b\145\x79"] == "\115\x55\114")) { goto D4914; } $in_related_tables = FALSE; if (empty($table["\x72\145\x6c\x61\x74\145\x64\x5f\164\x61\x62\x6c\x65\163"])) { goto A2e53; } foreach ($table["\x72\145\x6c\x61\x74\x65\x64\x5f\164\x61\x62\154\145\163"] as $key => $related) { $reference_keys = $this->_get_reference_keys($related["\x74\141\142\x6c\145"], $table["\164\x61\142\x6c\145"], NULL, $related["\x72\145\x66\x65\162\145\156\x63\x69\x6e\147\x5f\x6b\x65\x79"], $related["\162\x65\146\x65\162\145\x6e\x63\145\144\137\x6b\145\171"]); if (!($column["\x6e\141\x6d\145"] == $reference_keys["\162\x65\146\x65\x72\145\x6e\143\145\144\137\153\x65\x79"])) { goto Fcc80; } $in_related_tables = TRUE; $use_key = array_key_exists($key, $records[$i]) ? $key : $related["\x74\141\142\154\145"]; if (!empty($records[$i][$key][0]) || !empty($records[$i][$related["\x74\141\142\154\x65"]][0])) { goto B70ec; } $rules[$column["\166\141\x6c\151\x64\141\x74\x69\x6f\156\x5f\x6e\x61\155\145"]] = $this->_create_validation($records[$i], $related_table, $column, $action); goto bad6c; B70ec: $rules[$column["\x76\141\154\151\144\x61\164\151\x6f\x6e\137\x6e\x61\x6d\145"]] = $this->_create_validation($records[$i], $related_table, $column, $action, "\x6e\157\164\137\x72\x65\161\165\151\x72\x65\144"); bad6c: Fcc80: F42e7: } f629a: A2e53: if ($in_related_tables) { goto f9433; } foreach ($this->table_keys[$related_table] as $key => $related) { foreach ($related as $k => $rel) { if (!($column["\156\141\155\x65"] == $rel["\x72\x65\146\145\162\145\156\x63\x69\x6e\x67\x5f\x6b\145\x79"])) { goto a7e19; } if (!empty($records[0][$column["\x6e\x61\x6d\x65"]])) { goto Cf558; } $rules[$column["\x76\141\x6c\x69\x64\x61\x74\151\157\x6e\x5f\156\x61\155\x65"]] = $this->_create_validation($records[$i], $related_table, $column, $action); goto c27a5; Cf558: $rules[$column["\166\141\154\x69\x64\141\164\x69\x6f\156\x5f\156\x61\155\145"]] = $this->_create_validation($records[$i], $related_table, $column, $action, "\x72\x65\x71\165\x69\162\x65\144"); c27a5: a7e19: dfd21: } Eb0fa: Abc87: } ca32c: f9433: D4914: A0ee8: } f01b9: if (empty($table["\x70\x69\166\x6f\x74\x5f\x74\141\x62\x6c\x65"])) { goto dbbab; } $pivot_table = $table["\x70\x69\166\x6f\164\x5f\x74\x61\142\x6c\145"]; $foreign_keys = [$table["\162\145\146\x65\162\145\156\x63\x69\x6e\x67\x5f\153\x65\171"], $table["\160\151\x76\x6f\164\137\x72\145\x66\145\162\145\x6e\x63\x69\156\147\x5f\153\145\x79"]]; foreach ($this->table_columns[$pivot_table]["\143\x6f\x6c\x75\x6d\x6e\163"] as $column) { $column["\166\x61\154\151\144\x61\x74\151\x6f\156\x5f\x6e\x61\155\145"] = "{$validation_name}\x2e{$i}\x2e{$pivot_table}\56{$column["\x6e\x61\155\x65"]}"; if (in_array($column["\x6e\141\x6d\145"], $foreign_keys) && $column["\x6b\145\x79"] == "\115\125\x4c") { goto Dd989; } $rules[$column["\x76\141\x6c\151\144\x61\164\151\x6f\156\137\156\x61\x6d\145"]] = $this->_create_validation($records[$i], $pivot_table, $column, $action); goto A34f8; Dd989: $rules[$column["\166\x61\154\x69\144\141\164\x69\157\x6e\x5f\x6e\x61\x6d\145"]] = $this->_create_validation($records[$i], $pivot_table, $column, $action, "\156\157\x74\x5f\162\x65\x71\x75\151\x72\145\x64"); A34f8: Af17f: } aceef: dbbab: if (empty($table["\x72\145\x6c\141\x74\x65\144\137\164\141\142\x6c\x65\163"])) { goto d53a8; } foreach ($table["\x72\145\x6c\141\x74\x65\144\x5f\x74\141\142\154\x65\x73"] as $key => $with) { $use_key = array_key_exists($key, $records[$i]) ? $key : $with["\x74\141\142\154\x65"]; $related_validation_name = $validation_name . "\x5b{$i}\135" . "\133" . $use_key . "\x5d"; if (!(!empty($records[$i][$key]) || !empty($records[$i][$use_key]))) { goto Cc670; } $related_rules = $this->_related_validation($with, $records[$i][$use_key], $related_validation_name, $action); $rules = array_merge($rules, $related_rules); Cc670: C14a0: } a8dbf: d53a8: C59f2: $i++; goto Dafee; F2231: return $rules; } private function _has_validation($table, $records, $validation_name, $human_name) { $rules = []; if (empty($records)) { goto de646; } $i = 0; ab0d5: if (!($i < count($records))) { goto f4712; } $parent_name = $validation_name . "\x5b{$i}\135"; $rules[$parent_name] = ["\x72\145\156\x61\155\x65" => $human_name, "\162\x75\154\x65\163" => "\x72\145\x71\x75\151\x72\145\144"]; if (empty($table["\162\145\x6c\141\164\x65\x64\137\x74\141\x62\154\145\x73"])) { goto D1e93; } foreach ($table["\x72\145\154\x61\164\145\144\x5f\x74\x61\142\x6c\x65\163"] as $key => $has) { if (!empty($records[$i][$key])) { goto C75d1; } $child_name = $parent_name . "\133{$key}\135" . "\133\x30\135"; $child_human_name = $this->change_case($key, "\150\x75\x6d\141\x6e"); $rules[$child_name] = ["\162\x65\156\x61\155\x65" => $child_human_name, "\x72\165\x6c\145\x73" => "\162\x65\x71\x75\x69\x72\x65\x64"]; if (empty($has["\x72\145\x6c\x61\164\x65\x64\x5f\164\x61\142\154\145\163"])) { goto bd378; } $counter = 0; foreach ($has["\162\x65\154\x61\x74\x65\144\137\x74\x61\142\x6c\145\163"] as $key => $related) { $new_name = $child_name . "\133{$key}\x5d\x5b{$counter}\135"; $new_human_name = $this->change_case($key, "\x68\165\x6d\141\x6e"); if (!empty($records[$key])) { goto E7e47; } $has_rules = $this->_has_validation($related, NULL, $new_name, $new_human_name); $rules = array_merge($rules, $has_rules); goto De178; E7e47: $has_rules = $this->_has_validation($related, $records[$key], $new_name, $new_human_name); $rules = array_merge($rules, $has_rules); De178: $counter++; E3f48: } Be4ce: bd378: goto Cecce; C75d1: $j = 0; C6217: if (!($j < count($records[$i][$key]))) { goto F0bfa; } $new_name = $parent_name . "\x5b" . $key . "\x5d\133{$j}\135"; $new_human_name = $this->change_case($key, "\150\165\155\x61\156"); if (!empty($records[$key])) { goto Ba746; } $has_rules = $this->_has_validation($has, NULL, $new_name, $new_human_name); $rules = array_merge($rules, $has_rules); goto D9d92; Ba746: $has_rules = $this->_has_validation($has, $records[$key], $new_name, $new_human_name); $rules = array_merge($rules, $has_rules); D9d92: cb183: $j++; goto C6217; F0bfa: Cecce: A1604: } a48aa: D1e93: B691c: $i++; goto ab0d5; f4712: goto bdaed; de646: $rules[$validation_name] = ["\162\x65\156\141\x6d\145" => $human_name, "\x72\165\154\145\x73" => "\162\x65\161\x75\151\x72\x65\x64"]; if (empty($table["\x72\x65\x6c\x61\x74\x65\x64\137\164\141\142\154\145\163"])) { goto F16b3; } $counter = 0; foreach ($table["\162\145\x6c\141\164\145\144\x5f\x74\x61\x62\x6c\145\163"] as $key => $has) { $use_key = array_key_exists($key, $records) ? $key : $has["\164\141\142\154\x65"]; $new_name = $validation_name . "\133{$use_key}\135\133{$counter}\135"; $new_human_name = $this->change_case($use_key, "\x68\165\155\x61\156"); if (!empty($records[$key]) || !empty($records[$has["\x74\x61\142\x6c\145"]])) { goto B04f3; } $has_rules = $this->_has_validation($has, NULL, $new_name, $new_human_name); $rules = array_merge($rules, $has_rules); goto E65e8; B04f3: $has_rules = $this->_has_validation($has, $records[$use_key], $new_name, $new_human_name); $rules = array_merge($rules, $has_rules); E65e8: $counter++; F5605: } E04dd: F16b3: bdaed: return $rules; } public function update($records) { if (!empty($this->table)) { goto Ff656; } $this->validation_errors[$this->_lang("\x6d\145\x74\x68\157\144\137\143\150\x61\x69\156")][$this->_lang("\164\x61\x62\x6c\x65")] = $this->_lang("\x6e\157\137\x74\141\142\x6c\x65"); return FALSE; Ff656: $this->sql = sprintf("\125\120\104\x41\124\x45\40\45\x73\x20\x53\105\x54\40", mysqli_real_escape_string($this->mysqli, $this->table)); $params = ''; $columns = []; $values = []; foreach ($records as $key => $value) { $params .= "\x73"; $columns[] = mysqli_real_escape_string($this->mysqli, $key); $values[] = !empty($value) ? mysqli_real_escape_string($this->mysqli, $value) : NULL; c6e45: } f01cb: $this->sql .= implode("\x20\x3d\40\x3f\x2c\40", $columns); $this->sql .= "\40\75\40\x3f"; $this->_query_builder(); if ($this->has_where_clause) { goto E68e3; } $this->validation_errors[$this->_lang("\155\x65\x74\150\157\x64\137\x63\150\x61\151\156")][$this->_lang("\167\150\x65\x72\x65")] = $this->_lang("\x6e\x6f\137\167\x68\x65\162\x65"); return FALSE; E68e3: $this->action = "\165\160\144\x61\x74\145"; $this->prepared_statement = $this->mysqli->prepare($this->sql); $this->prepared_statement->bind_param($params, ...$values); $this->prepared_statement->execute(); return $this; } public function execute() { return $this->prepared_statement->execute(); } public function save() { $results = $this->get(); if (!empty($results)) { goto de0ea; } $this->validation_errors[$this->_lang("\x6d\145\164\150\x6f\144\x5f\x63\150\x61\151\x6e")][$this->_lang("\x73\141\x76\x65")] = $this->_lang("\x6e\x6f\x5f\162\145\x63\157\x72\144\x73\x5f\x74\157\137\x77\157\162\153"); return FALSE; de0ea: $this->_get_table_keys(); $this->_get_table_columns(); if (empty($this->attach_tables)) { goto E581f; } $this->_get_relations($this->attach_tables); E581f: if (empty($this->attach_new_tables)) { goto a0659; } foreach ($this->attach_new_tables as $key => $attach) { $this->attach_new_tables[$key] = $this->_loop_keys($attach); cfcc2: } C7c0f: a0659: if (empty($this->attach_new_tables)) { goto b2dc5; } $this->_loop_records($this->attach_new_tables); b2dc5: if (empty($this->detach_tables)) { goto c8302; } $this->_get_relations($this->detach_tables); c8302: if (empty($this->sync_tables)) { goto Adfdb; } $this->_get_relations($this->sync_tables); Adfdb: if (empty($this->sync_new_tables)) { goto cf321; } foreach ($this->sync_new_tables as $key => $sync) { $this->sync_new_tables[$key] = $this->_loop_keys($sync); A70c2: } Dd937: cf321: if (empty($this->sync_new_tables)) { goto f98fa; } $this->_loop_records($this->sync_new_tables); f98fa: if (!(!empty($this->attach_tables) || !empty($this->attach_new_tables) || !empty($this->detach_tables) || !empty($this->sync_tables) || !empty($this->sync_new_tables))) { goto Aa0f1; } $this->_get_table_columns(); Aa0f1: if ($this->_validate_attach()) { goto Be376; } return FALSE; Be376: if ($this->_validate_attach_new()) { goto Ca16d; } return FALSE; Ca16d: if ($this->_validate_detach()) { goto a7145; } return FALSE; a7145: if ($this->_validate_sync($this->sync_tables)) { goto f5529; } return FALSE; f5529: if ($this->_validate_sync_new()) { goto d08c0; } return FALSE; d08c0: $primary_key = $this->_get_primary_key($this->table); $this->mysqli->begin_transaction(); foreach ($results as $result) { $this->_attach_to_record($result); $this->_detach_to_record($result); $this->_sync_to_record($this->sync_tables, $result); be817: } e9aff: if (empty($this->attach_new_tables)) { goto db791; } foreach ($this->attach_new_tables as $key => $attach_new_table) { if ($attach_new_table["\x6e\x65\167"]) { goto Cd819; } $this->_attach_new_to_all_records($results, $attach_new_table, $key); goto Fee3a; Cd819: foreach ($results as $result) { $this->_attach_new_to_record($result, $attach_new_table, $key); F8d98: } f30ce: Fee3a: D65d1: } f65b5: db791: if (empty($this->sync_new_tables)) { goto Fecef; } foreach ($this->sync_new_tables as $key => $sync_new_table) { if ($sync_new_table["\x6e\145\x77"]) { goto bb334; } $this->_sync_new_to_all_records($results, $sync_new_table, $key); goto B5427; bb334: foreach ($results as $result) { $this->_sync_new_to_record($result, $sync_new_table, $key); D8966: } fbe14: B5427: b1156: } be018: Fecef: $this->mysqli->commit(); $reponse_records = []; foreach ($results as $result) { $primary_key_value = $result[$primary_key]; $repo = new self($this->init_config); $inserted = $repo->table($this->table)->find($primary_key_value); if (empty($this->all_synced_records[$primary_key_value])) { goto Ba3e1; } foreach (array_reverse($this->all_synced_records[$primary_key_value]) as $with) { $inserted = $inserted->where_with($with["\141\143\x74\x75\x61\x6c\137\156\x61\155\145"], static function ($query) use($with) { return $query->where_in($with["\x6b\x65\171"], $with["\x6b\x65\171\x73"]); }, $with["\x6f\160\164\151\x6f\x6e\163"]); D5a6c: } C2196: Ba3e1: if (empty($this->inserted_records[$primary_key_value])) { goto b6251; } foreach (array_reverse($this->inserted_records[$primary_key_value]) as $attach) { $inserted = $inserted->where_with($attach["\x61\x63\164\x75\x61\154\137\156\x61\x6d\145"], static function ($query) use($attach) { return $query->where_in($attach["\153\145\x79"], $attach["\x6b\x65\x79\163"]); }, $attach["\x6f\x70\x74\151\x6f\156\x73"]); C59b7: } fbad3: b6251: if (empty($this->all_attached_records[$primary_key_value])) { goto F0ac4; } foreach (array_reverse($this->all_attached_records[$primary_key_value]) as $with) { $inserted = $inserted->where_with($with["\141\x63\x74\165\x61\154\x5f\156\x61\155\x65"], static function ($query) use($with) { return $query->where_in($with["\153\145\x79"], $with["\153\x65\x79\163"]); }, $with["\x6f\x70\x74\151\157\156\x73"]); A8447: } Db515: F0ac4: if (empty($this->all_updated_records[$primary_key_value])) { goto f9ad6; } foreach (array_reverse($this->all_updated_records[$primary_key_value]) as $with) { $inserted = $inserted->where_with($with["\x61\x63\x74\x75\x61\x6c\137\156\x61\155\x65"], static function ($query) use($with) { return $query->where_in($with["\153\145\171"], $with["\x6b\145\171\x73"]); }, $with["\157\160\164\151\157\156\163"]); Dfd77: } c8994: f9ad6: $record = $inserted->get(); if (empty($this->all_detached_records[$primary_key_value])) { goto Cad01; } foreach ($this->all_detached_records[$primary_key_value] as $dr => $detached_record) { $fc_dr = $this->change_case($dr, $this->db_column_case); $record[$fc_dr] = $detached_record; d90ca: } A923b: Cad01: $reponse_records[] = $record; $repo->close(); $repo = NULL; fe93a: } F0d7a: return $reponse_records; } public function push($record, $options = array()) { if (empty($this->validation_errors)) { goto a4a91; } return FALSE; a4a91: $results = $this->get(); if (empty($results)) { goto de1f8; } return $this->edit($record, $options); goto Bf22a; de1f8: return $this->add($record, $options); Bf22a: } public function delete($ids = array(), $options = array()) { $this->_get_table_columns(); $primary_key = !empty($options["\160\162\151\155\141\x72\171\x5f\x6b\x65\x79"]) ? $options["\160\162\151\155\141\162\x79\137\153\145\171"] : $this->_get_primary_key($this->table); $current_case = $this->case; if (empty($ids)) { goto d597c; } $validate = NULL; $rules = []; if (is_array($ids)) { goto Ab51e; } $validate = [$primary_key => $ids]; $rules[$primary_key] = ["\162\x65\x6e\x61\x6d\145" => $primary_key, "\162\165\x6c\x65\x73" => "\162\x65\x71\165\x69\x72\x65\x64\x7c\145\170\x69\163\164\x73\x5b{$this->table}\x2e{$primary_key}\x5d"]; $ids = [$ids]; goto D119c; Ab51e: $validate = $ids; $i = 0; Fb736: if (!($i < count($ids))) { goto cbcb4; } $id_number = $i + 1; $rules[$i] = ["\162\x65\156\x61\155\145" => $primary_key, "\162\165\x6c\x65\x73" => "\162\x65\161\165\151\x72\x65\144\174\x65\x78\x69\x73\x74\163\133{$this->table}\x2e{$primary_key}\x5d"]; B0214: $i++; goto Fb736; cbcb4: D119c: if (!($this->validate($validate, $rules) === FALSE)) { goto F6cf6; } return FALSE; F6cf6: $record_ids = $ids; goto bb20c; d597c: $this->switch_case($this->db_column_case); $records = $this->get(); if ($this->has_where_clause) { goto E9274; } $this->validation_errors[$this->_lang("\155\145\x74\150\x6f\x64\x5f\143\x68\141\151\x6e")][$this->_lang("\144\x65\x6c\x65\x74\x65")] = $this->_lang("\x64\145\x6c\145\x74\x65\137\141\x6c\154"); return FALSE; E9274: if (!empty($records)) { goto C9c0b; } $this->validation_errors[$this->_lang("\x6d\x65\x74\150\157\x64\x5f\143\x68\141\151\x6e")][$this->_lang("\x64\x65\154\145\x74\x65")] = $this->_lang("\156\x6f\x5f\162\x65\143\x6f\162\x64\x73\137\164\157\x5f\144\x65\154\145\x74\145"); return FALSE; C9c0b: if (!empty($records[0])) { goto a7ceb; } $records = [$records]; a7ceb: $record_ids = array_column($records, $primary_key); bb20c: $repo = new self($this->init_config); $res = $repo->table($this->table)->where_in($primary_key, $record_ids)->switch_case($current_case)->get(); $repo->close(); $repo = NULL; if (!empty($res)) { goto e72af; } $this->validation_errors[$this->_lang("\155\145\164\x68\157\144\x5f\x63\x68\141\x69\x6e")][$this->_lang("\144\x65\154\145\x74\145")] = $this->_lang("\156\157\x5f\162\x65\143\x6f\162\x64\163\137\164\157\x5f\144\x65\154\x65\164\145"); return FALSE; e72af: try { $ids = implode("\47\54\x27", $record_ids); $sql = sprintf("\104\105\x4c\105\x54\x45\x20\x46\x52\x4f\x4d\40\x25\x73\40\x57\x48\x45\122\x45\x20\45\163\x20\111\116\x20\50\47{$ids}\47\51", mysqli_real_escape_string($this->mysqli, $this->table), mysqli_real_escape_string($this->mysqli, $primary_key)); $stmt = $this->mysqli->prepare($sql); $stmt->execute(); $stmt->close(); } catch (Exception $ex) { $this->validation_errors[$this->_lang("\x6d\145\164\x68\157\144\x5f\143\x68\x61\151\156")][$this->_lang("\144\x65\154\x65\x74\145")] = $ex->getMessage(); return FALSE; } return $res; } private function _get_primary_key($table) { if (empty($this->table_config[$table]["\x70\162\151\155\x61\x72\171\x5f\153\145\x79"])) { goto a7155; } return $this->table_config[$table]["\160\162\x69\x6d\141\x72\x79\137\x6b\145\x79"]; a7155: if (empty($this->table_columns[$table]["\x70\162\x69\x6d\x61\x72\x79\x5f\x6b\x65\171"])) { goto E26c8; } return $this->table_columns[$table]["\160\x72\151\155\x61\162\171\137\153\x65\x79"]; E26c8: return "\x70\162\151\x6d\x61\162\171\137\x6b\x65\x79\x5f\x69\x64"; } private function _get_table_columns() { $table_details = []; $reference_tables = implode("\x27\x2c\47", $this->reference_tables); $sql = "\123\x45\114\x45\103\124\x20" . "\140\x54\x41\102\114\x45\x5f\116\101\115\x45\x60\40\x61\163\40\140\x74\x61\142\x6c\145\x60\54" . "\140\x43\x4f\x4c\x55\x4d\116\x5f\116\x41\115\105\x60\x20\x61\x73\x20\140\156\x61\x6d\x65\140\54" . "\x60\x49\x53\x5f\x4e\125\114\114\101\102\x4c\105\140\x20\x61\x73\40\x60\156\x75\x6c\154\x60\54" . "\140\x43\x4f\x4c\125\x4d\116\137\104\105\x46\x41\125\114\x54\x60\40\x61\x73\x20\140\144\x65\x66\x61\x75\154\164\140\x2c" . "\140\104\x41\x54\x41\x5f\124\131\120\105\x60\40\141\x73\40\x60\164\x79\160\x65\140\x2c" . "\x60\x43\117\114\x55\115\116\x5f\124\x59\x50\x45\x60\40\141\x73\40\x60\143\x6f\155\x70\x6c\x65\x74\x65\137\164\x79\x70\x65\140\54" . "\x60\x43\x48\x41\x52\x41\103\x54\105\x52\137\115\x41\x58\x49\x4d\x55\x4d\x5f\x4c\x45\116\107\124\110\x60\40\141\x73\x20\x60\155\141\170\x60\x2c" . "\140\103\117\114\125\x4d\x4e\x5f\x4b\x45\x59\140\x20\x61\163\x20\x60\x6b\x65\x79\x60\x2c" . "\140\x45\130\x54\122\101\140\x20\141\163\x20\140\145\170\164\162\141\x60" . "\40\106\x52\117\x4d\x20\x49\116\106\117\122\115\101\124\x49\117\x4e\x5f\x53\x43\110\x45\115\101\56\103\x4f\114\x55\x4d\x4e\x53" . "\40\x57\110\x45\122\105\40\x54\x41\x42\x4c\x45\137\x4e\x41\x4d\105\x20\x49\x4e\40\x28\x27{$reference_tables}\47\x29" . "\x20\x41\116\104\x20\x54\x41\x42\x4c\x45\137\x53\x43\110\105\115\101\x20\75\x20\x3f"; $stmt = $this->mysqli->prepare($sql); $stmt->bind_param("\x73", $this->database); $stmt->execute(); $result = $stmt->get_result(); $columns = $result->fetch_all(MYSQLI_ASSOC); $result->free_result(); $stmt->close(); foreach ($columns as $column) { $table_name = preg_replace("\57" . $this->db_prefix . "\x2f", '', $column["\x74\141\x62\154\x65"], 1); $column_name = $column["\x6e\x61\155\x65"]; $new_column = ["\x6e\141\x6d\145" => $column_name, "\x74\x79\160\x65" => $column["\164\x79\x70\x65"], "\x63\157\155\160\x6c\145\x74\x65\137\x74\171\x70\145" => $column["\x63\157\x6d\160\x6c\145\x74\145\137\x74\x79\x70\x65"], "\x64\x65\x66\x61\165\154\164" => $column["\144\x65\146\141\x75\154\x74"], "\156\x75\154\x6c" => $column["\x6e\x75\154\154"] == "\116\x4f" ? TRUE : FALSE, "\155\x61\170" => $column["\x6d\141\170"], "\153\145\x79" => $column["\153\x65\x79"], "\141\x75\164\x6f\137\151\x6e\143\162\x65\x6d\x65\156\x74" => $column["\x65\x78\x74\162\x61"] == "\x61\x75\x74\157\x5f\x69\156\143\162\x65\x6d\145\156\x74" ? TRUE : FALSE]; if (!($column["\x6b\145\x79"] == "\x50\122\111")) { goto a9b21; } $table_details[$table_name]["\160\x72\x69\155\141\x72\171\137\153\x65\171"] = $column_name; a9b21: $table_details[$table_name]["\x63\x6f\x6c\165\155\x6e\163"][$column_name] = $new_column; D3fe5: } Ab77b: $this->table_columns = $table_details; return $table_details; } private function _get_table_keys() { $related_tables = []; $reference_tables = implode("\x27\x2c\x27", $this->reference_tables); $sql = "\x53\105\x4c\105\x43\x54\40" . "\x60\x52\x45\x46\x45\x52\x45\x4e\103\x45\104\137\124\x41\x42\x4c\x45\137\x4e\x41\x4d\x45\140\40\141\x73\40\x60\x74\141\142\x6c\145\140\54" . "\140\x52\x45\106\105\x52\105\116\x43\105\x44\137\103\117\114\x55\115\116\x5f\x4e\x41\115\105\x60\x20\x61\x73\40\x60\x72\x65\x66\x65\162\x65\x6e\143\x69\156\x67\x5f\153\x65\171\x60\54" . "\x60\103\117\x4c\x55\115\x4e\x5f\116\x41\x4d\105\x60\x20\x61\163\x20\x60\x72\145\x66\145\x72\x65\x6e\x63\x65\144\137\153\145\x79\140\x2c" . "\x60\103\x4f\116\123\124\x52\x41\x49\116\x54\137\x4e\x41\115\x45\140\40\x61\163\x20\140\x63\157\156\x73\164\162\141\x69\156\164\140\x2c" . "\x60\124\101\x42\x4c\105\x5f\116\x41\115\x45\x60\40\x61\x73\x20\x60\x72\145\x66\145\x72\x65\x6e\143\x65\x5f\x74\x61\x62\x6c\145\x60\54" . "\x27\151\156\x76\145\162\x73\145\137\x72\x65\154\141\x74\151\157\156\47\40\141\x73\40\x60\x74\x79\160\145\x60" . "\40\106\x52\x4f\x4d\40\x49\116\x46\x4f\122\115\101\x54\x49\117\116\x5f\x53\x43\x48\x45\115\101\x2e\113\105\x59\x5f\103\x4f\114\x55\115\x4e\x5f\125\123\x41\x47\x45" . "\40\127\x48\x45\x52\105\x20\122\x45\106\105\122\105\x4e\103\105\x44\137\124\x41\102\x4c\105\x5f\116\x41\x4d\105\x20\x49\x4e\40\x28\x27{$reference_tables}\47\x29" . "\40\x41\116\104\x20\x54\101\x42\114\105\x5f\123\x43\x48\105\115\101\x20\75\x20\77" . "\40\125\116\111\x4f\x4e\x20\x41\x4c\114\40" . "\x20\123\x45\114\x45\x43\x54\40" . "\x60\x54\x41\x42\x4c\105\137\x4e\101\x4d\x45\140\x20\x61\x73\40\140\164\141\142\154\x65\x60\54" . "\x60\x43\117\114\x55\115\116\137\x4e\101\x4d\x45\140\40\141\163\40\x60\x72\x65\146\145\x72\x65\156\143\x69\x6e\x67\x5f\x6b\145\x79\140\x2c" . "\x60\122\x45\106\x45\122\x45\116\103\105\x44\x5f\x43\x4f\114\125\115\116\137\116\x41\x4d\105\x60\40\x61\163\x20\x60\162\145\146\x65\x72\x65\156\143\x65\x64\137\153\145\x79\x60\x2c" . "\140\103\x4f\x4e\123\124\x52\x41\x49\x4e\x54\137\x4e\x41\115\105\140\40\x61\163\x20\140\x63\x6f\x6e\x73\164\x72\141\151\156\164\x60\x2c" . "\x60\122\x45\x46\x45\122\x45\x4e\x43\x45\x44\x5f\x54\101\102\x4c\105\x5f\x4e\101\115\x45\140\40\x61\163\x20\140\162\x65\x66\x65\162\x65\156\x63\x65\137\x74\141\x62\154\145\140\54" . "\47\x66\157\162\145\x69\147\156\x5f\x6b\145\x79\47\40\141\163\x20\140\164\171\160\x65\x60" . "\x20\106\x52\117\x4d\x20\x49\x4e\106\117\x52\x4d\101\x54\111\117\116\x5f\123\103\x48\x45\x4d\101\x2e\113\x45\131\137\103\117\x4c\x55\x4d\x4e\x5f\x55\123\x41\x47\105" . "\40\x57\x48\105\122\x45\40\x54\101\x42\x4c\x45\137\116\101\115\x45\x20\x49\x4e\x20\50\47{$reference_tables}\x27\x29" . "\x20\101\x4e\x44\40\x54\101\102\114\x45\137\x53\x43\x48\x45\x4d\101\40\75\40\x3f"; $stmt = $this->mysqli->prepare($sql); $stmt->bind_param("\x73\x73", $this->database, $this->database); $stmt->execute(); $result = $stmt->get_result(); $keys = $result->fetch_all(MYSQLI_ASSOC); $result->free_result(); $stmt->close(); foreach ($keys as $k) { $table_name = preg_replace("\57" . $this->db_prefix . "\x2f", '', $k["\164\x61\x62\x6c\145"], 1); $reference_table = !empty($k["\162\145\x66\145\162\x65\156\143\145\137\164\x61\x62\x6c\145"]) ? preg_replace("\57" . $this->db_prefix . "\57", '', $k["\162\145\146\x65\162\145\x6e\143\145\x5f\x74\141\x62\154\145"], 1) : $k["\162\145\x66\145\x72\x65\x6e\x63\x65\x5f\x74\x61\x62\x6c\145"]; $new_key = ["\162\145\x66\x65\x72\145\156\x63\145\144\137\153\145\x79" => $k["\x72\145\146\x65\162\x65\x6e\x63\x65\144\137\x6b\145\171"], "\x72\145\x66\x65\x72\x65\x6e\143\x69\x6e\147\x5f\x6b\x65\x79" => $k["\x72\145\x66\145\162\145\156\143\x69\x6e\x67\x5f\x6b\x65\171"], "\162\145\x66\x65\x72\145\x6e\x63\x65\x5f\164\x61\142\154\x65" => $reference_table, "\x74\171\160\145" => $k["\x74\x79\160\145"]]; $inverse_type = $k["\x74\171\x70\145"] == "\x66\x6f\x72\x65\x69\x67\x6e\x5f\153\145\x79" ? "\151\x6e\166\145\x72\x73\x65\137\x72\145\x6c\141\164\151\x6f\x6e" : "\x66\x6f\x72\145\x69\147\156\137\x6b\145\171"; $inverse_relation = ["\x72\x65\146\x65\x72\x65\156\143\x65\144\x5f\153\145\171" => $k["\162\x65\x66\145\162\145\x6e\x63\x69\x6e\147\x5f\153\x65\171"], "\162\x65\146\145\x72\145\x6e\143\x69\x6e\x67\x5f\153\145\x79" => $k["\x72\145\x66\x65\x72\145\156\x63\145\144\137\x6b\x65\171"], "\x72\145\146\145\162\145\156\143\145\x5f\x74\141\x62\x6c\x65" => $table_name, "\164\x79\x70\x65" => $inverse_type]; if (empty($k["\x72\145\146\145\x72\x65\156\143\x65\x5f\x74\141\142\x6c\145"])) { goto bbbdf; } $related_tables[$table_name][$reference_table][$k["\162\x65\x66\x65\162\x65\156\143\x69\x6e\147\x5f\x6b\145\x79"]] = $new_key; $related_tables[$reference_table][$table_name][$k["\162\x65\x66\145\x72\145\x6e\x63\145\144\137\x6b\145\171"]] = $inverse_relation; bbbdf: Aaef1: } Da8b4: $this->table_keys = $related_tables; return $related_tables; } private function _add_reference_table($table, &$reference, $records, $callback, $pivot_callback, $new, $delete, $options) { $tables_with_columns = explode("\56", $table); $renames = !empty($options["\x72\145\x6e\x61\x6d\x65"]) ? explode("\x2e", $options["\x72\x65\156\x61\x6d\x65"]) : []; $i = 0; C7621: if (!($i < count($tables_with_columns))) { goto dd2aa; } $last_index = count($tables_with_columns) - 1; $tables = explode("\72", $tables_with_columns[$i]); $table_name = $this->change_case($tables[0], $this->db_table_case); $table_columns = !empty($tables[1]) ? explode("\x2c", $tables[1]) : []; $rename = !empty($renames[$i]) ? $renames[$i] : $table_name; if (in_array($table_name, $this->reference_tables)) { goto f3196; } $this->reference_tables[] = $this->db_prefix . $table_name; f3196: $referencing_key = $i == $last_index && !empty($options["\162\145\x66\x65\162\145\x6e\143\x69\156\147\x5f\x6b\145\x79"]) ? $this->change_case($options["\x72\145\146\x65\162\x65\x6e\x63\x69\x6e\147\137\153\x65\x79"], $this->db_column_case) : NULL; $referenced_key = $i == $last_index && !empty($options["\162\145\146\145\x72\x65\156\x63\145\x64\x5f\153\x65\x79"]) ? $this->change_case($options["\162\x65\x66\145\x72\145\156\x63\145\144\137\153\145\171"], $this->db_column_case) : NULL; $table_callback = $i == $last_index && is_callable($callback) ? $callback : NULL; $pivot_callback = $i == $last_index && is_callable($pivot_callback) ? $pivot_callback : NULL; $pivot_table = $i == $last_index && !empty($options["\160\x69\166\x6f\x74\x5f\164\141\142\x6c\145"]) ? $this->change_case($options["\160\151\166\x6f\164\x5f\164\141\142\x6c\x65"], $this->db_table_case) : NULL; $pivot_referencing_key = $i == $last_index && !empty($options["\160\151\166\157\x74\x5f\x72\x65\146\145\162\x65\156\143\151\x6e\147\137\153\145\171"]) ? $this->change_case($options["\160\x69\x76\x6f\164\137\162\x65\x66\145\162\145\x6e\x63\x69\x6e\147\x5f\x6b\145\x79"], $this->db_column_case) : NULL; $pivot_referenced_key = $i == $last_index && !empty($options["\x70\x69\x76\157\164\x5f\162\x65\146\145\162\x65\156\143\x65\144\x5f\x6b\145\171"]) ? $this->change_case($options["\x70\151\x76\x6f\x74\x5f\x72\x65\x66\145\162\145\156\143\x65\144\x5f\x6b\x65\x79"], $this->db_column_case) : NULL; if (!(is_array($new) && !empty($new[0]))) { goto a5915; } $new = empty($new[$i]) ? $new[0] : $new[$i]; a5915: if (!($i == 0)) { goto d1756; } if (!empty($reference[$rename])) { goto C791d; } $reference[$rename] = ["\x74\x61\x62\x6c\145" => $table_name, "\x72\145\154\x61\164\145\144\x5f\x74\141\142\x6c\145" => $this->table, "\x63\157\154\165\155\156\163" => $table_columns, "\x72\x65\146\x65\x72\x65\156\x63\151\x6e\147\137\x6b\x65\171" => $referencing_key, "\162\x65\146\145\162\145\156\143\x65\144\137\153\145\x79" => $referenced_key, "\x70\x69\166\x6f\x74\x5f\x74\141\x62\x6c\x65" => $pivot_table, "\160\151\x76\x6f\x74\x5f\x72\x65\146\x65\x72\145\156\x63\151\156\147\x5f\x6b\x65\x79" => $pivot_referencing_key, "\160\x69\166\157\x74\137\x72\145\x66\145\162\145\x6e\x63\x65\144\137\153\x65\171" => $pivot_referenced_key, "\x63\x61\x6c\x6c\x62\141\x63\x6b" => $table_callback, "\x70\151\x76\x6f\164\x5f\x63\x61\x6c\x6c\142\141\143\153" => $pivot_callback, "\x72\145\x63\x6f\x72\x64\x73" => $records, "\156\145\167" => $new, "\144\145\x6c\x65\x74\145" => $delete]; $cursor =& $reference[$rename]; goto D37cf; C791d: $cursor =& $reference[$rename]; D37cf: d1756: if (!($i > 0)) { goto adf3a; } if (!empty($cursor["\162\145\x6c\141\x74\x65\144\x5f\x74\x61\x62\154\x65\163"][$rename])) { goto f83b1; } $cursor["\162\x65\154\141\164\145\144\x5f\164\141\x62\x6c\145\163"][$rename] = ["\x74\x61\x62\x6c\x65" => $table_name, "\x72\145\x6c\x61\x74\145\x64\x5f\164\141\x62\x6c\x65" => $cursor["\164\141\x62\x6c\x65"], "\x63\x6f\154\165\x6d\x6e\163" => $table_columns, "\162\x65\x66\145\162\x65\156\143\x69\156\x67\137\153\145\171" => $referencing_key, "\x72\145\146\x65\x72\x65\156\x63\145\x64\137\153\145\171" => $referenced_key, "\143\x61\x6c\x6c\x62\141\x63\x6b" => $table_callback, "\160\151\166\157\164\x5f\x63\141\x6c\x6c\142\141\x63\153" => $pivot_callback, "\x6e\x65\167" => $new, "\x64\x65\154\145\164\145" => $delete]; $cursor =& $cursor["\162\145\x6c\x61\x74\145\144\137\x74\x61\142\x6c\145\163"][$rename]; goto A1963; f83b1: $cursor =& $cursor["\x72\145\154\141\164\x65\144\x5f\164\141\142\x6c\x65\x73"][$rename]; A1963: adf3a: b4a5b: $i++; goto C7621; dd2aa: } private function _add_attach_detach_table(&$reference_table, $table, $records, $delete = FALSE, $options = array()) { $table = $this->change_case($table, $this->db_table_case); $type = "\x69\156\164\x65\147\x65\x72"; if (!is_array($records)) { goto A6e17; } $type = array_keys($records) !== range(0, count($records) - 1) ? "\141\163\x73\157\143\x69\x61\x74\151\x76\x65" : "\x73\145\x71\165\x65\156\164\151\x61\x6c"; A6e17: $new_records = []; if (!($type == "\x61\163\x73\x6f\x63\x69\x61\164\151\x76\x65")) { goto c01ca; } foreach ($records as $key => $record) { is_array($record) ? $new_records[$key] = $record : ($new_records[$record] = []); B1848: } Fa0f5: c01ca: switch ($type) { case "\151\x6e\164\145\x67\x65\162": $ids = [$records]; goto f0487; case "\163\145\161\x75\145\x6e\164\x69\141\154": $ids = $records; goto f0487; case "\x61\163\163\157\x63\151\x61\164\x69\166\x65": $ids = array_keys($new_records); goto f0487; default: $ids = []; } Ebe12: f0487: $attach_table = ["\164\141\x62\x6c\145" => $table, "\x72\x65\156\x61\155\145" => !empty($options["\x72\x65\x6e\141\155\145"]) ? $options["\162\x65\x6e\x61\x6d\145"] : $table, "\151\x64\137\x74\171\x70\145" => $type, "\x69\144\163" => $ids, "\x72\145\143\157\x72\144\x73" => $type == "\141\x73\x73\x6f\143\x69\141\x74\x69\x76\x65" ? $new_records : $records, "\x64\x65\154\145\164\145" => $delete, "\162\x65\x66\x65\x72\x65\156\143\151\x6e\147\x5f\153\x65\171" => !empty($options["\x72\145\x66\145\x72\x65\x6e\x63\x69\156\147\137\153\145\171"]) ? $this->change_case($options["\x72\x65\146\145\162\145\x6e\x63\151\156\x67\x5f\153\x65\171"], $this->db_column_case) : NULL, "\162\x65\x66\145\x72\x65\156\x63\x65\x64\x5f\x6b\145\x79" => !empty($options["\162\x65\146\145\162\x65\x6e\143\145\144\x5f\x6b\x65\x79"]) ? $this->change_case($options["\x72\145\146\x65\162\x65\156\143\x65\144\x5f\x6b\145\171"], $this->db_column_case) : NULL, "\160\151\x76\157\164\137\x74\141\x62\x6c\145" => !empty($options["\160\x69\x76\157\x74\x5f\164\x61\x62\x6c\x65"]) ? $this->change_case($options["\160\151\166\157\164\137\164\141\x62\154\x65"], $this->db_table_case) : NULL, "\160\151\x76\x6f\x74\137\162\x65\x66\x65\x72\x65\156\143\151\x6e\x67\137\x6b\145\x79" => !empty($options["\160\151\x76\157\x74\x5f\x72\145\x66\x65\x72\145\x6e\x63\151\x6e\x67\137\153\145\x79"]) ? $this->change_case($options["\x70\151\166\157\164\137\x72\145\146\145\162\x65\x6e\143\x69\156\x67\x5f\x6b\145\x79"], $this->db_column_case) : NULL, "\160\151\x76\157\x74\137\162\145\146\145\162\x65\156\x63\145\144\x5f\x6b\x65\x79" => !empty($options["\x70\x69\x76\157\x74\137\x72\145\x66\145\162\x65\x6e\143\x65\144\x5f\153\x65\x79"]) ? $this->change_case($options["\160\x69\x76\157\x74\137\162\145\x66\145\x72\145\156\x63\x65\x64\137\153\x65\x79"], $this->db_column_case) : NULL]; $this->reference_tables[] = $this->db_prefix . $table; if (empty($options["\160\151\166\x6f\x74\x5f\164\141\x62\154\x65"])) { goto eeb34; } $pivot_table = $this->change_case($options["\160\x69\166\157\x74\137\x74\x61\x62\154\x65"], $this->db_table_case); $this->reference_tables[] = $this->db_prefix . $pivot_table; eeb34: $reference_table[] = $attach_table; } public function change_case($str, $case = "\150\x75\155\x61\156") { switch ($case) { case "\150\x75\x6d\141\156": $str_space = preg_replace("\57\x28\134\167\x2b\51\50\x5b\x41\55\132\135\x29\x2f\125", "\x5c\61\40\x5c\x32", $str); $str_dash = str_replace("\x2d", "\40", $str_space); $str_readable = str_replace("\137", "\40", $str_dash); return $str_readable; case "\150\x75\155\141\x6e\137\154\x6f\167\145\x72": $str_space = preg_replace("\57\50\x5c\x77\53\x29\x28\x5b\101\x2d\132\x5d\51\57\x55", "\x5c\61\x20\x5c\x32", $str); $str_dash = str_replace("\x2d", "\x20", $str_space); $str_readable = str_replace("\137", "\40", $str_dash); return strtolower($str_readable); case "\150\x75\155\x61\156\x5f\143\141\160\x69\x74\x61\x6c": $str_space = preg_replace("\x2f\x28\x5c\x77\x2b\51\50\x5b\x41\x2d\x5a\135\51\x2f\x55", "\134\61\40\x5c\x32", $str); $str_dash = str_replace("\55", "\40", $str_space); $str_readable = str_replace("\x5f", "\x20", $str_dash); return ucwords($str_readable); case "\163\156\x61\x6b\x65": $str_clean = preg_replace("\57\133\55\x5f\x5d\53\57", "\x20", $str); $str_space = preg_replace("\57\50\134\x77\x2b\51\x28\x5b\101\55\132\x5d\x29\x2f\x55", "\x5c\x31\40\134\x32", $str_clean); $string_lower = strtolower($str_space); $str_snake = str_replace("\40", "\x5f", $string_lower); return $str_snake; case "\165\x6e\144\145\x72\163\x63\x6f\x72\x65": $str_clean = preg_replace("\57\133\55\137\135\x2b\x2f", "\40", $str); $str_space = preg_replace("\x2f\50\x5c\x77\x2b\x29\50\133\101\55\132\135\x29\57\x55", "\134\x31\x20\134\62", $str_clean); $string_lower = strtolower($str_space); $str_snake = str_replace("\40", "\x5f", $string_lower); return $str_snake; case "\144\x61\x73\150": $str_clean = preg_replace("\57\x5b\x2d\x5f\135\x2b\57", "\x20", $str); $str_space = preg_replace("\x2f\x28\134\167\x2b\51\50\133\101\x2d\132\135\x29\57\x55", "\134\x31\x20\134\62", $str_clean); $string_lower = strtolower($str_space); $str_dash = str_replace("\40", "\x2d", $string_lower); return $str_dash; case "\x63\x61\x6d\x65\154": $str_dash = str_replace("\55", "\x20", $str); $str_space = str_replace("\x5f", "\x20", $str_dash); $str_upper = ucwords($str_space); $str_no_space = str_replace("\x20", '', $str_upper); $str_camel = lcfirst($str_no_space); return $str_camel; case "\160\x61\x73\143\x61\x6c": $str_dash = str_replace("\55", "\x20", $str); $str_space = str_replace("\x5f", "\40", $str_dash); $str_upper = ucwords($str_space); $str_pascal = str_replace("\x20", '', $str_upper); return $str_pascal; default: return $str; } Bc486: d7c47: } public function change_array_case($arr, $case = "\155\x69\x78\145\144") { $array = array(); foreach ($arr as $key => $value) { $array[$key] = $this->change_case($value, $case); a2df9: } C53e0: return $array; } public function recursive_change_array_case($arr, $case = "\155\x69\x78\145\x64") { $array = array(); foreach ($arr as $key => $value) { if (is_array($value)) { goto cea66; } $array[$key] = $this->change_case($value, $case); goto Cd23d; cea66: $array[$key] = $this->recursive_change_array_case($value, $case); Cd23d: aff4e: } eaec9: return $array; } public function change_array_keys_case($assoc, $case = "\x6d\x69\170\145\144") { $array = array(); foreach ($assoc as $key => $value) { $array[$this->change_case($key, $case)] = $value; bf941: } dbf4b: return $array; } public function recursive_change_array_keys_case($assoc, $case = "\x6d\151\170\145\x64") { $array = array(); foreach ($assoc as $key => $value) { if (is_array($value)) { goto be608; } $array[$this->change_case($key, $case)] = $value; goto D282f; be608: $array[$this->change_case($key, $case)] = $this->recursive_change_array_keys_case($value, $case); D282f: fac24: } B07ae: return $array; } private function _get_reference_keys($base_table, $related_table, $pivot_table = NULL, $referencing_key = NULL, $referenced_key = NULL, $pivot_referencing_key = NULL, $pivot_referenced_key = NULL) { $keys = ["\x74\x61\142\154\145" => !empty($base_table) ? $this->change_case($base_table, $this->db_table_case) : $base_table, "\x72\145\x6c\141\164\145\x64\x5f\x74\x61\142\x6c\x65" => !empty($related_table) ? $this->change_case($related_table, $this->db_table_case) : $related_table, "\162\x65\146\x65\x72\x65\156\143\151\x6e\147\x5f\x6b\x65\x79" => !empty($referencing_key) ? $this->change_case($referencing_key, $this->db_column_case) : $referencing_key, "\x72\x65\x66\145\x72\x65\156\x63\x65\x64\x5f\153\145\x79" => !empty($referenced_key) ? $this->change_case($referenced_key, $this->db_column_case) : $referenced_key, "\160\151\x76\157\164\137\x74\141\142\x6c\145" => !empty($pivot_table) ? $this->change_case($pivot_table, $this->db_table_case) : $pivot_table, "\x70\151\166\157\164\137\x72\x65\146\x65\x72\x65\156\143\x69\x6e\147\x5f\x6b\x65\171" => !empty($pivot_referencing_key) ? $this->change_case($pivot_referencing_key, $this->db_column_case) : $pivot_referencing_key, "\x70\151\x76\x6f\164\137\162\x65\146\x65\x72\145\x6e\x63\145\x64\137\x6b\x65\x79" => !empty($pivot_referenced_key) ? $this->change_case($pivot_referenced_key, $this->db_column_case) : $pivot_referenced_key, "\164\x79\x70\x65" => "\156\157\137\162\x65\x6c\141\x74\x69\157\x6e"]; $fc_table_config = $this->recursive_change_array_keys_case($this->table_config, $this->case); $fc_base_table = $this->change_case($base_table, $this->case); $fc_related_table = $this->change_case($related_table, $this->case); $fc_related_tables_word = $this->change_case("\x72\145\x6c\x61\x74\x65\x64\x5f\164\x61\x62\x6c\x65\163", $this->case); $fc_table_word = $this->change_case("\x74\x61\142\154\145", $this->case); $fc_referencing_key_word = $this->change_case("\x72\145\x66\145\162\x65\x6e\143\x69\156\x67\x5f\153\145\x79", $this->case); $fc_referenced_key_word = $this->change_case("\162\x65\146\x65\x72\x65\156\x63\145\x64\137\x6b\x65\171", $this->case); $fc_pivot_table_word = $this->change_case("\x70\x69\x76\157\x74\137\x74\141\142\x6c\145", $this->case); $fc_pivot_referencing_key_word = $this->change_case("\x70\x69\x76\x6f\164\x5f\x72\x65\x66\x65\162\x65\x6e\143\151\156\147\137\153\x65\171", $this->case); $fc_pivot_referenced_key_word = $this->change_case("\160\x69\x76\x6f\164\x5f\162\145\x66\x65\x72\145\156\x63\145\x64\137\x6b\145\171", $this->case); if (empty($fc_table_config[$fc_base_table][$fc_related_tables_word][$fc_related_table])) { goto Ca736; } $crt = $fc_table_config[$fc_base_table][$fc_related_tables_word][$fc_related_table]; if (empty($crt[$fc_table_word])) { goto fab53; } $keys["\162\x65\154\x61\164\145\144\x5f\x74\x61\142\154\145"] = $this->change_case($crt[$fc_table_word], $this->db_table_case); fab53: if (!(empty($referencing_key) && !empty($crt[$fc_referencing_key_word]))) { goto a36c0; } $keys["\x72\145\146\x65\x72\145\x6e\143\151\156\x67\137\x6b\x65\x79"] = empty($referencing_key) ? $this->change_case($crt[$fc_referencing_key_word], $this->db_column_case) : $keys["\162\x65\x66\x65\x72\145\x6e\x63\151\156\x67\137\x6b\x65\x79"]; a36c0: if (!(empty($referenced_key) && !empty($crt[$fc_referenced_key_word]))) { goto cf24a; } $keys["\162\145\x66\x65\x72\145\156\x63\145\x64\137\x6b\145\171"] = empty($referenced_key) ? $this->change_case($crt[$fc_referenced_key_word], $this->db_column_case) : $keys["\x72\145\x66\x65\162\x65\x6e\x63\x65\x64\x5f\x6b\x65\x79"]; cf24a: if (!(empty($pivot_table) && !empty($crt[$fc_pivot_table_word]))) { goto f01a5; } $keys["\x70\x69\166\157\x74\137\164\141\142\x6c\145"] = empty($pivot_table) ? $this->change_case($crt[$fc_pivot_table_word], $this->db_table_case) : $keys["\160\151\x76\157\x74\x5f\164\x61\142\154\145"]; f01a5: if (!(empty($pivot_referencing_key) && !empty($crt[$fc_pivot_referencing_key_word]))) { goto eade6; } $keys["\160\x69\166\157\x74\137\x72\145\146\x65\162\145\156\x63\151\x6e\x67\137\x6b\x65\x79"] = empty($pivot_referencing_key) ? $this->change_case($crt[$fc_pivot_referencing_key_word], $this->db_column_case) : $keys["\160\x69\166\157\x74\x5f\162\x65\146\145\162\145\x6e\143\151\x6e\147\x5f\153\x65\171"]; eade6: if (!(empty($pivot_referenced_key) && !empty($crt[$fc_pivot_referenced_key_word]))) { goto ce048; } $keys["\x70\x69\166\x6f\x74\x5f\x72\145\x66\145\162\145\156\143\145\144\x5f\x6b\145\171"] = empty($pivot_referenced_key) ? $this->change_case($crt[$fc_pivot_referenced_key_word], $this->db_column_case) : $keys["\x70\x69\x76\x6f\x74\137\x72\x65\x66\x65\162\x65\156\x63\145\x64\x5f\153\145\x79"]; ce048: Ca736: if (empty($fc_table_config[$fc_related_table][$fc_related_tables_word][$fc_base_table])) { goto F2a0e; } $crt = $fc_table_config[$fc_related_table][$fc_related_tables_word][$fc_base_table]; $keys["\x74\x61\x62\x6c\145"] = $this->change_case($crt[$fc_table_word], $this->db_table_case); $keys["\x72\145\154\141\x74\x65\x64\x5f\164\141\x62\154\x65"] = $this->change_case($related_table, $this->db_table_case); if (!(empty($referencing_key) && !empty($crt[$fc_referencing_key_word]))) { goto a49c6; } $keys["\162\x65\x66\145\162\145\x6e\143\151\x6e\147\137\x6b\x65\171"] = empty($referencing_key) ? $this->change_case($crt[$fc_referencing_key_word], $this->db_column_case) : $keys["\x72\x65\146\x65\x72\x65\156\143\x69\156\x67\x5f\153\145\171"]; a49c6: if (!(empty($referenced_key) && !empty($crt[$fc_referenced_key_word]))) { goto ccef9; } $keys["\x72\x65\x66\x65\162\x65\x6e\x63\145\144\x5f\x6b\145\x79"] = empty($referenced_key) ? $this->change_case($crt[$fc_referenced_key_word], $this->db_column_case) : $keys["\162\145\146\x65\x72\x65\x6e\x63\145\144\x5f\x6b\145\171"]; ccef9: if (!(empty($pivot_table) && !empty($crt[$fc_pivot_table_word]))) { goto F025e; } $keys["\160\151\x76\x6f\x74\137\164\x61\x62\x6c\x65"] = empty($pivot_table) ? $this->change_case($crt[$fc_pivot_table_word], $this->db_table_case) : $keys["\160\151\x76\157\x74\x5f\x74\141\x62\x6c\x65"]; F025e: if (!(empty($pivot_referencing_key) && !empty($crt[$fc_pivot_referencing_key_word]))) { goto Ce953; } $keys["\x70\151\x76\157\164\x5f\x72\145\x66\145\x72\x65\156\x63\151\156\147\137\153\x65\171"] = empty($pivot_referencing_key) ? $this->change_case($crt[$fc_pivot_referencing_key_word], $this->db_column_case) : $keys["\x70\151\166\x6f\x74\x5f\162\145\146\145\x72\145\x6e\143\151\156\x67\137\153\145\171"]; Ce953: if (!(empty($pivot_referenced_key) && !empty($crt[$fc_pivot_referenced_key_word]))) { goto adf9a; } $keys["\160\151\x76\157\x74\137\x72\x65\x66\145\162\x65\x6e\x63\145\144\137\153\145\x79"] = empty($pivot_referenced_key) ? $this->change_case($crt[$fc_pivot_referenced_key_word], $this->db_column_case) : $keys["\160\x69\166\157\x74\x5f\162\145\146\145\162\x65\x6e\x63\145\x64\x5f\x6b\x65\x79"]; adf9a: if (empty($this->table_keys[$keys["\164\141\142\154\x65"]][$keys["\162\145\x6c\x61\164\x65\x64\137\164\141\142\154\x65"]])) { goto Aed3c; } foreach ($this->table_keys[$keys["\x74\141\x62\154\x65"]][$keys["\162\x65\154\x61\x74\145\144\137\164\141\x62\x6c\x65"]] as $relation) { if (!($keys["\162\x65\146\x65\x72\145\x6e\143\151\156\x67\x5f\153\x65\x79"] == $this->change_case($relation["\162\145\146\145\162\145\156\143\151\x6e\147\x5f\153\x65\x79"], $this->db_column_case) && $keys["\162\145\x66\145\x72\145\156\x63\145\x64\x5f\x6b\145\x79"] == $this->change_case($relation["\x72\145\146\x65\x72\145\156\x63\145\x64\137\153\145\x79"], $this->db_column_case))) { goto F77df; } $keys["\164\x79\160\145"] = $relation["\x74\x79\160\x65"]; F77df: goto A5275; ec84c: } A5275: Aed3c: F2a0e: if (is_null($pivot_table)) { goto c9f42; } $pivot_table = $this->change_case($pivot_table, $this->db_table_case); $this->reference_tables[] = $this->db_prefix . $pivot_table; $this->_get_table_keys(); $reference_keys = $this->_get_reference_keys($pivot_table, $related_table); $pivot_reference_keys = $this->_get_reference_keys($pivot_table, $base_table); $keys["\x72\x65\x66\x65\162\x65\156\143\x69\156\147\x5f\x6b\x65\x79"] = empty($keys["\x72\145\x66\145\x72\145\x6e\143\x69\x6e\x67\x5f\x6b\x65\x79"]) ? $reference_keys["\x72\x65\x66\145\x72\x65\156\143\151\x6e\147\137\x6b\x65\171"] : $keys["\x72\x65\146\145\x72\x65\x6e\x63\x69\156\x67\137\153\x65\x79"]; $keys["\162\x65\146\x65\162\x65\x6e\x63\x65\144\137\153\x65\x79"] = empty($keys["\162\x65\x66\145\162\x65\x6e\x63\x65\x64\x5f\x6b\145\x79"]) ? $reference_keys["\162\x65\146\145\162\x65\x6e\x63\x65\144\137\x6b\x65\x79"] : $keys["\162\x65\x66\x65\x72\145\156\143\x65\x64\137\153\x65\x79"]; $keys["\160\151\x76\157\164\137\x74\141\142\x6c\145"] = empty($keys["\x70\x69\x76\x6f\x74\x5f\164\141\142\154\x65"]) ? $pivot_table : $keys["\160\x69\166\157\x74\x5f\x74\141\x62\154\145"]; $keys["\160\151\166\x6f\164\x5f\162\x65\146\x65\162\145\156\x63\151\156\x67\137\153\145\x79"] = empty($keys["\160\x69\166\157\x74\137\162\x65\x66\145\162\x65\x6e\x63\x69\x6e\147\137\153\x65\x79"]) ? $pivot_reference_keys["\x72\x65\x66\x65\x72\145\x6e\143\x69\156\x67\137\153\x65\x79"] : $keys["\160\x69\166\157\164\137\162\x65\x66\x65\x72\145\x6e\143\151\156\x67\x5f\x6b\145\171"]; $keys["\x70\x69\x76\x6f\164\x5f\x72\145\x66\x65\x72\x65\156\143\x65\x64\137\x6b\x65\171"] = empty($keys["\160\x69\166\157\164\137\x72\145\146\x65\x72\145\156\x63\x65\x64\x5f\153\145\x79"]) ? $pivot_reference_keys["\162\x65\146\145\x72\x65\156\143\145\x64\137\153\145\171"] : $keys["\x70\x69\x76\157\164\x5f\x72\x65\146\x65\162\145\x6e\143\x65\144\x5f\x6b\145\x79"]; $keys["\x74\x79\160\x65"] = "\x6d\141\156\171\137\x74\157\x5f\x6d\x61\156\171"; return $keys; c9f42: if (empty($this->table_keys[$base_table][$keys["\x72\x65\x6c\x61\x74\x65\x64\x5f\164\141\x62\154\x65"]])) { goto c80a9; } if (!(is_null($referencing_key) && is_null($referenced_key))) { goto c02fe; } foreach ($this->table_keys[$base_table][$keys["\162\x65\x6c\141\164\145\144\x5f\x74\141\x62\x6c\x65"]] as $relation) { $keys["\x72\145\146\145\x72\x65\x6e\143\x69\x6e\x67\x5f\x6b\145\171"] = empty($keys["\162\x65\x66\x65\x72\145\156\143\x69\x6e\x67\137\x6b\x65\x79"]) ? $this->change_case($relation["\162\145\x66\x65\162\x65\156\x63\151\x6e\x67\x5f\153\145\x79"], $this->db_column_case) : $keys["\x72\x65\146\145\162\145\156\143\x69\x6e\x67\x5f\153\145\171"]; $keys["\162\145\146\x65\x72\x65\x6e\143\145\144\137\x6b\145\x79"] = empty($keys["\162\x65\x66\x65\x72\145\x6e\143\145\144\137\x6b\x65\171"]) ? $this->change_case($relation["\162\x65\146\x65\162\x65\x6e\143\145\x64\x5f\153\145\x79"], $this->db_column_case) : $keys["\x72\x65\146\145\x72\x65\156\x63\x65\144\x5f\153\x65\x79"]; $keys["\164\x79\x70\x65"] = $relation["\164\x79\160\145"]; goto B0b06; B4c6f: } B0b06: c02fe: if (!(!is_null($referenced_key) && is_null($referencing_key))) { goto Ae3be; } foreach ($this->table_keys[$base_table][$keys["\x72\145\x6c\141\x74\145\x64\137\x74\141\142\154\x65"]] as $relation) { if (!($this->change_case($relation["\162\145\x66\x65\x72\145\x6e\x63\145\x64\137\x6b\x65\171"], $this->db_column_case) == $referenced_key)) { goto b422f; } $keys["\x72\145\x66\x65\162\145\156\143\x69\x6e\147\x5f\x6b\145\171"] = empty($keys["\162\145\x66\145\162\145\x6e\x63\151\x6e\x67\137\153\x65\x79"]) ? $this->change_case($relation["\162\145\x66\x65\162\x65\x6e\x63\x69\156\x67\137\153\145\171"], $this->db_column_case) : $keys["\x72\145\x66\x65\162\145\156\x63\151\x6e\x67\137\153\x65\x79"]; $keys["\x72\145\146\x65\162\x65\156\x63\145\x64\137\153\x65\x79"] = empty($keys["\x72\x65\146\145\162\145\x6e\x63\x65\x64\137\153\145\171"]) ? $this->change_case($relation["\162\x65\146\x65\162\145\156\143\x65\x64\x5f\153\145\x79"], $this->db_column_case) : $keys["\162\145\146\145\162\x65\156\x63\145\144\x5f\153\x65\x79"]; $keys["\x74\x79\x70\x65"] = $relation["\164\171\160\x65"]; goto d138d; b422f: D1a50: } d138d: Ae3be: if (is_null($referencing_key)) { goto c8ea3; } foreach ($this->table_keys[$base_table][$keys["\x72\145\154\141\x74\x65\144\137\164\141\x62\x6c\145"]] as $relation) { if (!($this->change_case($relation["\x72\145\x66\145\x72\145\156\143\151\x6e\x67\137\153\145\x79"], $this->db_column_case) == $referencing_key)) { goto Bd0db; } $keys["\x72\x65\x66\x65\x72\x65\156\143\x69\156\x67\137\153\145\171"] = empty($keys["\x72\x65\x66\x65\x72\145\156\143\x69\156\x67\x5f\153\x65\171"]) ? $this->change_case($relation["\x72\x65\146\x65\x72\x65\x6e\x63\x69\x6e\147\137\153\x65\171"], $this->db_column_case) : $keys["\x72\145\146\x65\162\145\156\x63\151\156\147\x5f\x6b\145\x79"]; $keys["\x72\145\146\x65\x72\145\x6e\x63\145\x64\137\153\x65\x79"] = empty($keys["\162\145\x66\x65\162\x65\x6e\x63\145\144\x5f\153\145\171"]) ? $this->change_case($relation["\162\x65\146\x65\162\x65\156\143\x65\144\x5f\x6b\145\171"], $this->db_column_case) : $keys["\162\x65\x66\x65\x72\145\x6e\x63\145\x64\x5f\153\x65\x79"]; $keys["\x74\171\160\145"] = $relation["\164\x79\160\x65"]; goto Eaf58; Bd0db: F39ca: } Eaf58: c8ea3: if (!(!is_null($referencing_key) && !is_null($referenced_key))) { goto C22b5; } foreach ($this->table_keys[$base_table][$keys["\162\145\154\x61\x74\145\144\x5f\x74\141\142\154\x65"]] as $relation) { if (!($this->change_case($relation["\162\145\146\x65\162\x65\x6e\143\151\x6e\147\137\x6b\145\171"], $this->db_column_case) == $referencing_key && $this->change_case($relation["\162\145\146\x65\162\x65\156\143\x65\144\137\x6b\145\171"], $this->db_column_case) == $referenced_key)) { goto Ad4f3; } $keys["\x74\x79\160\145"] = $relation["\164\x79\160\x65"]; goto a45eb; Ad4f3: ae7e9: } a45eb: C22b5: c80a9: if (!(empty($keys["\162\x65\x66\145\162\145\156\143\151\156\x67\137\153\x65\x79"]) || empty($keys["\x72\x65\146\145\x72\x65\156\x63\x65\x64\137\153\x65\171"]))) { goto Bb3ab; } $the_pivot_table = NULL; if (!(!empty($this->table_keys[$this->table]) && !empty($keys["\x74\x61\x62\x6c\x65"]))) { goto C7b28; } $table_keys = !empty($this->table_keys[$base_table]) ? array_keys($this->table_keys[$base_table]) : []; $keys_keys = !empty($this->table_keys[$related_table]) ? array_keys($this->table_keys[$related_table]) : []; $pivot_tables = array_intersect($table_keys, $keys_keys); foreach ($pivot_tables as $pivot) { $the_pivot_table = $pivot; goto d9957; A22c0: } d9957: C7b28: if (empty($the_pivot_table)) { goto Bdd53; } $the_pivot_table = $this->change_case($the_pivot_table, $this->db_table_case); $this->reference_tables[] = $this->db_prefix . $the_pivot_table; $this->_get_table_keys(); $reference_keys = $this->_get_reference_keys($the_pivot_table, $related_table); $pivot_reference_keys = $this->_get_reference_keys($the_pivot_table, $base_table); $keys["\162\x65\x66\145\162\145\x6e\143\151\x6e\x67\137\153\x65\171"] = empty($keys["\162\145\x66\145\x72\145\156\143\x69\x6e\147\x5f\153\145\171"]) ? $reference_keys["\x72\145\146\145\x72\x65\x6e\x63\151\x6e\x67\137\153\145\x79"] : $keys["\x72\145\x66\x65\x72\145\x6e\143\151\x6e\x67\x5f\x6b\145\171"]; $keys["\162\145\146\x65\x72\x65\x6e\x63\x65\144\x5f\153\145\171"] = empty($keys["\x72\145\x66\x65\162\145\x6e\x63\x65\144\137\x6b\145\x79"]) ? $reference_keys["\162\x65\x66\145\x72\145\156\x63\145\144\137\153\145\171"] : $keys["\x72\x65\x66\145\x72\x65\x6e\143\x65\144\137\x6b\x65\x79"]; $keys["\x70\x69\x76\x6f\x74\x5f\164\141\142\154\x65"] = empty($keys["\x70\151\166\157\x74\137\x74\x61\x62\x6c\145"]) ? $the_pivot_table : $keys["\160\x69\166\157\x74\137\x74\x61\x62\154\145"]; $keys["\160\x69\166\x6f\164\137\x72\x65\x66\145\162\x65\156\143\x69\156\147\137\x6b\145\171"] = empty($keys["\160\151\166\157\x74\137\162\145\x66\x65\162\x65\x6e\143\x69\156\147\137\153\x65\x79"]) ? $pivot_reference_keys["\162\145\146\145\x72\x65\156\x63\151\x6e\x67\137\153\145\171"] : $keys["\160\151\x76\157\x74\137\162\145\x66\145\x72\x65\156\x63\x69\156\147\x5f\x6b\145\x79"]; $keys["\x70\151\x76\157\x74\x5f\x72\x65\146\145\x72\145\x6e\x63\145\144\x5f\153\x65\171"] = empty($keys["\x70\x69\166\x6f\164\137\162\145\146\145\162\x65\156\143\145\144\x5f\153\145\x79"]) ? $pivot_reference_keys["\x72\x65\146\x65\162\145\156\143\x65\x64\x5f\x6b\145\x79"] : $keys["\160\151\x76\x6f\164\x5f\x72\x65\x66\x65\162\145\156\x63\x65\x64\137\x6b\x65\x79"]; $keys["\x74\171\x70\145"] = "\155\x61\x6e\171\137\164\157\x5f\155\x61\x6e\171"; Bdd53: Bb3ab: return $keys; } private function _loop_keys($table) { $old = $table; if (!(empty($table["\162\145\x66\145\x72\x65\156\143\x69\x6e\147\x5f\x6b\145\x79"]) || empty($table["\x72\145\146\x65\x72\145\x6e\x63\145\x64\137\153\145\171"]))) { goto A447b; } $pivot_table = !empty($table["\160\151\x76\x6f\x74\x5f\x74\141\x62\154\x65"]) ? $this->change_case($table["\x70\x69\166\x6f\164\137\164\141\142\154\145"], $this->db_table_case) : NULL; $reference_keys = $this->_get_reference_keys($table["\x74\x61\x62\x6c\x65"], $table["\x72\x65\x6c\141\x74\x65\144\137\x74\141\142\154\145"], $pivot_table, $table["\x72\x65\146\x65\x72\x65\156\x63\151\x6e\x67\x5f\153\145\171"], $table["\x72\x65\146\145\162\145\x6e\x63\x65\x64\x5f\153\x65\x79"], isset($table["\x70\151\x76\x6f\164\137\x72\x65\146\145\x72\145\156\143\151\156\x67\137\x6b\x65\171"]) ? $table["\160\x69\166\x6f\x74\137\162\x65\x66\x65\x72\145\156\143\151\156\147\x5f\x6b\145\171"] : NULL, isset($table["\160\x69\166\157\164\137\162\x65\146\145\x72\145\x6e\x63\145\x64\x5f\x6b\x65\x79"]) ? $table["\160\151\x76\157\164\137\162\x65\x66\x65\x72\x65\x6e\143\x65\144\137\x6b\145\171"] : NULL); $table = array_replace($table, $reference_keys); $this->reference_tables[] = $this->db_prefix . $table["\164\141\x62\154\x65"]; if (empty($table["\160\151\x76\157\164\x5f\164\x61\x62\154\145"])) { goto Ab822; } $this->reference_tables[] = $this->db_prefix . $table["\160\151\166\x6f\x74\x5f\164\141\x62\154\x65"]; Ab822: A447b: if (empty($old["\162\145\146\x65\162\x65\x6e\x63\x69\x6e\147\x5f\153\x65\171"])) { goto e266a; } $table["\x72\x65\x66\145\x72\x65\x6e\143\151\156\147\137\153\145\x79"] = $this->change_case($old["\162\x65\146\145\162\x65\x6e\x63\151\156\147\x5f\x6b\x65\x79"], $this->db_column_case); e266a: if (empty($old["\x72\145\146\x65\162\x65\156\x63\145\x64\137\153\145\x79"])) { goto ff91d; } $table["\x72\145\x66\145\x72\145\156\x63\x65\x64\x5f\x6b\x65\x79"] = $this->change_case($old["\162\x65\146\145\x72\x65\x6e\143\x65\x64\137\153\x65\171"], $this->db_column_case); ff91d: if (empty($old["\x74\171\160\145"])) { goto cf887; } $table["\x74\171\x70\x65"] = $old["\164\171\x70\145"]; cf887: if (empty($old["\x70\x69\x76\x6f\164\137\164\x61\x62\154\145"])) { goto B0356; } $table["\x70\x69\x76\x6f\x74\x5f\164\x61\x62\154\145"] = $this->change_case($old["\x70\x69\x76\157\x74\137\164\x61\142\154\x65"], $this->db_table_case); B0356: if (empty($old["\x70\x69\x76\x6f\x74\x5f\x72\145\x66\x65\x72\145\156\x63\x69\x6e\x67\x5f\153\145\171"])) { goto A237a; } $table["\x70\151\x76\157\x74\137\162\145\146\x65\x72\x65\156\143\x69\x6e\147\x5f\x6b\x65\x79"] = $this->change_case($old["\160\x69\166\x6f\164\x5f\x72\145\x66\x65\x72\x65\x6e\x63\x69\x6e\x67\x5f\153\x65\x79"], $this->db_column_case); A237a: if (empty($old["\160\151\166\x6f\164\x5f\x72\x65\146\145\x72\145\156\x63\x65\144\x5f\153\x65\x79"])) { goto c22f2; } $table["\160\151\166\157\x74\137\x72\145\146\145\162\145\156\x63\x65\x64\137\x6b\x65\x79"] = $this->change_case($old["\x70\x69\x76\157\x74\137\162\x65\x66\145\162\145\156\x63\x65\144\137\153\x65\171"], $this->db_column_case); c22f2: if (empty($table["\162\145\x6c\x61\x74\x65\144\x5f\164\141\142\154\145\x73"])) { goto b6915; } foreach ($table["\162\145\x6c\141\164\145\x64\x5f\x74\141\142\x6c\x65\163"] as $key => $tbl) { $tbl["\162\x65\154\141\164\145\144\x5f\x74\141\x62\x6c\x65"] = $table["\164\x61\x62\154\145"]; $table["\162\145\154\x61\164\145\x64\x5f\x74\141\142\154\x65\x73"][$key] = $this->_loop_keys($tbl); e56f1: } A831a: b6915: return $table; } private function _initialize_validations() { $this->validation_rules = ["\x61\154\x70\x68\141" => static function ($val) { return is_string($val) && preg_match("\57\x5e\50\133\x61\55\172\x5d\x29\x2b\44\x2f\151", $val); }, "\141\x6c\x70\x68\x61\144\x61\163\150" => static function ($val) { return is_string($val) && preg_match("\x2f\136\50\x5b\55\x61\55\172\x30\55\71\x5f\x2d\135\x29\x2b\44\x2f\x69", $val); }, "\141\x6c\x70\150\141\x6e\x75\155" => static function ($val) { return is_string($val) && preg_match("\57\x5e\50\x5b\141\55\172\60\x2d\71\135\x29\x2b\x24\x2f\151", $val); }, "\x61\x72\x72\141\171" => static function ($val) { return $val && is_array($val); }, "\142\x61\163\x65\66\x34" => static function ($val) { return is_string($val) && preg_match("\x2f\133\136\x61\55\x7a\x41\x2d\132\60\55\x39\x5c\57\134\x2b\75\135\x2f"); }, "\142\157\157\154\x65\141\x6e" => static function ($val) { return is_bool($val); }, "\x64\145\143\151\155\141\x6c" => static function ($val) { return is_float($val); }, "\144\x69\146\146\145\x72\x73" => static function ($val, $diff, $values) { $diff = isset($values[$diff]) ? $values[$diff] : $diff; return $val !== $diff; }, "\145\x6d\141\151\x6c" => static function ($val) { return is_string($val) && preg_match("\57\x5e\50\x5b\141\55\x7a\60\x2d\x39\x5c\53\x5f\x5c\55\x5d\x2b\51\x28\x5c\56\x5b\141\55\172\x30\55\x39\x5c\53\137\x5c\x2d\x5d\x2b\51\52\x40\x28\x5b\141\x2d\x7a\x30\55\x39\134\55\135\x2b\134\56\51\53\x5b\141\x2d\x7a\135\x7b\x32\54\66\x7d\44\57\151", $val); }, "\x65\170\x69\163\164" => function ($val, $params) { if (!empty($val)) { goto d38d6; } return FALSE; d38d6: $table = substr($params, 0, strpos($params, "\x2e")); $columns = substr($params, strpos($params, "\56") + 1); $fields = explode("\54", $columns); $sql = sprintf("\x53\x45\x4c\x45\103\x54\x20\52\x20\x46\122\117\115\40\140\x25\x73\140\40\127\x48\x45\x52\105\x20\x60\45\163\140\40\x3d\x20\x27\45\x73\x27", mysqli_real_escape_string($this->mysqli, $table), mysqli_real_escape_string($this->mysqli, $fields[0]), mysqli_real_escape_string($this->mysqli, $val)); if (!(count($fields) > 1)) { goto c9835; } $i = 1; A2af3: if (!($i < count($fields))) { goto Ff9b3; } $sql .= sprintf("\x20\x4f\x52\x20\x60\x25\x73\x60\56\x60\x25\x73\140\40\75\x20\47\45\163\x27", mysqli_real_escape_string($this->mysqli, $table), mysqli_real_escape_string($this->mysqli, $fields[$i]), mysqli_real_escape_string($this->mysqli, $val)); D9990: $i++; goto A2af3; Ff9b3: c9835: $result = $this->mysqli->query($sql); $records = $result->fetch_all(MYSQLI_ASSOC); return !empty($records); }, "\147\x72\x65\x61\x74\145\x72" => static function ($val, $greater) { return $val && $val > $greater; }, "\x69\156\164\x65\x67\x65\162" => static function ($val) { return $val && preg_match("\57\x5e\x5b\x5c\x2d\x2b\x5d\77\x5b\60\55\x39\x5d\53\x24\x2f", $val); }, "\x6c\x65\163\x73\145\162" => static function ($val, $less) { return $val && $val < $less; }, "\x6d\x61\164\143\150\145\163" => static function ($val, $match, $values) { $match = isset($values[$match]) ? $values[$match] : $match; return $val === $match; }, "\155\141\x78" => static function ($val, $max) { return $val && strlen($val) <= $max; }, "\155\151\156" => static function ($val, $min) { return $val && strlen($val) >= $min; }, "\x6e\141\164\165\162\141\x6c" => static function ($val) { return $val && preg_match("\x2f\x5e\x5b\x30\x2d\x39\x5d\53\44\57", $val); }, "\156\x6f\x74" => static function ($val, $not) { $values = explode("\54", $not); return !in_array($val, $values); }, "\x6e\165\155\x62\x65\162" => static function ($val) { return $val && preg_match("\57\x5e\x5b\x5c\55\x2b\135\77\133\60\55\71\x5d\52\x5c\x2e\x3f\x5b\x30\x2d\x39\135\53\44\x2f", $val); }, "\160\150\x6f\156\145" => static function ($val) { return $val && preg_match("\x2f\x5e\134\50\x3f\50\x5b\x30\55\x39\x5d\x7b\x33\x7d\51\134\51\77\x5b\x2d\56\40\x5d\x3f\50\x5b\x30\x2d\71\135\173\63\x7d\x29\133\x2d\x2e\40\x5d\x3f\50\x5b\x30\x2d\x39\135\173\64\175\x29\44\57", $val); }, "\x72\x65\147\145\x78" => static function ($val, $exp) { return is_string($val) && preg_match($exp, $val); }, "\162\x65\x71\x75\151\x72\145\x64" => static function ($val) { return isset($val) && $val !== ''; }, "\165\x6e\x69\161\x75\145" => function ($val, $params) { if (!empty($val)) { goto d0428; } return FALSE; d0428: $table = substr($params, 0, strpos($params, "\56")); $columns = substr($params, strpos($params, "\56") + 1); $fields = explode("\x2c", $columns); $sql = sprintf("\x53\x45\114\105\x43\x54\x20\52\x20\106\x52\x4f\x4d\40\140\x25\163\140\40\127\x48\105\x52\105\40\140\45\163\140\x20\x3d\x20\x27\x25\x73\47", mysqli_real_escape_string($this->mysqli, $table), mysqli_real_escape_string($this->mysqli, $fields[0]), mysqli_real_escape_string($this->mysqli, $val)); if (!(count($fields) > 1)) { goto D05c7; } $sql .= sprintf("\40\x41\x4e\104\40\140\45\163\140\x2e\x60\45\163\140\x20\x3c\76\x20\x27\45\163\x27", mysqli_real_escape_string($this->mysqli, $table), mysqli_real_escape_string($this->mysqli, $fields[0]), mysqli_real_escape_string($this->mysqli, $val)); D05c7: $result = $this->mysqli->query($sql); $records = $result->fetch_all(MYSQLI_ASSOC); return empty($records); }, "\165\x72\x6c" => static function ($val) { return is_string($val) && preg_match("\x2f\136\x28\x3f\x3a\50\x5b\x5e\72\135\52\51\134\x3a\x29\77\134\57\x5c\57\x28\x2e\x2b\x29\44\57", $val); }, "\x69\156" => static function ($val, $arr) { $values = explode("\54", $arr); return in_array($val, $values); }, "\167\151\164\x68" => static function ($val, $withs, $fields = array()) { $required = false; $ws = explode("\54", $withs); $i = 0; f8225: if (!($i < count($ws))) { goto B57e6; } if (!(isset($fields[$ws[$i]]) && $fields[$ws[$i]] !== '')) { goto bc473; } $required = true; bc473: e6312: $i++; goto f8225; B57e6: return $required ? isset($val) && $val !== '' : true; }, "\167\151\x74\150\x6f\x75\164" => static function ($val, $withouts, $fields = array()) { $required = false; $ws = explode("\54", $withouts); $i = 0; E8b7d: if (!($i < count($ws))) { goto Ebb26; } if (!(!isset($fields[$ws[$i]]) || $fields[$ws[$i]] === '')) { goto C004f; } $required = true; C004f: F1004: $i++; goto E8b7d; Ebb26: return $required ? isset($val) && $val !== '' : true; }]; $this->validation_messages = ["\141\x6c\x70\x68\x61" => static function ($val) { return "{$val}\40\x73\150\157\x75\x6c\144\40\x6f\156\154\x79\x20\x63\157\156\x74\x61\151\156\40\x6c\x65\164\x74\145\x72\x73"; }, "\141\154\x70\x68\x61\144\x61\x73\150" => static function ($val) { return "{$val}\x20\x73\150\x6f\x75\154\x64\x20\157\156\x6c\171\40\x63\157\x6e\x74\x61\151\156\x20\x6c\x65\x74\164\145\162\x73\40\x61\x6e\x64\x20\x64\x61\163\x68\145\x73"; }, "\x61\x6c\160\150\x61\156\x75\155" => static function ($val) { return "{$val}\40\163\150\157\165\x6c\x64\40\x6f\156\154\171\40\143\x6f\156\x74\x61\151\x6e\40\154\145\x74\164\x65\162\163\x20\x61\156\144\40\156\165\x6d\x62\x65\162\163"; }, "\x61\x72\x72\141\171" => static function ($val) { return "{$val}\x20\x73\150\x6f\165\x6c\x64\40\x62\x65\40\141\x6e\40\141\162\162\x61\171"; }, "\x62\141\163\x65\66\x34" => static function ($val) { return "{$val}\40\163\150\x6f\165\x6c\x64\40\142\x65\40\142\x61\163\145\x36\64\x20\146\157\x72\155\141\x74"; }, "\x62\x6f\x6f\x6c\x65\141\x6e" => static function ($val) { return "{$val}\40\x73\150\x6f\165\x6c\144\40\142\145\x20\141\40\x62\157\x6f\x6c\145\141\156"; }, "\x64\x65\x63\151\155\x61\154" => static function ($val) { return "{$val}\40\163\150\157\165\154\144\40\x62\145\40\141\x20\144\x65\143\x69\x6d\141\154\x20\x6e\165\155\142\x65\162"; }, "\x64\151\x66\x66\x65\x72\163" => static function ($val, $diff) { return "{$val}\x20\x73\150\x6f\x75\154\144\40\x6e\x6f\164\x20\155\141\x74\x63\x68\x20{$diff}"; }, "\x65\155\x61\151\154" => static function ($val) { return "{$val}\x20\163\150\157\x75\x6c\x64\x20\142\x65\x20\141\40\x76\141\x6c\x69\144\40\x65\155\141\151\154"; }, "\145\170\151\x73\x74" => static function ($val) { return "{$val}\x20\144\157\x65\x73\40\x6e\157\x74\x20\145\x78\x69\163\x74"; }, "\x67\x72\x65\141\164\145\162" => static function ($val, $greater) { return "{$val}\40\x73\x68\x6f\x75\154\144\40\x62\x65\40\x67\x72\145\141\164\x65\x72\x20\x74\x68\x61\156\40{$greater}"; }, "\x69\156" => static function ($val, $arr) { return "{$val}\x20\163\150\157\x75\x6c\x64\40\142\145\40\x69\x6e\x20{$arr}"; }, "\x69\156\x74\x65\x67\x65\162" => static function ($val) { return "{$val}\x20\163\150\157\165\x6c\144\x20\142\145\x20\141\156\40\151\x6e\x74\145\x67\145\x72"; }, "\154\x65\163\x73\x65\x72" => static function ($val, $lesser) { return "{$val}\x20\x73\150\157\x75\154\144\40\142\145\x20\154\145\x73\163\40\x74\150\141\156\x20{$lesser}"; }, "\x6d\141\x74\x63\150\145\163" => static function ($val, $match) { return "{$val}\x20\163\x68\157\x75\x6c\x64\x20\155\141\x74\143\150\40{$match}"; }, "\x6d\x61\x78" => static function ($val, $max) { return "{$val}\40\x73\x68\x6f\165\154\144\40\x6e\157\164\x20\145\170\x63\145\x65\x64\x20{$max}\40\x63\x68\141\x72\141\x63\x74\x65\x72\163"; }, "\x6d\151\156" => static function ($val, $min) { return "{$val}\x20\x73\x68\157\165\154\x64\x20\x62\145\x20\141\x74\x20\x6c\x65\x61\163\x74\40{$min}\x20\x63\150\141\x72\141\x63\164\x65\x72\163"; }, "\x6e\141\164\165\162\x61\x6c" => static function ($val) { return "{$val}\x20\163\150\x6f\165\x6c\x64\x20\142\x65\40\141\x20\x6e\141\x74\x75\x72\141\154\x20\156\x75\x6d\x62\x65\x72"; }, "\156\157\x74" => static function ($val, $not) { return "{$val}\x20\x73\x68\157\x75\154\144\40\156\x6f\x74\40\x62\145\40{$not}"; }, "\156\x75\x6d\x62\x65\162" => static function ($val) { return "{$val}\x20\163\150\x6f\x75\154\144\x20\142\x65\x20\x61\40\x6e\165\155\x62\145\162"; }, "\x70\x68\x6f\156\145" => static function ($val) { return "{$val}\x20\x73\150\x6f\165\154\144\x20\x62\x65\x20\x61\40\166\141\x6c\151\x64\x20\160\x68\x6f\156\145\40\156\165\155\142\145\162"; }, "\162\145\x67\145\170" => static function ($val, $exp) { return "{$val}\40\x64\x69\144\40\156\157\x74\x20\x6d\x61\164\143\x68\x20\x74\x68\x65\x20\160\141\x74\x74\145\162\x6e"; }, "\x72\145\161\165\x69\162\145\x64" => static function ($val) { return "{$val}\x20\151\163\40\x72\145\x71\165\x69\162\x65\144"; }, "\x75\x6e\151\161\x75\x65" => static function ($val) { return "{$val}\x20\141\x6c\162\145\x61\x64\171\40\x65\170\x69\x73\164\x73"; }, "\165\x72\154" => static function ($val) { return "{$val}\x20\163\x68\x6f\x75\x6c\x64\40\x62\x65\x20\x61\40\166\141\x6c\x69\x64\x20\165\x72\x6c"; }, "\x77\151\164\x68" => static function ($val, $withs) { return "{$val}\x20\x69\x73\40\162\145\x71\x75\x69\x72\145\144\40\167\151\164\150\x20{$withs}"; }, "\167\151\164\x68\157\x75\164" => static function ($val, $withouts) { return "{$val}\40\x69\163\x20\x72\145\161\165\151\162\x65\x64\40\x77\151\164\x68\x6f\x75\164\x20{$withouts}"; }]; $this->validation_errors = []; } public function flatten_json($json, $case = null, $prepend = '') { $results = []; foreach ($json as $key => $value) { if (is_array($value)) { goto E630e; } $results[$this->change_case($prepend, $case) . $this->change_case($key, $case)] = $value; goto B96e3; E630e: $results = array_merge($results, $this->flatten_json($value, $case, $prepend . $key . "\56")); B96e3: D1b50: } c1b59: return $results; } public function validate($validate, $validations) { $json = $this->flatten_json($validate); $this->validation_errors = []; $response = true; foreach ($validations as $key => $validation) { if (!empty($validation)) { goto Ab351; } goto F2613; Ab351: $rename = !empty($validation["\x72\x65\156\141\155\145"]) ? $validation["\162\x65\x6e\x61\155\x65"] : $key; $rules = $validation["\162\165\x6c\145\163"]; $rules = is_string($rules) ? explode("\174", $rules) : $rules; $messages = !empty($validation["\x6d\145\x73\163\x61\147\x65\163"]) ? $validation["\x6d\145\x73\x73\141\147\x65\163"] : []; $value = isset($json[$key]) ? $json[$key] : null; if (!($value === null && in_array("\x73\x6f\155\145\x74\x69\x6d\145\x73", $rules))) { goto C3ef1; } goto F2613; C3ef1: $i = 0; A4130: if (!($i < count($rules))) { goto a7209; } $strpos = strpos($rules[$i], "\72"); $rule = $strpos ? substr($rules[$i], 0, $strpos) : $rules[$i]; $params = $strpos ? substr($rules[$i], $strpos + 1) : null; $valid = true; if (!(isset($this->validation_rules[$rule]) && is_callable($this->validation_rules[$rule]))) { goto c04d1; } $valid = $this->validation_rules[$rule]($value, $params, $json); c04d1: if (!(isset($validation["\143\x75\163\164\x6f\x6d"][$rule]) && is_callable($validation["\x63\165\x73\164\x6f\x6d"][$rule]))) { goto Bae25; } $valid = $validation["\x63\x75\x73\164\157\155"][$rule]($value, $params, $json); Bae25: if ($valid) { goto a5f90; } $rename = isset($rename) && is_string($rename) ? $rename : $key; $message = "\x49\156\x76\141\x6c\x69\x64\40{$rule}"; if (!(isset($this->validation_messages[$rule]) && is_callable($this->validation_messages[$rule]))) { goto B0edc; } $message = $this->validation_messages[$rule]($rename, $params); B0edc: if (!(isset($messages[$rule]) && is_callable($messages[$rule]))) { goto C9b47; } $message = $messages[$rule]($rename, $params); C9b47: $this->validation_errors[$key][$rule] = $message; $response = false; a5f90: f64d8: $i++; goto A4130; a7209: F2613: } Efaaf: return $response; } public function get_validation_errors() { return $this->validation_errors; } private function _get_related_records($table, $count, $keys, $options, $action) { $pivot_values = []; $select_count = "\52"; if (empty($count["\x72\x65\154\141\x74\145\x64\137\x74\141\142\x6c\x65\163"])) { goto C6286; } foreach ($count["\x72\x65\x6c\141\164\x65\144\x5f\x74\141\x62\x6c\145\163"] as $key => $related) { if (!empty($table["\x70\x69\x76\x6f\164\137\x74\141\x62\154\x65"])) { goto a1a53; } $main_table = $this->db_dbprefix . $related["\164\x61\142\x6c\145"]; $related_table = $this->db_dbprefix . $table["\x74\x61\x62\154\x65"]; $count_sql = sprintf("\x53\x45\114\x45\103\124\x20\x43\x4f\x55\x4e\x54\x28\x2a\x29\x20\106\x52\117\115\x20\140\45\x73\140\x20\127\110\105\x52\x45\40\140\45\x73\140\40\75\x20\47\x25\163\x27", mysqli_real_escape_string($this->mysqli, $main_table), mysqli_real_escape_string($this->mysqli, `{$related_table}` . `{$related["\x72\x65\146\x65\162\145\156\x63\145\144\x5f\x6b\x65\x79"]}`), mysqli_real_escape_string($this->mysqli, `{$main_table}` . `{$related["\162\145\146\x65\162\x65\x6e\x63\151\x6e\x67\x5f\153\145\x79"]}`)); $select_count .= "\x2c\x20\50" . $count_sql . "\51\x20\x41\x53\x20\x74\x6f\x74\x61\x6c\x5f{$related["\164\x61\142\154\x65"]}"; goto Dfb0e; a1a53: $main_table = $this->db_dbprefix . $related["\x74\x61\142\154\145"]; $related_table = $this->db_dbprefix . $table["\x74\141\x62\x6c\x65"]; $pivot_table = $this->db_dbprefix . $table["\160\151\166\x6f\164\137\164\x61\x62\154\145"]; $count_sql = sprintf("\x53\105\x4c\x45\x43\x54\x20\103\117\x55\x4e\x54\50\x2a\51\x20\x46\x52\117\115\x20\x60\45\x73\140\x20\127\110\x45\x52\x45\x20\140\45\x73\x60\40\75\40\x27\x25\x73\x27", mysqli_real_escape_string($this->mysqli, $pivot_table), mysqli_real_escape_string($this->mysqli, `{$related_table}` . `{$table["\160\x69\x76\157\164\x5f\x72\x65\x66\x65\x72\x65\156\x63\x65\144\x5f\x6b\x65\x79"]}`), mysqli_real_escape_string($this->mysqli, `{$pivot_table}` . `{$related["\162\145\x66\x65\x72\145\156\x63\x69\156\147\x5f\153\x65\171"]}`)); $select_count .= "\54\40\x28" . $count_sql . "\51\x20\x41\x53\x20\164\157\164\x61\x6c\137{$count["\x74\x61\x62\154\145"]}"; Dfb0e: fcb8e: } D8f5c: C6286: $related_records = []; $repo = new self($this->init_config); if ($action == "\x77\150\145\x72\x65\137\167\151\164\150" || $action == "\167\x68\145\x72\145\x5f\x68\141\163" || $action == "\167\x68\145\162\145\x5f\x68\141\163\x5f\x6e\157" || $action == "\167\151\164\150\137\160\151\x76\157\164" || $action == "\167\x68\145\x72\x65\x5f\167\151\x74\150\x5f\x70\151\x76\157\164") { goto E503f; } if (!empty($table["\x70\151\x76\157\x74\137\164\141\142\154\x65"])) { goto Df4a2; } $records = $repo->select($select_count, FALSE)->table($table["\164\141\x62\154\145"]); if (!is_callable($table["\x63\141\154\154\142\x61\x63\153"])) { goto B5a68; } $records = $table["\x63\141\154\154\142\141\143\x6b"]($records); B5a68: $records = $records->where_in($table["\162\x65\x66\x65\162\145\x6e\x63\x69\x6e\x67\137\153\145\x79"], $keys)->get($options); goto Bc999; Df4a2: $records = $repo->select($select_count, FALSE)->table($table["\160\151\x76\157\x74\x5f\164\x61\x62\x6c\x65"])->where_in($table["\162\145\x66\x65\162\x65\x6e\x63\x69\x6e\x67\x5f\x6b\x65\171"], $keys)->get(); $where_ins = array_column($records, $table["\x70\151\166\x6f\x74\137\162\x65\x66\x65\162\x65\x6e\x63\x69\156\147\x5f\153\x65\x79"]); $pivots = []; if (empty($where_ins)) { goto D0f12; } $pivots = $repo->table($table["\164\141\142\x6c\145"]); if (!is_callable($table["\x63\x61\154\x6c\142\141\143\153"])) { goto D916c; } $pivots = $table["\143\x61\x6c\154\142\141\x63\153"]($pivots); D916c: $pivots = $pivots->where_in($table["\x70\x69\166\157\x74\x5f\x72\145\146\145\x72\145\156\143\x65\x64\x5f\x6b\x65\171"], $where_ins)->get($options); foreach ($pivots as $pivot) { $pivot_values[$pivot[$table["\160\151\x76\157\164\x5f\x72\x65\146\x65\162\145\156\143\145\x64\x5f\x6b\145\x79"]]] = $pivot; a78da: } e5c24: D0f12: Bc999: goto F9311; E503f: if (!empty($table["\160\151\x76\x6f\164\x5f\164\x61\142\x6c\x65"])) { goto A5c72; } $subqueries = []; foreach ($keys as $k => $key) { $query = $repo->table($table["\x74\141\142\x6c\x65"]); if (!is_callable($table["\143\x61\154\154\x62\141\143\153"])) { goto a1974; } $query = $table["\143\141\154\154\x62\x61\143\x6b"]($query); a1974: $query = $query->where($table["\x72\x65\x66\145\x72\x65\156\x63\151\156\x67\x5f\x6b\145\171"], $key); $subqueries[] = "\50" . $query->to_sql() . "\51"; D668e: } E1842: $sql = "\x28" . implode("\x20\125\116\x49\x4f\x4e\40", $subqueries) . "\51\40\x41\x53\x20\164\142\x6c"; $primary_key = $this->_get_primary_key($table["\x74\x61\x62\154\145"]); $record_ins = "\x53\x45\x4c\105\x43\124\x20\140{$primary_key}\x60\40\106\x52\x4f\x4d\40{$sql}"; $records = $repo->table($table["\x74\141\x62\154\145"]); if (!is_callable($table["\143\x61\x6c\154\x62\141\x63\x6b"])) { goto c1df8; } $records = $table["\143\x61\x6c\x6c\x62\141\143\x6b"]($records); c1df8: $records = $records->where_raw("{$primary_key}\40\111\x4e\40\x28{$record_ins}\x29")->limit(NULL)->offset(NULL)->get($options); goto b998e; A5c72: foreach ($keys as $key) { $pivots = $repo->table($table["\160\151\166\x6f\x74\x5f\164\141\x62\154\145"])->where($table["\x72\145\146\x65\162\145\x6e\x63\x69\156\x67\137\x6b\x65\171"], $key); if (!is_callable($table["\160\x69\166\x6f\x74\x5f\x63\141\x6c\154\142\141\x63\x6b"])) { goto e2576; } $pivots = $table["\x70\x69\166\157\x74\137\143\x61\154\x6c\x62\x61\143\153"]($pivots); e2576: $pivots = $pivots->get(); $pivot_ids = array_column($pivots, $table["\160\151\x76\x6f\164\x5f\162\x65\146\x65\162\x65\x6e\143\151\x6e\147\137\x6b\x65\x79"]); if (empty($pivot_ids)) { goto e22c6; } $related = $repo->table($table["\164\x61\142\154\x65"]); if (!is_callable($table["\x63\141\x6c\x6c\142\x61\143\153"])) { goto c59c2; } $related = $table["\143\x61\154\154\142\141\143\x6b"]($related); c59c2: $related = $related->where_in($table["\x70\x69\166\157\164\x5f\x72\145\146\145\x72\145\156\x63\145\x64\137\153\145\171"], $pivot_ids); $related = $related->get($options); $primary_key = $this->_get_primary_key($table["\x74\x61\142\154\x65"]); foreach ($related as $rel) { $pivot_values[$rel[$table["\160\x69\x76\157\x74\x5f\x72\x65\x66\x65\x72\145\156\143\x65\144\x5f\x6b\x65\x79"]]] = $rel; a1b5b: } Cb86c: e22c6: f0d87: } D5e72: $records = $repo->select($select_count, FALSE)->table($table["\x70\151\x76\x6f\x74\x5f\x74\141\x62\x6c\145"])->where_in($table["\162\145\x66\x65\162\x65\x6e\x63\151\x6e\147\137\x6b\x65\171"], $keys)->get(); b998e: F9311: $repo->close(); $repo = NULL; $all_related = []; if (empty($table["\x72\145\x6c\x61\164\145\x64\137\164\x61\x62\x6c\145\163"])) { goto E393c; } foreach ($table["\x72\145\x6c\141\164\145\x64\x5f\164\141\x62\x6c\x65\163"] as $key => $related) { $related_options = ["\x61\x63\143\145\163\x73\x6f\x72\163" => !empty($options["\141\x63\x63\x65\163\163\x6f\x72\163"][$key]) ? $options["\141\x63\143\x65\x73\x73\x6f\162\x73"][$key] : [], "\146\162\x61\143\x74\141\154\163" => NULL]; if (empty($related["\162\x65\x66\145\x72\x65\x6e\143\145\144\x5f\153\145\x79"])) { goto f140d; } if (!empty($related["\160\151\x76\157\164\x5f\x74\x61\142\x6c\145"])) { goto a1155; } $recs = !empty($table["\x70\151\166\x6f\x74\137\164\141\x62\x6c\x65"]) ? $pivot_values : $records; $record_keys = array_column($recs, $related["\162\x65\x66\x65\x72\145\156\x63\145\x64\137\x6b\145\171"]); goto Acad8; a1155: $record_keys = array_column($records, $related["\x70\x69\x76\157\164\x5f\x72\x65\146\x65\x72\145\x6e\x63\145\144\x5f\153\145\171"]); Acad8: if (empty($record_keys)) { goto A745d; } $related_count = !empty($count["\x72\145\x6c\x61\x74\145\x64\x5f\164\141\142\x6c\x65\163"][$key]) ? $count["\162\x65\x6c\141\x74\145\x64\137\x74\x61\142\154\x65\x73"][$key] : NULL; $related_records = $this->_get_related_records($related, $related_count, $record_keys, $related_options, $action); $all_related[$key] = $related_records; A745d: f140d: a3010: } fc985: E393c: $response = []; foreach ($records as $key => $record) { $raw_record = $record; $parent_id = $record[$table["\x72\x65\x66\x65\162\145\156\x63\x69\x6e\x67\x5f\x6b\x65\171"]]; if (empty($table["\x70\151\166\x6f\164\137\x74\x61\142\x6c\x65"])) { goto c0406; } if (!empty($pivot_values[$raw_record[$table["\x70\x69\166\157\x74\137\162\145\146\145\x72\x65\x6e\143\151\x6e\147\x5f\153\x65\171"]]])) { goto e7504; } $record = []; goto abd01; e7504: $old_record = $record; $record = $pivot_values[$raw_record[$table["\160\x69\166\157\x74\x5f\x72\x65\146\x65\162\145\156\x63\x69\156\147\137\x6b\145\171"]]]; $fc_pivot_table = $this->change_case($table["\x70\x69\x76\x6f\164\x5f\x74\141\142\154\145"], $this->db_column_case); $record[$fc_pivot_table] = $old_record; $old_raw_record = $raw_record; $raw_record = $pivot_values[$raw_record[$table["\x70\151\166\x6f\164\137\162\x65\146\x65\162\x65\x6e\143\x69\156\x67\137\x6b\x65\x79"]]]; $raw_record[$table["\160\x69\x76\157\x74\x5f\x74\141\x62\x6c\x65"]] = $old_raw_record; abd01: c0406: if (empty($table["\143\157\x6c\x75\x6d\156\163"])) { goto dc818; } $new_record = []; foreach ($table["\x63\x6f\154\165\155\x6e\x73"] as $column) { if (empty($record[$column])) { goto F203e; } $new_record[$column] = $record[$column]; F203e: Acc8c: } Dbd6a: $record = $new_record; dc818: if (empty($all_related)) { goto d393f; } foreach ($all_related as $key => $related) { $rel = $table["\162\x65\x6c\141\x74\x65\x64\x5f\x74\x61\x62\x6c\x65\163"][$key]; if (empty($record)) { goto F0e4f; } $local_key = $rel["\162\145\146\145\162\x65\x6e\x63\x65\144\137\x6b\145\171"]; $local_key_value = $raw_record[$local_key]; $fc_key = $this->change_case($key, $this->db_column_case); $record[$fc_key] = !empty($related[$local_key_value]["\162\x65\x63\x6f\x72\x64\163"]) ? $related[$local_key_value]["\x72\x65\x63\x6f\x72\144\163"] : []; if (!($action == "\150\141\163" && empty($related[$local_key_value]))) { goto Df71f; } $record = []; Df71f: if (!($action == "\x68\x61\163\137\156\157" && empty($related[$local_key_value]))) { goto b3325; } $record = []; b3325: F0e4f: fa428: } f1f86: d393f: if (empty($record)) { goto b190c; } $response[$parent_id]["\x72\x65\143\x6f\162\x64\x73"][] = $record; b190c: D3214: } a5e31: return $response; } private function _loop_records(&$tables) { foreach ($tables as $key => $table) { $fc_key = $this->change_case($key, $this->db_table_case); if (!empty($table["\162\x65\143\x6f\x72\x64\x73"][0])) { goto Ddff3; } $tables[$key]["\162\x65\x63\157\162\144\163"] = NULL; $tables[$fc_key]["\162\x65\143\157\162\144\x73"][$key][0] = $this->_change_record_case($table["\162\x65\x63\157\162\x64\163"]); Ddff3: if (!(!empty($table["\162\145\143\x6f\162\144\x73"][0]) && is_array($table["\x72\x65\143\x6f\x72\x64\163"][0]))) { goto c225b; } $tables[$key]["\162\145\x63\157\x72\x64\163"] = NULL; $tables[$fc_key]["\162\145\143\157\x72\144\163"][$key] = $this->_change_record_case($table["\162\x65\x63\157\x72\144\x73"]); c225b: ae99b: } e40c1: return $tables; } private function _get_relations(&$relations) { foreach ($relations as $key => $relation) { $keys = $this->_get_reference_keys($relation["\164\141\x62\x6c\145"], $this->table, $relation["\x70\151\166\157\164\137\164\141\x62\x6c\145"], $relation["\x72\x65\146\145\162\x65\156\143\x69\x6e\x67\137\153\x65\171"], $relation["\x72\145\146\x65\162\x65\x6e\143\145\x64\x5f\x6b\x65\171"], $relation["\160\151\x76\x6f\x74\x5f\x72\145\x66\x65\162\145\156\x63\x69\x6e\147\x5f\x6b\145\171"], $relation["\160\151\166\157\164\x5f\162\145\x66\x65\162\x65\x6e\x63\145\x64\x5f\153\x65\x79"]); $table = array_replace($relation, $keys); if (!((empty($table["\x72\x65\x66\x65\162\145\x6e\x63\145\144\137\153\x65\171"]) || empty($table["\162\x65\x66\145\x72\145\x6e\143\x69\x6e\x67\x5f\x6b\x65\x79"])) && empty($table["\x70\x69\x76\x6f\164\137\164\141\x62\x6c\x65"]) && !empty($table["\162\145\x6c\x61\164\x65\x64\x5f\164\141\142\x6c\145"]))) { goto Bc893; } $keys = $this->_get_reference_keys($table["\164\141\142\154\x65"], $table["\162\145\154\141\164\145\x64\137\164\x61\x62\x6c\145"], $table["\x70\x69\166\157\x74\x5f\164\141\142\154\x65"], $table["\x72\145\146\x65\x72\145\156\x63\x69\x6e\x67\137\153\x65\171"], $table["\162\145\146\145\162\145\x6e\143\145\144\x5f\153\x65\171"], $table["\160\151\166\157\x74\x5f\162\145\x66\x65\x72\x65\x6e\143\x69\x6e\x67\137\153\145\171"], $table["\x70\151\x76\x6f\164\x5f\x72\x65\x66\145\x72\x65\156\x63\x65\144\x5f\153\x65\x79"]); $table = array_replace($table, $keys); if (!(!empty($table["\x72\x65\146\x65\x72\x65\156\x63\145\144\x5f\153\145\171"]) && !empty($table["\162\x65\x66\145\162\145\x6e\x63\151\x6e\x67\137\153\x65\x79"]) && empty($table["\160\x69\166\x6f\x74\137\164\141\x62\x6c\x65"]))) { goto Ffce3; } $this->reference_tables[] = $this->db_prefix . $table["\164\141\142\154\145"]; Ffce3: Bc893: if (!((empty($table["\162\x65\x66\145\x72\x65\156\x63\145\x64\x5f\153\145\x79"]) || empty($table["\162\145\x66\145\x72\x65\156\x63\x69\156\147\x5f\153\x65\171"])) && !empty($table["\x70\x69\166\x6f\164\137\x74\x61\142\x6c\x65"]) && !empty($table["\162\145\154\141\x74\x65\144\137\164\141\142\154\x65"]))) { goto C48f3; } $keys = $this->_get_reference_keys($table["\164\x61\142\x6c\145"], $table["\x72\145\154\x61\x74\145\144\x5f\x74\141\x62\154\145"], $table["\x70\x69\x76\x6f\164\137\164\x61\x62\154\x65"], $table["\162\145\146\145\x72\145\x6e\x63\151\x6e\x67\x5f\x6b\145\171"], $table["\162\x65\146\145\x72\x65\x6e\143\145\x64\x5f\153\x65\171"], $table["\x70\x69\x76\x6f\164\137\162\145\146\145\x72\x65\156\x63\151\156\x67\137\x6b\x65\171"], $table["\x70\x69\166\157\x74\x5f\x72\145\146\145\162\x65\156\x63\145\x64\137\153\145\171"]); $table = array_replace($table, $keys); if (!(!empty($table["\x72\x65\146\145\x72\145\156\143\145\x64\x5f\153\145\x79"]) && !empty($table["\162\145\x66\145\x72\145\156\x63\151\x6e\147\x5f\153\x65\171"]) && !empty($table["\x70\151\166\x6f\164\137\164\141\x62\x6c\145"]) && !empty($table["\x70\151\166\x6f\164\137\x72\145\x66\x65\x72\145\x6e\143\145\144\x5f\x6b\145\171"]) && !empty($table["\160\x69\x76\157\x74\137\162\x65\146\x65\x72\145\156\x63\x69\156\147\x5f\x6b\x65\171"]))) { goto F09d1; } $this->reference_tables[] = $this->db_prefix . $table["\x74\141\x62\154\145"]; $this->reference_tables[] = $this->db_prefix . $table["\x70\151\166\x6f\164\137\x74\x61\142\x6c\145"]; F09d1: C48f3: $relations[$key] = $table; a4d25: } D92c3: } private function _validate_attach() { $valid_tables = array_keys($this->table_columns); foreach ($this->attach_tables as $attach) { if (in_array($attach["\164\141\142\154\x65"], $valid_tables)) { goto Ef12f; } $this->validation_errors[$this->_lang("\155\145\x74\150\157\x64\x5f\143\x68\141\151\x6e")][$this->_lang("\x61\x74\x74\141\143\x68")] = $this->_lang("\151\156\x76\x61\x6c\151\x64\137\141\x74\x74\x61\x63\x68\x5f\x74\x61\142\x6c\145") . "\x20" . $attach["\164\141\x62\154\x65"]; return FALSE; Ef12f: $attach_table_primary_key = $this->_get_primary_key($attach["\x74\x61\142\x6c\145"]); $attach_ids = $attach["\x69\x64\x73"]; $attach_table = $attach["\x74\x61\142\x6c\x65"]; if (!($attach["\x74\x79\x70\145"] == "\x66\157\x72\x65\x69\x67\156\x5f\x6b\145\171")) { goto c7e76; } $last_id = $attach["\151\144\163"][count($attach["\x69\144\x73"]) - 1]; $attach_ids = [$last_id]; c7e76: if (!($attach["\164\171\160\145"] == "\155\x61\x6e\x79\x5f\164\x6f\x5f\x6d\141\156\171")) { goto f64b7; } if (!($attach["\x74\x79\x70\145"] == "\141\x73\x73\157\143\x69\141\x74\x69\x76\x65")) { goto f7420; } $attach_ids = array_keys($attach["\162\x65\143\157\x72\144\163"]); f7420: f64b7: $repo = new self($this->init_config); $record_ids = $repo->table($attach_table)->where_in($attach_table_primary_key, $attach_ids)->get(); $repo->close(); $repo = NULL; $db_ids = array_column($record_ids, $attach_table_primary_key); if (!(count($db_ids) != count($attach_ids))) { goto fc0e1; } $non_existing_ids = array_diff($attach_ids, $db_ids); $non_existing_ids_string = implode("\54", $non_existing_ids); $this->validation_errors[$this->_lang("\155\x65\x74\x68\157\x64\137\x63\x68\141\x69\156")][$this->_lang("\x61\164\164\141\x63\x68")] = "{$attach_table}\56{$attach_table_primary_key}\40\x3d\x20{$non_existing_ids_string}\40" . $this->_lang("\156\x6f\164\x5f\145\x78\151\x73\164"); return FALSE; fc0e1: if (!($attach["\164\171\160\145"] == "\155\x61\x6e\171\x5f\x74\157\137\155\141\x6e\x79")) { goto F7ce9; } $records = $attach["\x72\x65\x63\x6f\x72\x64\163"]; if (!($attach["\151\x64\137\x74\x79\x70\x65"] == "\151\x6e\164\145\x67\145\x72")) { goto daff2; } $records = []; $records[$attach["\x72\x65\143\x6f\x72\x64\x73"]] = []; daff2: if (!($attach["\x69\144\137\164\171\160\145"] == "\163\145\x71\165\x65\156\x74\x69\141\154")) { goto de9ba; } $records = []; foreach ($attach["\x72\145\143\157\x72\x64\x73"] as $record) { $records[$record] = []; Cc37c: } ad2d2: de9ba: $this->_get_table_columns(); $rules = []; foreach ($records as $key => $record) { $columns = $this->table_columns[$attach["\x70\151\166\x6f\164\137\164\141\142\154\x65"]]["\143\157\x6c\165\x6d\156\x73"]; foreach ($columns as $column) { $column["\166\141\154\x69\x64\141\x74\151\157\x6e\137\156\x61\155\x65"] = "{$key}\x5b{$column["\x6e\141\155\x65"]}\135"; if ($column["\x6e\x61\x6d\x65"] == $attach["\x70\151\166\x6f\164\x5f\x72\145\x66\145\x72\145\156\x63\151\156\147\137\x6b\145\x79"] || $column["\156\141\155\x65"] == $attach["\x72\145\x66\145\162\145\x6e\143\151\156\x67\137\153\145\x79"]) { goto a6236; } $rules[$column["\x76\141\x6c\x69\144\141\x74\151\x6f\156\x5f\156\x61\155\x65"]] = $this->_create_validation($record, $attach["\160\x69\166\x6f\164\137\x74\141\142\154\x65"], $column, "\141\x64\144"); goto A9ffa; a6236: $rules[$column["\x76\x61\154\151\144\141\164\151\x6f\x6e\137\156\141\x6d\x65"]] = $this->_create_validation($record, $attach["\x70\151\x76\157\x74\x5f\x74\141\x62\x6c\x65"], $column, "\x61\x64\x64", "\x6e\157\164\x5f\162\145\x71\165\151\162\x65\x64"); A9ffa: Ae406: } Fcdc4: e714c: } Ba6bf: if (!($this->validate($records, $rules) === FALSE)) { goto a886a; } return FALSE; a886a: F7ce9: Cd000: } Ae634: return TRUE; } private function _validate_attach_new() { if (empty($this->attach_new_tables)) { goto A7744; } foreach ($this->attach_new_tables as $key => $attach) { $rules = $this->_related_validation($attach, $attach["\162\x65\143\x6f\x72\144\163"][$key], $key); if (!($this->validate($attach["\162\145\x63\157\x72\x64\x73"], $rules) === FALSE)) { goto C89ba; } return FALSE; C89ba: A2725: } f083f: A7744: return TRUE; } private function _validate_detach() { $valid_tables = array_keys($this->table_columns); foreach ($this->detach_tables as $detach) { if (in_array($detach["\x74\141\x62\154\x65"], $valid_tables)) { goto F3afc; } $this->validation_errors[$this->_lang("\155\145\164\x68\x6f\144\137\x63\x68\x61\151\x6e")][$this->_lang("\144\145\164\x61\143\150")] = $this->_lang("\151\156\x76\x61\x6c\x69\144\x5f\144\x65\164\x61\143\x68\x5f\x74\x61\x62\x6c\145") . "\40" . $detach["\x74\141\x62\x6c\145"]; return FALSE; F3afc: $detach_table_primary_key = $this->_get_primary_key($detach["\x74\x61\142\154\145"]); $detach_ids = $detach["\x69\x64\163"]; $detach_table = $nullable_table = $detach["\164\x61\x62\x6c\x65"]; if (!($detach["\164\171\160\145"] == "\x66\x6f\162\x65\x69\x67\x6e\137\153\145\x79")) { goto F936c; } $last_id = $detach["\151\144\x73"][count($detach["\x69\x64\163"]) - 1]; $detach_ids = [$last_id]; $nullable_key = $detach["\162\x65\x66\x65\162\x65\x6e\143\151\156\x67\137\x6b\145\x79"]; $nullable_table = $detach["\x74\x61\x62\154\x65"]; F936c: if (!($detach["\x74\x79\x70\x65"] == "\151\156\166\x65\162\163\x65\137\162\145\154\x61\x74\151\157\x6e")) { goto ca659; } $detach_table = $nullable_table = $detach["\x72\145\154\x61\164\x65\x64\x5f\164\141\x62\154\x65"]; $nullable_key = $detach["\x72\x65\146\145\162\145\x6e\x63\x65\x64\x5f\x6b\145\171"]; ca659: if (!($detach["\x74\x79\160\x65"] == "\155\x61\x6e\x79\137\x74\157\x5f\x6d\x61\156\x79")) { goto a8c1a; } if (!($detach["\151\x64\137\164\171\x70\145"] == "\x61\163\163\x6f\143\151\141\x74\151\166\x65")) { goto D141a; } $detach_ids = array_keys($detach["\x72\x65\x63\157\162\x64\163"]); D141a: a8c1a: if (!(!empty($nullable_key) && !empty($this->table_columns[$nullable_table]["\x63\157\x6c\165\155\156\x73"][$nullable_key]["\x6e\165\x6c\x6c"]))) { goto a890b; } $this->validation_errors[$this->_lang("\155\145\x74\x68\x6f\144\x5f\143\x68\x61\151\156")][$this->_lang("\144\145\164\x61\143\150")] = $this->_lang("\143\x61\x6e\156\157\x74\x5f\x64\145\164\x61\143\150") . "\40{$nullable_table}\x2e{$nullable_key}\x20" . $this->_lang("\156\157\164\137\156\x75\x6c\154\x61\x62\x6c\145"); return FALSE; a890b: $repo = new self($this->init_config); $record_ids = $repo->table($detach_table)->where_in($detach_table_primary_key, $detach_ids)->get(); $repo->close(); $repo = NULL; $db_ids = array_column($record_ids, $detach_table_primary_key); if (!(count($db_ids) != count($detach_ids))) { goto B98e3; } $non_existing_ids = array_diff($detach_ids, $db_ids); $non_existing_ids_string = implode("\54", $non_existing_ids); $this->validation_errors[$this->_lang("\155\x65\x74\150\x6f\x64\x5f\143\150\141\151\x6e")][$this->_lang("\x64\x65\x74\141\143\x68")] = "{$detach_table}\x2e{$detach_table_primary_key}\40\x3d\x20{$non_existing_ids_string}\x20" . $this->_lang("\156\x6f\x74\x5f\145\170\151\x73\164"); return FALSE; B98e3: af01c: } Cd6b0: return TRUE; } private function _validate_sync($sync_tables) { $valid_tables = array_keys($this->table_columns); foreach ($sync_tables as $sync) { if (in_array($sync["\x74\x61\142\x6c\145"], $valid_tables)) { goto F31ab; } $this->validation_errors[$this->_lang("\155\145\x74\150\157\144\137\143\x68\x61\151\156")][$this->_lang("\x73\x79\x6e\x63")] = $this->_lang("\x69\x6e\x76\x61\x6c\x69\144\x5f\163\171\x6e\x63\137\x74\x61\x62\154\x65") . "\40" . $sync["\164\141\142\x6c\x65"]; return FALSE; F31ab: $sync_table_primary_key = $this->_get_primary_key($sync["\164\x61\142\154\x65"]); $sync_ids = $sync["\x69\144\163"]; $sync_table = $nullable_table = $sync["\164\x61\x62\154\145"]; if (!($sync["\x74\x79\x70\145"] == "\146\157\162\x65\x69\147\156\137\x6b\x65\x79")) { goto f86da; } $last_id = $sync["\151\144\x73"][count($sync["\151\144\x73"]) - 1]; $sync_ids = [$last_id]; $nullable_key = $sync["\162\145\146\x65\x72\145\156\x63\151\x6e\x67\137\153\145\171"]; $nullable_table = $this->table; f86da: if (!($sync["\x74\171\x70\145"] == "\x69\156\166\145\x72\163\145\x5f\x72\145\x6c\141\x74\x69\157\x6e")) { goto d87be; } $nullable_key = $sync["\x72\x65\x66\x65\162\x65\156\x63\x65\x64\x5f\153\x65\171"]; d87be: if (!($sync["\x74\x79\160\145"] == "\155\141\156\171\x5f\x74\x6f\x5f\155\x61\156\171")) { goto Ec75c; } if (!($sync["\151\144\137\x74\171\160\145"] == "\141\x73\x73\157\x63\151\x61\164\151\166\x65")) { goto e53ce; } $sync_ids = array_keys($sync["\x72\145\143\157\x72\x64\163"]); e53ce: Ec75c: if ($sync["\144\145\x6c\145\164\145"]) { goto Dc3f7; } if (!(!empty($nullable_key) && !empty($this->table_columns[$nullable_table]["\143\x6f\x6c\x75\x6d\156\x73"][$nullable_key]["\156\x75\x6c\154"]))) { goto bdca6; } $this->validation_errors[$this->_lang("\155\x65\164\x68\x6f\144\137\x63\150\x61\x69\x6e")][$this->_lang("\163\x79\x6e\x63")] = "{$nullable_table}\x2e{$nullable_key}\40" . $this->_lang("\156\x6f\164\137\x6e\165\154\x6c\141\x62\x6c\x65"); return FALSE; bdca6: Dc3f7: $repo = new self($this->init_config); $record_ids = $repo->table($sync_table)->where_in($sync_table_primary_key, $sync_ids)->get(); $repo->close(); $repo = NULL; $db_ids = array_column($record_ids, $sync_table_primary_key); if (!(count($db_ids) != count($sync_ids))) { goto fc134; } $non_existing_ids = array_diff($sync_ids, $db_ids); $non_existing_ids_string = implode("\54", $non_existing_ids); $this->validation_errors[$this->_lang("\155\x65\x74\x68\x6f\144\x5f\143\x68\141\151\x6e")][$this->_lang("\163\171\x6e\x63")] = "{$sync_table}\56{$sync_table_primary_key}\x20\75\40{$non_existing_ids_string}\x20" . $this->_lang("\x6e\157\x74\137\145\170\151\163\x74"); return FALSE; fc134: if (!($sync["\x74\x79\160\145"] == "\155\x61\156\x79\137\164\157\x5f\x6d\x61\156\x79")) { goto D2b70; } $records = $sync["\x72\145\143\157\162\144\163"]; if (!($sync["\x69\x64\137\164\x79\160\x65"] == "\x69\156\x74\x65\147\x65\x72")) { goto B8da3; } $records = []; $records[$sync["\162\x65\143\x6f\x72\144\x73"]] = []; B8da3: if (!($sync["\151\x64\137\x74\x79\x70\x65"] == "\163\145\161\x75\x65\x6e\x74\151\x61\154")) { goto bbc2f; } $records = []; foreach ($sync["\x72\145\x63\157\x72\x64\x73"] as $record) { $records[$record] = []; aa106: } c1879: bbc2f: $this->_get_table_columns(); $rules = []; foreach ($records as $key => $record) { $columns = $this->table_columns[$sync["\160\151\166\157\x74\137\164\x61\x62\154\145"]]["\143\157\154\165\x6d\x6e\x73"]; foreach ($columns as $column) { $column["\x76\141\x6c\x69\x64\x61\164\x69\x6f\x6e\137\156\141\x6d\x65"] = "{$key}\133{$column["\156\141\x6d\x65"]}\135"; if ($column["\x6e\x61\x6d\x65"] == $sync["\160\151\x76\x6f\x74\x5f\x72\x65\146\x65\162\145\x6e\143\x69\156\147\x5f\x6b\145\x79"] || $column["\x6e\141\x6d\145"] == $sync["\x72\145\146\145\x72\x65\156\x63\151\x6e\147\137\153\x65\171"]) { goto c1e5b; } $rules[$column["\166\141\x6c\x69\144\141\x74\x69\x6f\156\137\x6e\x61\x6d\x65"]] = $this->_create_validation($record, $sync["\160\x69\166\x6f\164\x5f\164\x61\x62\x6c\145"], $column, "\x61\x64\x64"); goto efc98; c1e5b: $rules[$column["\x76\141\154\151\x64\141\x74\151\157\156\x5f\x6e\141\x6d\x65"]] = $this->_create_validation($record, $sync["\160\x69\x76\x6f\x74\x5f\x74\x61\142\154\x65"], $column, "\x61\x64\x64", "\x6e\157\164\x5f\162\145\161\x75\151\x72\x65\x64"); efc98: e4cfc: } a60ad: F4b56: } C3836: if (!($this->validate($records, $rules) === FALSE)) { goto c4e41; } return FALSE; c4e41: D2b70: c9a01: } d0309: return TRUE; } private function _validate_sync_new() { if (empty($this->sync_new_tables)) { goto b7b52; } foreach ($this->sync_new_tables as $key => $sync) { $rules = $this->_related_validation($sync, $sync["\x72\x65\143\157\x72\x64\163"][$key], $key); if (!($this->validate($sync["\x72\145\143\x6f\x72\144\x73"], $rules) === FALSE)) { goto dccd8; } return FALSE; dccd8: eca17: } c96ce: b7b52: return TRUE; } private function _attach_to_record($record) { $primary_key = $this->_get_primary_key($this->table); $primary_key_value = $record[$primary_key]; foreach ($this->attach_tables as $attach) { $rename = $attach["\x72\x65\x6e\x61\x6d\145"]; $attached_keys = $attach["\x69\x64\x73"]; if (!($attach["\x74\x79\160\145"] == "\146\x6f\x72\x65\151\147\x6e\x5f\x6b\x65\x79")) { goto a1042; } $referenced_key_value = $record[$attach["\x72\x65\x66\x65\162\x65\x6e\x63\x65\x64\x5f\153\x65\171"]]; $pk = $this->_get_primary_key($attach["\x74\141\x62\x6c\x65"]); $this->table($attach["\x74\x61\x62\154\x65"])->where_in($pk, $attach["\151\x64\x73"])->update([$attach["\x72\145\x66\x65\162\x65\156\x63\x69\x6e\147\137\153\145\171"] => $referenced_key_value]); a1042: if (!($attach["\x74\171\160\x65"] == "\x69\x6e\166\x65\x72\x73\x65\x5f\162\x65\x6c\x61\164\x69\x6f\156")) { goto b7a8f; } $attach_primary_key = $this->_get_primary_key($attach["\x74\141\142\x6c\145"]); $repo = new self($this->init_config); $recs = $repo->table($attach["\164\x61\142\x6c\x65"])->where_in($attach_primary_key, $attach["\151\x64\x73"])->get(); $repo = NULL; $reference_keys = []; foreach ($recs as $rec) { $reference_keys[$rec[$attach_primary_key]] = $rec[$attach["\x72\145\x66\145\162\x65\156\x63\151\156\x67\x5f\153\x65\x79"]]; f69d7: } Fd401: $pk = $this->_get_primary_key($attach["\x72\145\x6c\x61\164\145\144\137\164\141\x62\x6c\145"]); $last_id = $attach["\x69\144\163"][count($attach["\x69\x64\163"]) - 1]; $this->table($attach["\x72\x65\x6c\141\164\x65\144\137\x74\x61\x62\154\x65"])->where($pk, $record[$pk])->update([$attach["\162\x65\x66\x65\162\x65\156\143\x65\144\137\x6b\x65\171"] => $reference_keys[$last_id]]); $attached_keys = [$last_id]; b7a8f: if (!($attach["\164\171\x70\145"] == "\155\141\156\171\x5f\x74\157\137\155\x61\156\171")) { goto ec45c; } $attach_primary_key = $this->_get_primary_key($attach["\164\141\x62\154\x65"]); $repo = new self($this->init_config); $recs = $repo->table($attach["\x74\141\142\154\145"])->where_in($attach_primary_key, $attach["\x69\x64\x73"])->get(); $repo = NULL; $reference_keys = []; foreach ($recs as $rec) { $reference_keys[$rec[$attach_primary_key]] = $rec[$attach["\160\x69\166\157\x74\137\162\145\x66\145\x72\145\x6e\143\x65\x64\137\153\x65\171"]]; F4660: } B49cf: $records = []; $referenced_key_value = $record[$attach["\162\145\x66\x65\162\x65\x6e\143\x65\x64\137\x6b\145\x79"]]; if (!($attach["\x69\x64\x5f\164\x79\x70\145"] == "\x73\145\x71\x75\145\156\164\x69\141\154" || $attach["\x69\x64\x5f\x74\171\160\x65"] == "\151\x6e\164\x65\x67\x65\162")) { goto Ff816; } foreach ($attach["\151\144\x73"] as $id) { $records[] = [$attach["\162\x65\146\145\162\x65\x6e\x63\x69\x6e\x67\137\153\145\171"] => $referenced_key_value, $attach["\x70\151\166\x6f\x74\137\162\145\x66\x65\162\x65\156\143\x69\x6e\147\x5f\153\145\x79"] => $reference_keys[$id]]; E3141: } cbfd6: $this->table($attach["\x70\151\166\157\x74\x5f\x74\141\142\154\x65"])->add($records); Ff816: if (!($attach["\151\144\x5f\x74\x79\x70\145"] == "\x61\163\x73\x6f\x63\151\x61\164\x69\x76\145")) { goto f9803; } foreach ($attach["\162\145\143\157\x72\x64\163"] as $id => $record) { if (is_array($record)) { goto C7ddf; } $record = [$attach["\x72\145\146\145\x72\145\x6e\x63\x69\x6e\x67\137\153\x65\171"] => $referenced_key_value, $attach["\x70\151\166\157\x74\x5f\162\145\146\x65\162\x65\x6e\143\151\x6e\147\137\153\145\x79"] => $reference_keys[$id]]; goto cbf8e; C7ddf: $record[$attach["\x72\x65\146\145\162\x65\x6e\x63\151\x6e\147\137\x6b\145\171"]] = $referenced_key_value; $record[$attach["\160\x69\166\157\164\137\162\145\x66\x65\x72\145\x6e\x63\151\x6e\x67\x5f\153\145\x79"]] = $reference_keys[$id]; cbf8e: $pivot_fractal = $this->_get_create_fractal($attach["\160\x69\x76\x6f\x74\137\164\x61\142\154\x65"]); $insert_record = $pivot_fractal($record); $this->insert($attach["\160\151\x76\x6f\164\x5f\164\x61\142\154\x65"], $insert_record); Cc498: } ba7e5: f9803: ec45c: if (!empty($this->all_attached_records[$primary_key_value][$rename])) { goto e18b3; } $pk = $this->_get_primary_key($attach["\x74\x61\x62\154\145"]); $options = ["\x72\145\156\141\155\x65" => "\141\164\164\141\143\150\145\x64\137" . $rename, "\160\x69\166\157\x74\137\164\x61\142\x6c\145" => $attach["\x70\151\x76\x6f\164\137\x74\141\x62\x6c\145"], "\x72\145\146\x65\162\145\156\143\151\x6e\147\x5f\153\145\171" => $attach["\162\x65\146\x65\162\x65\x6e\x63\151\156\147\x5f\x6b\x65\171"], "\162\x65\x66\x65\162\x65\156\143\145\144\137\x6b\x65\171" => $attach["\x72\x65\146\x65\162\x65\x6e\x63\145\144\137\x6b\x65\171"], "\160\151\x76\x6f\x74\x5f\162\145\x66\x65\162\x65\x6e\x63\x69\x6e\x67\137\x6b\145\171" => $attach["\x70\x69\x76\157\164\137\x72\x65\x66\145\x72\145\156\x63\151\156\147\x5f\153\145\171"], "\160\x69\166\x6f\x74\137\x72\x65\146\x65\162\x65\156\x63\145\x64\x5f\x6b\145\171" => $attach["\160\x69\166\x6f\164\x5f\162\145\146\145\x72\x65\156\143\145\x64\x5f\x6b\145\x79"]]; $this->all_attached_records[$primary_key_value][$rename] = ["\153\145\171" => $pk, "\162\145\x6e\x61\155\145" => "\141\164\x74\141\x63\150\145\x64\137" . $rename, "\141\x63\x74\165\141\x6c\137\156\x61\x6d\x65" => $attach["\x74\x61\x62\x6c\x65"], "\x6b\x65\171\163" => $attached_keys, "\157\x70\164\x69\157\156\x73" => $options]; goto C6a57; e18b3: $saved_attached_records = $this->all_attached_records[$primary_key_value][$rename]["\x6b\145\x79\x73"]; $this->all_attached_records[$primary_key_value][$rename]["\x6b\x65\171\163"] = array_merge($saved_attached_records, $attached_keys); C6a57: B7c65: } Dd96b: } private function _detach_to_record($record) { $primary_key = $this->_get_primary_key($this->table); $primary_key_value = $record[$primary_key]; $repo = new self($this->init_config); foreach ($this->detach_tables as $detach) { $rename = $detach["\x72\145\x6e\x61\x6d\145"]; if (!($detach["\164\x79\160\145"] == "\146\x6f\162\145\151\147\x6e\x5f\x6b\x65\x79")) { goto D4bbc; } $pk = $this->_get_primary_key($detach["\x74\141\x62\x6c\145"]); $referenced_key_value = $record[$detach["\162\145\x66\145\x72\145\x6e\143\x65\x64\x5f\153\145\x79"]]; $repo = new self($this->init_config); $detached_records = $repo->table($detach["\x74\x61\x62\154\145"])->where($detach["\162\145\146\145\x72\145\156\143\151\x6e\147\x5f\153\x65\x79"], $referenced_key_value)->where_in($pk, $detach["\x69\x64\163"])->get(); $repo = NULL; $repo->table($detach["\x74\x61\x62\x6c\145"])->where($detach["\x72\145\146\x65\162\x65\x6e\x63\x69\156\147\x5f\153\x65\x79"], $referenced_key_value)->where_in($pk, $detach["\x69\144\163"])->update([$detach["\x72\x65\x66\145\162\x65\x6e\x63\x69\x6e\x67\137\x6b\x65\171"] => NULL]); $repo->close(); $repo = NULL; D4bbc: if (!($detach["\164\171\x70\x65"] == "\151\156\166\145\162\163\145\137\x72\x65\x6c\x61\164\x69\157\x6e")) { goto A1cd9; } $detach_primary_key = $this->_get_primary_key($detach["\x74\x61\x62\x6c\145"]); $pk = $this->_get_primary_key($detach["\x72\145\x6c\x61\164\145\144\137\x74\141\142\x6c\x65"]); $referenced_key_value = $record[$detach["\162\x65\x66\145\x72\145\156\143\145\144\137\x6b\145\171"]]; $recs = $repo->table($detach["\x74\141\x62\x6c\145"])->where_in($detach_primary_key, $detach["\151\x64\163"])->get(); $reference_keys = []; foreach ($recs as $rec) { $reference_keys[$rec[$detach_primary_key]] = $rec[$detach["\x72\145\x66\x65\x72\145\x6e\x63\x69\x6e\147\x5f\153\145\x79"]]; aab0c: } a67ff: $detached_records = $repo->table($detach["\x74\141\x62\154\145"])->where($detach["\x72\x65\x66\x65\x72\x65\156\143\151\156\147\x5f\153\145\x79"], $referenced_key_value)->where_in($detach["\162\x65\x66\145\x72\x65\156\x63\151\156\147\137\x6b\145\x79"], $reference_keys)->get(); $this->table($detach["\x72\x65\x6c\141\x74\145\144\137\164\141\142\x6c\145"])->where($pk, $record[$pk])->where_in($detach["\162\145\146\145\x72\145\x6e\x63\x65\144\137\153\x65\171"], $reference_keys)->update([$detach["\x72\145\x66\145\x72\x65\156\x63\x65\x64\137\x6b\x65\x79"] => NULL]); A1cd9: if (!($detach["\x74\171\160\x65"] == "\155\141\x6e\171\137\164\x6f\x5f\155\141\x6e\171")) { goto caa98; } $detach_primary_key = $this->_get_primary_key($detach["\x74\141\142\154\145"]); $repo = new self($this->init_config); $recs = $repo->table($detach["\164\141\x62\154\145"])->where_in($detach_primary_key, $detach["\151\x64\163"])->get(); $repo = NULL; $reference_keys = []; foreach ($recs as $rec) { $reference_keys[$rec[$detach_primary_key]] = $rec[$detach["\160\x69\x76\157\x74\137\x72\x65\x66\x65\162\x65\156\143\x65\x64\137\x6b\145\171"]]; e8e33: } E7d62: $referenced_key_value = $record[$detach["\x72\x65\146\145\162\x65\x6e\143\x65\144\x5f\153\x65\x79"]]; $repo = new self($this->init_config); $detached_records = $repo->table($detach["\162\x65\154\x61\x74\145\144\x5f\164\x61\142\154\x65"])->find($primary_key_value, $detach["\164\x61\142\x6c\x65"])->where_in($detach["\160\x69\166\x6f\164\x5f\x72\x65\146\x65\162\x65\x6e\143\x65\144\x5f\153\145\171"], $reference_keys)->get(); $repo = NULL; $this->table($detach["\160\x69\x76\157\164\137\x74\x61\x62\x6c\145"])->where($detach["\162\x65\x66\x65\x72\x65\156\143\151\156\x67\137\153\x65\171"], $referenced_key_value)->where_in($detach["\160\x69\166\x6f\x74\x5f\162\x65\146\145\x72\x65\x6e\x63\x69\x6e\x67\x5f\153\x65\171"], $reference_keys)->delete(); caa98: if (!empty($this->all_detached_records[$primary_key_value]["\x64\x65\164\141\x63\150\145\144\x5f" . $detach["\x72\145\x6e\x61\155\145"]])) { goto cb4d5; } if (empty($detached_records)) { goto D8635; } $this->all_detached_records[$primary_key_value]["\144\145\164\141\143\x68\x65\144\x5f" . $detach["\162\145\x6e\141\155\x65"]] = $detached_records; D8635: goto ef926; cb4d5: $saved_detached_records = $this->all_detached_records[$primary_key_value]["\x64\145\164\141\x63\x68\x65\144\137" . $detach["\x72\145\156\x61\x6d\x65"]]; $this->all_detached_records[$primary_key_value]["\x64\145\x74\141\143\150\145\144\137" . $detach["\x72\x65\x6e\x61\x6d\145"]] = array_merge($saved_detached_records, $detached_records); ef926: de06f: } A84b6: } private function _sync_to_record($sync_tables, $record, $delete = FALSE) { $primary_key = $this->_get_primary_key($this->table); $primary_key_value = $record[$primary_key]; foreach ($sync_tables as $sync) { $rename = $sync["\x72\x65\156\141\x6d\145"]; $synced_keys = $sync["\151\144\x73"]; $pk = $this->_get_primary_key($sync["\x74\x61\142\154\x65"]); if (!($sync["\164\x79\x70\145"] == "\146\x6f\x72\x65\151\147\x6e\137\x6b\x65\x79")) { goto bdd92; } $referenced_key_value = $record[$sync["\162\145\146\x65\x72\145\x6e\143\x65\x64\137\x6b\145\x79"]]; $repo = new self($this->init_config); $detached_records = $repo->table($sync["\x74\x61\142\x6c\x65"])->where($sync["\x72\x65\146\x65\162\145\x6e\143\x69\x6e\147\x5f\x6b\145\171"], $referenced_key_value)->where_not_in($pk, $sync["\x69\144\163"])->get(); $repo = NULL; $repo = new self($this->init_config); $attached_records = $repo->table($sync["\x74\x61\142\x6c\145"])->where($sync["\162\x65\x66\145\x72\x65\x6e\x63\x69\156\x67\x5f\x6b\145\171"], $referenced_key_value)->where_in($pk, $sync["\151\144\163"])->get(); $repo = NULL; $sync_attached_keys = !empty($attached_records) ? [] : $sync["\151\x64\x73"]; if ($sync["\144\x65\x6c\x65\164\x65"]) { goto a35cc; } $this->table($sync["\164\141\x62\154\x65"])->where($sync["\x72\145\x66\x65\162\145\x6e\143\151\x6e\147\137\153\145\x79"], $referenced_key_value)->where_not_in($pk, $sync["\x69\x64\x73"])->update([$sync["\x72\145\146\145\162\x65\156\143\151\156\147\x5f\x6b\x65\171"] => NULL]); a35cc: $this->table($sync["\164\141\142\x6c\145"])->where_in($pk, $sync["\x69\x64\x73"])->update([$sync["\x72\145\x66\145\162\145\156\x63\x69\156\147\x5f\153\x65\x79"] => $referenced_key_value]); if (!$sync["\x64\x65\154\145\x74\145"]) { goto F77de; } $detach_ids = array_column($detached_records, $pk); if (empty($detach_ids)) { goto b30f4; } try { $this->where_in($pk, $detach_ids)->delete($sync["\164\141\x62\x6c\145"]); } catch (Exception $e) { $this->mysqli->rollback(); $this->validation_errors[$this->_lang("\144\141\x74\x61\x62\141\163\x65")][$this->_lang("\x65\x78\x63\x65\160\x74\x69\x6f\x6e")] = $this->_lang("\143\x61\156\156\157\x74\137\144\145\154\145\x74\x65\x5f\146\x72\x6f\x6d") . "\x20{$sync["\x72\145\x6c\141\x74\145\144\x5f\x74\141\x62\x6c\145"]}\40" . $this->_lang("\x63\157\156\163\164\162\141\151\156\164\137\166\151\157\154\141\x74\151\157\x6e"); return FALSE; } b30f4: F77de: bdd92: if (!($sync["\164\171\x70\145"] == "\x69\156\x76\145\x72\163\x65\x5f\162\145\x6c\x61\x74\x69\157\x6e")) { goto D6390; } $related_pk = $this->_get_primary_key($sync["\x72\x65\154\x61\x74\145\x64\x5f\x74\x61\x62\x6c\145"]); $record_id = $record[$related_pk]; $referenced_key_value = $record[$sync["\162\145\x66\145\162\145\156\143\145\144\x5f\153\145\171"]]; $last_id = $sync["\x69\x64\x73"][count($sync["\x69\x64\163"]) - 1]; $repo = new self($this->init_config); $recs = $repo->table($sync["\x74\141\x62\154\x65"])->where_in($pk, $sync["\151\144\x73"])->get(); $repo = NULL; $reference_keys = []; foreach ($recs as $rec) { $reference_keys[$rec[$pk]] = $rec[$sync["\x72\x65\146\x65\162\x65\x6e\143\151\x6e\x67\137\153\145\171"]]; A8c41: } c7c03: $detached_records = []; if (!($referenced_key_value != $reference_keys[$last_id])) { goto B0bed; } $repo = new self($this->init_config); $detached_records = $repo->table($sync["\x74\x61\142\154\x65"])->where($sync["\162\x65\146\145\x72\145\156\143\151\156\x67\x5f\x6b\x65\x79"], $referenced_key_value)->get(); $repo = NULL; B0bed: $attached_records = []; if (!($referenced_key_value != $reference_keys[$last_id])) { goto C44e0; } $repo = new self($this->init_config); $attached_records = $repo->table($sync["\164\x61\142\x6c\x65"])->where($pk, $last_id)->get(); $repo = NULL; C44e0: $sync_attached_keys = array_column($attached_records, $pk); if (!$sync["\144\145\154\145\x74\x65"]) { goto c73f3; } $detach_ids = array_column($detached_records, $pk); if (empty($detach_ids)) { goto f4dac; } try { $this->where_in($pk, $detach_ids)->delete($sync["\164\x61\142\154\145"]); } catch (Exception $e) { $this->mysqli->rollback(); $this->validation_errors[$this->_lang("\x64\x61\164\141\142\141\163\145")][$this->_lang("\x65\170\143\145\160\164\151\x6f\x6e")] = $this->_lang("\143\141\156\x6e\x6f\x74\x5f\144\145\x6c\145\164\145\x5f\x66\162\157\x6d") . "\x20{$sync["\162\145\154\x61\164\x65\144\x5f\164\141\x62\154\x65"]}\x20" . $this->_lang("\x63\x6f\x6e\x73\164\162\141\151\156\x74\137\166\x69\x6f\154\x61\x74\x69\157\156"); return FALSE; } f4dac: c73f3: $this->table($sync["\162\145\154\141\164\x65\x64\137\164\x61\142\154\145"])->where($related_pk, $record_id)->update([$sync["\162\145\146\145\162\x65\x6e\143\x65\144\137\153\145\x79"] => $reference_keys[$last_id]]); D6390: if (!($sync["\x74\x79\x70\x65"] == "\x6d\141\156\171\137\x74\157\x5f\155\x61\x6e\171")) { goto F4f2f; } $referenced_key_value = $record[$sync["\x72\145\x66\145\162\x65\x6e\143\145\144\137\153\x65\171"]]; $repo = new self($this->init_config); $recs = $repo->table($sync["\x74\141\x62\154\145"])->where_in($pk, $sync["\151\x64\x73"])->get(); $repo = NULL; $reference_keys = []; foreach ($recs as $rec) { $reference_keys[$rec[$pk]] = $rec[$sync["\160\151\166\157\x74\x5f\162\x65\146\145\162\145\x6e\x63\145\x64\137\x6b\145\x79"]]; De8d2: } C4991: $repo = new self($this->init_config); $detached_records = $repo->table($sync["\x72\x65\154\x61\x74\145\144\x5f\x74\141\142\x6c\x65"])->find($primary_key_value, $sync["\164\141\x62\154\145"], ["\x72\x65\x66\145\162\x65\156\143\151\156\x67\x5f\153\145\171" => $sync["\x72\145\x66\145\162\x65\156\x63\x69\x6e\x67\137\153\145\171"], "\x72\145\x66\x65\x72\x65\156\143\x65\x64\x5f\153\x65\x79" => $sync["\x72\x65\x66\x65\162\145\156\143\145\144\x5f\153\x65\171"], "\160\151\166\x6f\164\137\x74\141\142\154\x65" => $sync["\x70\x69\x76\157\x74\x5f\164\x61\x62\x6c\145"], "\x70\151\x76\x6f\164\x5f\x72\145\x66\145\x72\x65\x6e\143\x69\156\x67\x5f\x6b\x65\171" => $sync["\x70\151\x76\x6f\x74\x5f\162\145\146\x65\162\x65\x6e\x63\x69\x6e\147\137\153\x65\171"], "\x70\151\166\157\164\137\162\145\x66\145\162\145\x6e\x63\145\x64\x5f\x6b\145\171" => $sync["\x70\151\166\157\x74\137\162\x65\146\145\x72\x65\x6e\143\145\144\x5f\x6b\145\x79"]])->where_not_in($sync["\160\x69\x76\157\164\137\x72\145\x66\x65\162\145\156\143\x65\x64\x5f\x6b\x65\171"], $reference_keys)->get(); $repo = NULL; $this->where($sync["\x72\145\146\145\162\145\156\143\151\156\x67\137\x6b\145\171"], $referenced_key_value)->where_not_in($sync["\160\x69\166\x6f\x74\x5f\x72\x65\x66\x65\162\x65\x6e\x63\151\x6e\147\137\x6b\145\x79"], $reference_keys)->delete($sync["\160\151\x76\x6f\164\137\x74\141\x62\x6c\x65"]); $repo = new self($this->init_config); $remaining = $repo->table($sync["\160\x69\166\x6f\164\x5f\164\141\x62\154\x65"])->where($sync["\162\145\x66\x65\x72\145\156\x63\x69\156\147\x5f\153\145\x79"], $referenced_key_value)->get(); $repo = NULL; $remaining_ids = array_column($remaining, $sync["\x70\x69\166\x6f\x74\x5f\162\145\146\145\162\145\x6e\x63\151\x6e\x67\137\153\145\171"]); $records = []; $sync_attached_keys = []; $sync_updated_keys = []; if (!($sync["\151\144\x5f\x74\x79\160\x65"] == "\163\x65\x71\x75\x65\x6e\x74\x69\141\x6c" || $sync["\151\x64\x5f\x74\171\x70\145"] == "\151\156\x74\x65\147\x65\x72")) { goto dd44c; } foreach ($reference_keys as $k => $id) { if (in_array($id, $remaining_ids)) { goto E02d2; } $records[] = [$sync["\x72\x65\x66\145\162\x65\x6e\143\151\x6e\147\x5f\153\x65\x79"] => $referenced_key_value, $sync["\160\x69\x76\157\164\x5f\162\x65\146\x65\162\x65\156\143\x69\156\x67\137\x6b\145\x79"] => $id]; $sync_attached_keys[] = $k; E02d2: Fd19e: } A24ca: if (empty($records)) { goto E1c34; } $this->table($sync["\160\x69\166\x6f\x74\137\x74\141\x62\154\x65"])->add($records); E1c34: dd44c: if (!($sync["\151\x64\137\164\171\160\x65"] == "\x61\x73\x73\x6f\x63\x69\141\164\x69\166\145")) { goto E75b1; } $pivot_mutator = $this->_get_create_fractal($sync["\x70\151\x76\157\x74\x5f\164\x61\142\154\145"]); foreach ($sync["\x72\145\x63\x6f\x72\x64\163"] as $id => $record) { if (!in_array($reference_keys[$id], $remaining_ids)) { goto b7ecd; } if (!is_array($record)) { goto c8e32; } $insert_record = $pivot_mutator($record); $this->table($sync["\160\151\166\157\164\x5f\x74\x61\x62\x6c\145"])->where($sync["\x72\145\x66\145\x72\x65\x6e\x63\151\x6e\x67\x5f\x6b\145\x79"], $referenced_key_value)->where($sync["\160\x69\x76\157\x74\137\x72\x65\146\145\162\145\x6e\143\151\156\x67\137\153\x65\171"], $reference_keys[$id])->update($insert_record); c8e32: $sync_updated_keys[] = $id; goto a4c35; b7ecd: if (is_array($record)) { goto Cd929; } $record = [$sync["\x72\x65\x66\145\x72\145\x6e\143\151\156\147\137\153\x65\171"] => $referenced_key_value, $sync["\160\x69\x76\x6f\x74\137\162\145\x66\x65\x72\145\x6e\143\x69\156\x67\137\153\x65\x79"] => $reference_keys[$id]]; goto A484e; Cd929: $record[$sync["\x72\x65\146\145\162\x65\156\x63\x69\x6e\147\x5f\153\145\171"]] = $referenced_key_value; $record[$sync["\160\151\166\157\164\x5f\162\145\x66\145\162\145\x6e\143\x69\x6e\x67\137\153\145\x79"]] = $reference_keys[$id]; A484e: $sync_attached_keys[] = $id; $insert_record = $pivot_mutator($record); $this->insert($sync["\x70\x69\x76\157\x74\x5f\x74\x61\142\x6c\x65"], $insert_record); a4c35: ed282: } F85b1: E75b1: if (!$sync["\x64\x65\154\x65\x74\145"]) { goto D96c1; } $detach_ids = array_column($detached_records, $pk); if (empty($detach_ids)) { goto Ec6e2; } try { $this->where_in($pk, $detach_ids)->delete($sync["\x74\141\x62\154\x65"]); } catch (Exception $e) { $this->mysqli->rollback(); $this->validation_errors[$this->_lang("\144\x61\x74\141\142\141\x73\145")][$this->_lang("\x65\x78\x63\x65\x70\x74\x69\x6f\156")] = $this->_lang("\x63\141\x6e\156\157\164\x5f\x64\x65\154\145\164\145\x5f\146\162\x6f\155") . "\40{$sync["\162\x65\154\141\164\x65\144\x5f\164\x61\x62\x6c\x65"]}\40" . $this->_lang("\143\157\x6e\x73\164\162\141\x69\156\x74\137\x76\151\157\154\x61\164\151\157\x6e"); return FALSE; } Ec6e2: D96c1: F4f2f: if (empty($sync_attached_keys)) { goto Ab54e; } if (!empty($this->all_attached_records[$primary_key_value]["\141\x74\164\141\x63\x68\x65\x64\137" . $rename])) { goto d674d; } $options = ["\x72\145\156\x61\x6d\145" => "\x61\x74\x74\141\143\x68\145\144\137" . $rename, "\162\x65\146\x65\162\145\156\143\x69\156\147\137\153\x65\171" => $sync["\162\x65\x66\x65\x72\145\x6e\x63\x69\156\147\137\153\145\171"], "\x72\x65\x66\x65\x72\x65\x6e\143\x65\144\137\x6b\145\171" => $sync["\162\x65\146\x65\162\x65\156\x63\x65\x64\137\x6b\x65\171"]]; if (!($sync["\164\x79\160\145"] == "\155\141\x6e\171\137\x74\x6f\137\x6d\x61\156\171")) { goto eb708; } $options["\x70\x69\166\x6f\x74\137\x74\141\142\154\x65"] = $sync["\x70\151\166\x6f\x74\137\164\141\142\154\145"]; $options["\x70\151\x76\x6f\x74\137\x72\x65\x66\145\162\x65\156\x63\x69\x6e\147\x5f\x6b\x65\x79"] = $sync["\x70\x69\166\x6f\x74\137\x72\145\146\145\x72\x65\x6e\x63\x69\x6e\x67\137\153\x65\171"]; $options["\x70\151\166\x6f\x74\x5f\x72\x65\146\x65\x72\x65\156\143\145\144\x5f\x6b\145\171"] = $sync["\160\151\x76\x6f\164\137\162\145\146\145\x72\145\156\x63\x65\144\x5f\x6b\145\x79"]; eb708: $this->all_attached_records[$primary_key_value]["\141\164\164\x61\x63\x68\x65\x64\137" . $rename] = ["\153\145\x79" => $pk, "\x72\145\x6e\141\x6d\145" => "\x61\x74\164\x61\x63\x68\145\144\x5f" . $rename, "\x61\x63\164\165\141\154\137\156\x61\x6d\145" => $sync["\x74\141\x62\154\x65"], "\x6b\x65\x79\163" => $sync_attached_keys, "\157\x70\x74\x69\x6f\x6e\163" => $options]; goto Cb5e2; d674d: $saved_attached_records = $this->all_attached_records[$primary_key_value]["\141\164\x74\141\143\150\145\144\x5f" . $rename]["\x6b\145\x79\163"]; $this->all_attached_records[$primary_key_value]["\x61\164\164\141\143\x68\x65\x64\137" . $rename]["\153\145\x79\x73"] = array_merge($saved_attached_records, $sync_attached_keys); Cb5e2: Ab54e: if (empty($sync_updated_keys)) { goto b5cf8; } if (!empty($this->all_updated_records[$primary_key_value]["\x75\x70\144\141\164\145\144\x5f" . $rename])) { goto F5d70; } $options = ["\162\x65\x6e\x61\155\x65" => "\x75\160\x64\x61\x74\x65\144\x5f" . $rename, "\x72\145\x66\x65\162\145\x6e\143\x69\156\147\137\153\145\171" => $sync["\x72\145\146\145\x72\x65\156\143\x69\x6e\147\x5f\153\x65\x79"], "\162\145\x66\x65\x72\x65\x6e\143\x65\x64\x5f\153\x65\171" => $sync["\x72\x65\x66\145\x72\x65\x6e\143\145\144\137\153\145\171"]]; if (!($sync["\x74\x79\x70\x65"] == "\x6d\x61\156\x79\x5f\x74\157\x5f\155\141\156\171")) { goto d62f2; } $options["\x70\151\x76\157\x74\x5f\x74\x61\142\x6c\x65"] = $sync["\x70\151\x76\x6f\x74\x5f\164\x61\x62\154\x65"]; $options["\x70\x69\166\157\164\x5f\162\145\146\x65\x72\145\156\x63\151\156\147\137\x6b\145\171"] = $sync["\x70\151\166\x6f\164\x5f\x72\145\x66\145\162\145\x6e\x63\151\156\x67\x5f\153\145\x79"]; $options["\x70\151\166\x6f\164\137\162\145\146\x65\162\x65\156\143\x65\144\x5f\153\x65\171"] = $sync["\160\x69\x76\x6f\164\x5f\x72\145\146\x65\x72\x65\x6e\143\145\144\137\153\145\x79"]; d62f2: $this->all_updated_records[$primary_key_value]["\165\x70\x64\141\x74\x65\144\x5f" . $rename] = ["\x6b\145\171" => $pk, "\162\145\156\141\155\145" => "\165\160\144\141\x74\145\x64\x5f" . $rename, "\x61\x63\164\165\x61\154\137\156\x61\155\145" => $sync["\164\141\142\154\145"], "\x6b\x65\171\x73" => $sync_updated_keys, "\x6f\160\x74\151\x6f\x6e\x73" => $options]; goto c2e6e; F5d70: $saved_updated_records = $this->all_updated_records[$primary_key_value]["\x75\160\144\141\164\x65\144\137" . $rename]["\153\x65\x79\x73"]; $this->all_updated_records[$primary_key_value]["\165\160\x64\x61\x74\145\x64\137" . $rename]["\153\x65\x79\163"] = array_merge($saved_updated_records, $sync_updated_keys); c2e6e: b5cf8: if (!empty($this->all_synced_records[$primary_key_value][$rename])) { goto Fb1a5; } $options = ["\x72\x65\156\x61\155\x65" => $rename, "\162\x65\146\x65\162\145\156\143\x69\156\x67\x5f\153\x65\x79" => $sync["\162\145\x66\145\x72\x65\156\x63\151\x6e\x67\x5f\x6b\x65\x79"], "\x72\145\x66\145\x72\145\x6e\143\x65\x64\x5f\153\145\171" => $sync["\x72\145\146\145\x72\145\x6e\143\x65\x64\137\153\145\x79"]]; if (!($sync["\164\x79\160\145"] == "\155\x61\x6e\x79\137\x74\x6f\137\155\141\x6e\x79")) { goto f12e1; } $options["\160\151\x76\x6f\x74\137\x74\x61\x62\154\x65"] = $sync["\x70\151\166\x6f\164\x5f\x74\x61\142\x6c\x65"]; $options["\160\151\166\157\x74\137\162\x65\146\145\162\145\x6e\143\151\x6e\x67\137\x6b\145\171"] = $sync["\160\151\x76\157\x74\137\162\x65\x66\145\x72\145\x6e\143\151\156\147\137\x6b\145\171"]; $options["\x70\151\x76\x6f\x74\137\x72\x65\x66\145\x72\x65\x6e\143\x65\144\137\153\x65\171"] = $sync["\160\151\166\x6f\x74\137\x72\145\x66\x65\162\x65\156\143\x65\144\137\153\x65\171"]; f12e1: $this->all_synced_records[$primary_key_value][$rename] = ["\153\145\x79" => $pk, "\x72\145\x6e\141\155\x65" => $rename, "\141\x63\x74\165\141\x6c\x5f\x6e\x61\155\145" => $sync["\164\x61\x62\x6c\x65"], "\153\145\171\x73" => $synced_keys, "\157\x70\164\151\157\156\163" => $options]; goto c628b; Fb1a5: $saved_synced_records = $this->all_synced_records[$primary_key_value][$rename]["\153\x65\171\163"]; $this->all_synced_records[$primary_key_value][$rename]["\x6b\x65\171\163"] = array_merge($saved_synced_records, $synced_keys); c628b: if (!empty($this->all_detached_records[$primary_key_value]["\x64\145\x74\x61\x63\x68\145\x64\x5f" . $sync["\162\145\x6e\141\155\x65"]])) { goto Cc3a4; } if (empty($detached_records)) { goto A19dc; } $this->all_detached_records[$primary_key_value]["\144\145\164\x61\x63\150\x65\x64\x5f" . $sync["\x72\145\156\x61\x6d\x65"]] = $detached_records; A19dc: goto A25b6; Cc3a4: $saved_detached_records = $this->all_detached_records[$primary_key_value]["\x64\x65\x74\x61\143\x68\145\x64\x5f" . $sync["\x72\x65\x6e\141\155\145"]]; $this->all_detached_records[$primary_key_value]["\x64\145\164\141\x63\x68\x65\144\x5f" . $sync["\x72\x65\x6e\x61\x6d\x65"]] = array_merge($saved_detached_records, $detached_records); A25b6: F9cf4: } d4bd2: } private function _attach_new_to_record($record, $attach, $rename) { $related_options = ["\x6d\x75\x74\x61\164\157\162\163" => [], "\x66\162\141\x63\x74\x61\154\x73" => NULL]; $pk = $this->_get_primary_key($attach["\162\x65\x6c\141\x74\145\144\x5f\x74\x61\x62\154\145"]); $record_id = $record[$pk]; $record_key = $record[$attach["\162\x65\146\x65\x72\145\156\x63\x65\144\x5f\153\x65\171"]]; if (!($attach["\164\171\160\145"] == "\x69\x6e\166\x65\162\x73\145\137\x72\x65\x6c\141\164\151\x6f\x6e")) { goto C11fd; } if (!($record[$attach["\x72\145\x66\x65\x72\x65\x6e\x63\145\x64\137\153\145\171"]] != NULL)) { goto A9a60; } if (!empty($this->all_detached_records[$record_id]["\144\145\x74\x61\143\150\145\x64\137" . $rename])) { goto fc7cd; } $this->all_detached_records[$record_id]["\144\x65\x74\141\x63\x68\145\x64\137" . $rename] = [$record]; goto E217d; fc7cd: $saved_detached_records = $this->all_detached_records[$record_id]["\144\x65\x74\x61\143\150\x65\x64\x5f" . $rename]; $this->all_detached_records[$record_id]["\x64\145\164\x61\143\150\145\x64\137" . $rename] = array_merge($saved_detached_records, [$record]); E217d: A9a60: C11fd: foreach ($attach["\162\x65\x63\157\x72\144\x73"][$rename] as $related) { $actual_name = $attach["\x74\141\x62\x6c\145"]; if (!($attach["\164\x79\x70\145"] == "\x66\x6f\x72\x65\151\147\x6e\x5f\x6b\145\x79")) { goto e42b3; } $related[$attach["\162\145\146\145\x72\145\156\143\151\156\x67\x5f\153\x65\x79"]] = $record_key; $insert_id = $this->_insert_related_records($rename, $actual_name, $record_id, $attach, $related, $related_options, $record_id); e42b3: if (!($attach["\164\x79\160\x65"] == "\151\x6e\x76\145\162\x73\145\x5f\162\x65\x6c\141\x74\x69\x6f\x6e")) { goto ba41a; } $insert_id = $this->_insert_related_records($rename, $actual_name, $record_id, $attach, $related, $related_options, $record_id); $primary_key = $this->_get_primary_key($attach["\164\x61\142\x6c\145"]); $related[$primary_key] = $insert_id; $this->table($attach["\x72\x65\154\x61\x74\x65\144\x5f\164\x61\142\x6c\x65"])->where($pk, $record_id)->update([$attach["\x72\145\146\x65\162\145\x6e\143\145\144\137\153\x65\171"] => $related[$attach["\162\145\x66\x65\x72\145\156\143\x69\156\147\137\153\145\x79"]]]); ba41a: if (!($attach["\164\x79\160\x65"] == "\x6d\141\x6e\x79\x5f\x74\157\137\155\x61\x6e\x79")) { goto b8d58; } $insert_id = $this->_insert_related_records($rename, $actual_name, $record_id, $attach, $related, $related_options, $record_key); b8d58: e5fb8: } e01c6: } private function _insert_related_records($rename, $actual_name, $main_id, $table, $record, $options, $parent_id = NULL) { $fractal = $this->_get_create_fractal($table["\x74\141\x62\154\145"]); $insert_record = $fractal($record); if (empty($table["\162\x65\154\141\164\x65\144\137\x74\x61\142\x6c\145\x73"])) { goto a3a53; } foreach ($table["\162\145\x6c\141\164\x65\x64\x5f\164\x61\x62\x6c\145\x73"] as $key => $with) { $related_options = ["\x6d\165\164\141\164\x6f\x72\x73" => !empty($options["\155\x75\164\141\x74\x6f\x72\163"][$key]) ? $options["\x6d\165\164\x61\164\157\162\x73"][$key] : [], "\x66\x72\141\143\x74\141\x6c\x73" => NULL]; if (!(!empty($record[$key]) || !empty($record[$with["\x74\141\x62\154\x65"]]))) { goto B18dc; } $use_key = array_key_exists($key, $record) ? $key : $with["\164\141\x62\x6c\145"]; foreach ($record[$use_key] as $related) { if (!($with["\x74\x79\x70\145"] == "\151\156\166\x65\162\163\x65\x5f\162\x65\154\141\x74\x69\x6f\156")) { goto C6e96; } $new_rename = $rename . "\x2e" . $key; $new_actual_name = $actual_name . "\56" . $with["\164\x61\142\x6c\x65"]; $inserted_id = $this->_insert_related_records($new_rename, $new_actual_name, $main_id, $with, $related, $related_options); $insert_record[$with["\162\x65\146\145\x72\x65\156\143\x65\x64\137\x6b\145\x79"]] = $inserted_id; C6e96: E369a: } fe09a: B18dc: C6373: } ad1ea: a3a53: if (!empty($insert_record)) { goto Bdf05; } $this->mysqli->rollback(); $this->validation_errors[$this->_lang("\x65\x72\162\157\162")][$this->_lang("\x65\x72\162\x6f\162")] = $this->_lang("\x75\x6e\141\x62\154\145\x5f\x74\x6f\x5f\x61\x64\x64\x5f\145\x6d\x70\x74\x79\137\x72\x65\x63\157\162\144"); return FALSE; Bdf05: $primary_key = $this->_get_primary_key($table["\164\x61\142\x6c\x65"]); $repo = new self($this->init_config); $added = $repo->table($table["\164\x61\x62\x6c\145"])->add($insert_record); $repo->close(); $repo = NULL; $record_id = isset($added[$primary_key]) ? $added[$primary_key] : NULL; if ($record_id) { goto ba9cc; } $record_id = $insert_record[$primary_key]; ba9cc: $insert_record[$primary_key] = $record_id; if (empty($table["\x70\151\x76\x6f\x74\x5f\x74\x61\142\154\x65"])) { goto E492c; } $this->_get_table_columns(); $pivot_fractal = $this->_get_create_fractal($table["\160\x69\166\x6f\x74\137\x74\141\142\x6c\x65"]); $pivot_record = !empty($record[$table["\160\151\166\x6f\164\x5f\x74\141\142\154\x65"]]) ? $record[$table["\x70\x69\166\157\x74\137\164\x61\x62\154\x65"]] : []; $pivot_record[$table["\x72\x65\x66\x65\162\145\x6e\x63\151\x6e\147\x5f\153\145\171"]] = $parent_id; $pivot_record[$table["\x70\x69\166\157\x74\x5f\x72\145\146\x65\162\145\156\143\151\156\147\x5f\x6b\145\171"]] = $insert_record[$table["\x70\x69\x76\157\x74\x5f\162\145\x66\x65\162\x65\x6e\143\145\144\137\153\145\171"]]; $insert_pivot_record = $pivot_fractal($pivot_record); $repo = new self($this->init_config); $repo->table($table["\x70\x69\x76\x6f\164\137\164\x61\142\154\x65"])->add($insert_pivot_record)->close(); $repo = NULL; E492c: if (!empty($this->inserted_records[$main_id][$rename])) { goto B416b; } $options = ["\x72\x65\156\x61\155\x65" => "\x61\164\164\141\143\150\x65\144\x5f" . $rename, "\160\x69\166\157\x74\137\x74\x61\x62\x6c\145" => $table["\x70\151\166\x6f\x74\137\x74\x61\142\x6c\145"], "\162\145\x66\145\162\x65\156\143\x69\156\x67\x5f\x6b\x65\x79" => $table["\x72\x65\146\145\x72\x65\x6e\143\x69\x6e\x67\137\153\x65\x79"], "\162\x65\146\145\x72\145\x6e\143\x65\x64\x5f\x6b\145\x79" => $table["\162\x65\x66\145\162\x65\x6e\143\x65\x64\137\153\x65\171"], "\160\151\166\x6f\164\137\x72\x65\x66\145\x72\x65\156\x63\151\156\147\137\x6b\145\x79" => $table["\160\151\166\157\164\x5f\162\x65\146\x65\162\145\x6e\x63\151\156\x67\137\x6b\145\171"], "\160\x69\x76\157\x74\x5f\x72\145\146\x65\x72\145\x6e\143\145\x64\x5f\153\x65\171" => $table["\160\151\x76\157\x74\137\162\x65\x66\145\x72\145\x6e\143\x65\144\137\153\145\x79"]]; $primary_key = $this->_get_primary_key($table["\x74\141\x62\154\x65"]); $this->inserted_records[$main_id][$rename] = ["\153\x65\x79" => $primary_key, "\162\x65\x6e\x61\155\x65" => $rename, "\x61\143\164\165\141\x6c\x5f\x6e\141\155\145" => $actual_name, "\153\145\x79\163" => [$record_id], "\x6f\160\164\151\157\x6e\163" => $options]; goto baa86; B416b: $this->inserted_records[$main_id][$rename]["\153\x65\x79\x73"][] = $record_id; baa86: if (empty($table["\162\145\x6c\x61\164\145\144\x5f\x74\141\142\154\145\x73"])) { goto ceb9c; } foreach ($table["\162\145\x6c\x61\x74\x65\144\137\x74\141\142\x6c\x65\163"] as $key => $with) { $related_options = ["\155\165\x74\x61\x74\x6f\162\163" => !empty($options["\x6d\x75\x74\141\x74\x6f\162\x73"][$key]) ? $options["\x6d\x75\x74\141\164\x6f\x72\163"][$key] : [], "\x66\162\x61\x63\x74\x61\154\x73" => NULL]; if (!(!empty($record[$key]) || !empty($record[$with["\x74\x61\x62\x6c\x65"]]))) { goto dfeeb; } $use_key = !empty($record[$key]) ? $key : $with["\164\141\142\154\145"]; foreach ($record[$use_key] as $related) { $new_rename = $rename . "\56" . $key; $new_actual_name = $actual_name . "\56" . $with["\x74\x61\142\154\145"]; if (!(empty($with["\160\x69\166\x6f\x74\x5f\164\141\142\x6c\x65"]) && $with["\x74\x79\x70\145"] == "\146\157\x72\x65\151\x67\x6e\x5f\x6b\145\171")) { goto E965a; } $record_reference_id = $insert_record[$with["\x72\x65\146\145\x72\145\x6e\x63\x65\144\x5f\x6b\145\171"]]; $related[$with["\162\x65\x66\x65\x72\x65\x6e\x63\x69\156\x67\137\153\145\x79"]] = $record_reference_id; $this->_insert_related_records($new_rename, $new_actual_name, $main_id, $table["\162\145\154\x61\x74\145\144\x5f\164\141\x62\x6c\x65\163"][$key], $related, $related_options); E965a: if (empty($with["\160\151\166\157\164\x5f\164\x61\142\x6c\x65"])) { goto A6908; } $record_reference_id = $insert_record[$with["\x72\145\x66\x65\162\145\x6e\143\x65\x64\x5f\153\x65\171"]]; $this->_insert_related_records($new_rename, $new_actual_name, $main_id, $with, $related, $related_options, $record_reference_id); A6908: Cdf46: } c12b2: dfeeb: C83c0: } a10e7: ceb9c: return $record_id; } private function _attach_new_to_all_records($records, $attach, $rename) { $related_options = ["\x6d\165\x74\x61\x74\x6f\162\x73" => [], "\x66\x72\141\x63\x74\x61\154\163" => NULL]; $pk = $this->_get_primary_key($attach["\x72\x65\x6c\141\x74\x65\x64\x5f\164\x61\142\154\145"]); $primary_keys = array_column($records, $pk); $last_id = $records[count($records) - 1][$pk]; $last_key = $records[count($records) - 1][$attach["\x72\145\146\x65\162\x65\156\143\x65\x64\x5f\x6b\145\171"]]; $last_key = $records[count($records) - 1][$attach["\162\145\x66\x65\162\145\x6e\143\x65\144\137\153\145\171"]]; if (!($attach["\x74\x79\x70\145"] == "\x69\156\x76\145\x72\x73\x65\137\x72\145\x6c\141\x74\151\x6f\156")) { goto C17dd; } foreach ($records as $rec) { $pkey = $rec[$pk]; if (!($rec[$attach["\162\145\146\x65\162\145\156\x63\145\144\137\153\x65\171"]] != NULL)) { goto ea1b6; } if (!empty($this->all_detached_records[$pkey]["\144\x65\x74\141\143\150\x65\x64\137" . $rename])) { goto bdf03; } $this->all_detached_records[$pkey]["\144\145\164\141\143\150\x65\x64\137" . $rename] = [$rec]; goto A6fb7; bdf03: $saved_detached_records = $this->all_detached_records[$pkey]["\144\x65\164\x61\143\x68\x65\144\137" . $rename]; $this->all_detached_records[$pkey]["\144\x65\x74\141\x63\150\x65\144\x5f" . $rename] = array_merge($saved_detached_records, [$rec]); A6fb7: ea1b6: B9e93: } Aa93f: C17dd: foreach ($attach["\162\x65\143\157\x72\144\163"][$rename] as $key => $related) { $actual_name = $attach["\x74\x61\142\x6c\145"]; if (!($attach["\164\x79\160\x65"] == "\x66\x6f\162\x65\151\147\x6e\137\153\x65\171")) { goto Bfc57; } $related[$attach["\162\145\146\145\x72\x65\156\x63\151\156\147\137\153\x65\171"]] = $last_key; $insert_id = $this->_insert_related_records($rename, $actual_name, $last_id, $attach, $related, $related_options, $last_id); Bfc57: if (!($attach["\164\x79\x70\145"] == "\151\x6e\x76\x65\162\x73\x65\x5f\162\145\x6c\x61\x74\x69\x6f\x6e")) { goto Cbbf4; } $insert_id = $this->_insert_related_records($rename, $actual_name, $last_id, $attach, $related, $related_options, $last_id); $primary_key = $this->_get_primary_key($attach["\164\x61\x62\154\145"]); $related[$primary_key] = $insert_id; $repo = new self($this->init_config); $repo->table($attach["\x72\145\x6c\x61\164\145\x64\137\x74\141\x62\x6c\x65"])->where_in($pk, $primary_keys)->update([$attach["\x72\145\x66\x65\162\145\156\x63\x65\144\x5f\153\x65\x79"] => $related[$attach["\x72\145\146\145\162\x65\x6e\143\x69\156\147\137\x6b\x65\x79"]]])->close(); $repo = NULL; Cbbf4: if (!($attach["\164\x79\x70\145"] == "\x6d\x61\156\x79\x5f\x74\x6f\137\x6d\141\156\x79")) { goto a962e; } $insert_id = $this->_insert_related_records($rename, $actual_name, $last_id, $attach, $related, $related_options, $last_key); a962e: a0934: } b378d: $copy = NULL; foreach ($primary_keys as $key => $pk) { if (!($attach["\164\x79\160\x65"] == "\x69\156\166\145\162\163\x65\137\x72\x65\x6c\x61\164\151\157\x6e")) { goto d502f; } $copy = $this->inserted_records[$last_id][$rename]; $this->inserted_records[$pk][$rename] = $copy; d502f: d9cba: } Da9d1: } private function _sync_new_to_record($record, $sync, $rename) { $related_options = ["\x6d\x75\164\141\164\157\x72\163" => [], "\x66\162\141\143\164\141\154\163" => NULL]; $pk = $this->_get_primary_key($sync["\162\x65\154\141\164\145\x64\137\164\x61\x62\x6c\145"]); $record_id = $record[$pk]; $record_key = $record[$sync["\162\145\x66\x65\x72\145\x6e\143\145\144\137\153\145\x79"]]; if (!($sync["\x74\x79\x70\145"] == "\146\x6f\162\145\151\147\x6e\137\153\145\171")) { goto b4b95; } $deleted = $this->table($sync["\x74\x61\142\154\145"])->where_in($sync["\x72\145\x66\145\162\145\x6e\143\x69\156\x67\x5f\153\145\x79"], $record_key)->get(); if ($sync["\x64\x65\x6c\x65\164\x65"]) { goto Af319; } $this->table($sync["\x74\141\x62\154\x65"])->where($sync["\x72\x65\146\x65\x72\x65\x6e\143\151\x6e\147\137\153\145\x79"], $record_key)->update([$sync["\162\145\146\145\x72\x65\156\143\151\156\147\137\153\x65\171"] => NULL]); goto a83c0; Af319: $this->table($sync["\x74\x61\x62\154\145"])->where($sync["\x72\x65\x66\x65\x72\145\x6e\143\x69\x6e\x67\137\x6b\145\171"], $record_key)->delete(); a83c0: if (!empty($this->all_detached_records[$record_id]["\144\x65\x74\141\x63\x68\x65\x64\137" . $rename])) { goto fec2a; } $this->all_detached_records[$record_id]["\144\x65\164\141\x63\150\x65\144\137" . $rename] = $deleted; goto d0df5; fec2a: $saved_detached_records = $this->all_detached_records[$record_id]["\x64\x65\164\x61\143\x68\x65\144\137" . $rename]; $this->all_detached_records[$record_id]["\x64\x65\164\141\143\150\x65\144\137" . $rename] = array_merge($saved_detached_records, $deleted); d0df5: b4b95: if (!($sync["\164\171\x70\x65"] == "\155\x61\x6e\x79\x5f\164\x6f\137\x6d\x61\x6e\x79")) { goto e6e95; } $primary_key = $this->_get_primary_key($sync["\164\141\142\x6c\x65"]); $repo = new self($this->init_config); $detached_records = $repo->table($sync["\x72\145\154\x61\164\x65\144\137\164\x61\x62\x6c\145"])->find($record_id, $sync["\x74\141\142\x6c\145"], ["\162\145\x66\x65\162\145\x6e\x63\x69\156\147\x5f\x6b\145\171" => $sync["\162\145\x66\145\x72\145\x6e\143\x69\156\x67\x5f\x6b\x65\x79"], "\162\x65\146\x65\162\x65\x6e\x63\145\144\x5f\x6b\x65\171" => $sync["\x72\145\146\x65\162\x65\x6e\x63\145\x64\x5f\x6b\x65\171"], "\x70\151\166\x6f\x74\137\164\141\x62\x6c\x65" => $sync["\160\151\x76\157\164\x5f\x74\x61\142\x6c\x65"], "\160\151\x76\157\x74\137\x72\145\x66\145\x72\x65\x6e\x63\x69\156\147\x5f\x6b\145\171" => $sync["\x70\x69\x76\157\x74\x5f\162\145\146\145\x72\145\156\x63\x69\x6e\x67\137\153\145\171"], "\x70\x69\166\157\x74\137\162\x65\x66\x65\x72\x65\156\x63\145\x64\137\x6b\145\171" => $sync["\x70\x69\166\x6f\164\x5f\162\145\x66\145\162\145\156\x63\145\x64\137\153\145\171"]])->get(); $repo = NULL; if ($sync["\144\145\x6c\x65\x74\x65"]) { goto C17f4; } try { $this->table($sync["\x70\x69\166\157\164\137\x74\x61\142\154\145"])->where($sync["\x72\x65\x66\145\x72\145\156\143\151\x6e\147\137\153\145\171"], $record_key)->delete(); } catch (Exception $ex) { $this->validation_errors[$this->_lang("\145\x72\162\157\x72")] = $ex->getMessage(); return FALSE; } goto bdcd3; C17f4: try { $related_ids = array_column($detached_records, $primary_key); $this->table($sync["\x74\141\x62\154\x65"])->where_in($primary_key, $related_ids)->delete(); } catch (Exception $ex) { $this->validation_errors[$this->_lang("\x73\x79\x6e\x63")][$this->_lang("\x65\170\x63\145\160\164\151\157\156")] = $ex->getMessage(); return FALSE; } bdcd3: if (!empty($this->all_detached_records[$record_id]["\144\x65\x74\141\143\150\145\144\x5f" . $rename])) { goto F7fbc; } $this->all_detached_records[$record_id]["\144\145\164\x61\143\150\145\144\137" . $rename] = $detached_records; goto e0059; F7fbc: $saved_detached_records = $this->all_detached_records[$record_id]["\x64\x65\164\x61\x63\150\145\144\x5f" . $rename]; $this->all_detached_records[$record_id]["\144\x65\164\x61\143\x68\x65\x64\137" . $rename] = array_merge($saved_detached_records, $detached_records); e0059: e6e95: if (!($sync["\164\x79\x70\x65"] == "\151\x6e\166\145\162\x73\145\x5f\x72\x65\154\141\x74\x69\157\156")) { goto c713c; } if (!($record[$sync["\162\145\146\145\x72\145\156\143\145\x64\137\x6b\x65\171"]] != NULL)) { goto e3ce9; } if (!empty($this->all_detached_records[$record_id]["\144\145\x74\x61\143\150\145\144\x5f" . $rename])) { goto Bfc7e; } $this->all_detached_records[$record_id]["\x64\145\x74\141\143\x68\x65\x64\137" . $rename] = [$record]; goto e344f; Bfc7e: $saved_detached_records = $this->all_detached_records[$record_id]["\x64\145\x74\x61\x63\x68\x65\144\x5f" . $rename]; $this->all_detached_records[$record_id]["\x64\145\x74\x61\143\150\145\x64\x5f" . $rename] = array_merge($saved_detached_records, [$record]); e344f: e3ce9: c713c: foreach ($sync["\x72\x65\143\157\x72\144\x73"][$rename] as $related) { $actual_name = $sync["\164\141\142\x6c\145"]; if (!($sync["\x74\171\x70\145"] == "\x66\157\162\x65\x69\x67\x6e\x5f\x6b\145\171")) { goto d8e77; } $related[$sync["\x72\145\x66\x65\x72\x65\156\x63\151\156\x67\137\153\145\171"]] = $record_key; $insert_id = $this->_insert_related_records($rename, $actual_name, $record_id, $sync, $related, $related_options, $record_id); d8e77: if (!($sync["\x74\171\x70\x65"] == "\151\x6e\166\x65\162\163\145\x5f\162\x65\x6c\x61\x74\151\x6f\156")) { goto Ffc30; } $insert_id = $this->_insert_related_records($rename, $actual_name, $record_id, $sync, $related, $related_options, $record_id); $primary_key = $this->_get_primary_key($sync["\164\x61\142\x6c\x65"]); $related[$primary_key] = $insert_id; $this->table($sync["\x72\145\154\141\164\145\x64\x5f\164\141\142\x6c\145"])->where($pk, $record_id)->update([$sync["\x72\x65\x66\x65\162\x65\156\143\x65\x64\x5f\153\x65\x79"] => $related[$sync["\162\145\x66\145\x72\145\x6e\x63\x69\x6e\147\x5f\x6b\145\x79"]]]); Ffc30: if (!($sync["\164\171\160\145"] == "\155\141\156\171\x5f\164\157\137\155\141\x6e\x79")) { goto Cdcc6; } $insert_id = $this->_insert_related_records($rename, $actual_name, $record_id, $sync, $related, $related_options, $record_key); Cdcc6: D04e4: } F409a: $copy = $this->inserted_records[$record_id][$rename]; $copy["\x6f\x70\x74\x69\x6f\156\163"]["\162\145\x6e\141\x6d\145"] = $rename; $this->all_synced_records[$record_id][$rename] = $copy; if (!$sync["\x64\145\154\x65\164\145"]) { goto c49cd; } if (!($sync["\x74\x79\160\145"] == "\151\156\x76\145\x72\163\x65\x5f\x72\145\x6c\141\164\x69\x6f\156")) { goto F304c; } try { $this->table($sync["\164\141\x62\x6c\x65"])->where($sync["\162\145\146\145\x72\x65\156\143\151\156\147\137\x6b\145\171"], $record_key)->delete(); } catch (Exception $ex) { $this->validation_errors[$this->_lang("\x73\171\x6e\x63")][$this->_lang("\x65\170\x63\145\x70\x74\151\x6f\x6e")] = $ex->getMessage(); return FALSE; } F304c: c49cd: } private function _sync_new_to_all_records($records, $sync, $rename) { $related_options = ["\155\x75\164\x61\x74\x6f\x72\163" => [], "\146\162\x61\143\164\x61\154\x73" => NULL]; $pk = $this->_get_primary_key($sync["\162\x65\x6c\x61\x74\145\x64\x5f\164\x61\142\x6c\x65"]); $primary_keys = array_column($records, $pk); $last_id = $records[count($records) - 1][$pk]; $last_key = $records[count($records) - 1][$sync["\x72\x65\x66\x65\x72\145\x6e\x63\x65\x64\137\x6b\x65\171"]]; $last_key = $records[count($records) - 1][$sync["\x72\x65\146\145\x72\x65\x6e\143\x65\144\x5f\x6b\x65\x79"]]; if (!($sync["\x74\x79\160\x65"] == "\146\157\x72\145\x69\147\x6e\x5f\153\x65\171")) { goto E26eb; } $record_keys = array_column($records, $sync["\x72\x65\146\145\162\x65\156\143\145\144\137\153\145\x79"]); $detached_records = $this->table($sync["\x74\x61\142\x6c\145"])->where_in($sync["\162\145\x66\x65\x72\145\156\x63\x69\156\147\x5f\153\x65\171"], $record_keys)->get(); if ($sync["\x64\x65\x6c\x65\164\145"]) { goto c3962; } $this->table($sync["\164\x61\142\x6c\145"])->where_in($sync["\x72\145\x66\145\x72\x65\x6e\143\x69\x6e\x67\x5f\x6b\x65\171"], $record_keys)->update([$sync["\162\x65\146\x65\x72\145\156\x63\x69\156\x67\x5f\x6b\x65\x79"] => NULL]); goto B843c; c3962: $this->table($sync["\164\x61\142\154\x65"])->where_in($sync["\x72\x65\x66\x65\162\145\156\143\x69\x6e\x67\x5f\x6b\145\171"], $record_keys)->delete(); B843c: if (!empty($this->all_detached_records[$last_id]["\144\x65\164\x61\x63\150\145\x64\x5f" . $rename])) { goto ab8a9; } $this->all_detached_records[$last_id]["\x64\x65\164\x61\x63\x68\x65\144\137" . $rename] = $detached_records; goto fee61; ab8a9: $saved_detached_records = $this->all_detached_records[$last_id]["\x64\x65\164\x61\143\x68\145\144\x5f" . $rename]; $this->all_detached_records[$last_id]["\144\145\164\x61\143\150\145\x64\x5f" . $rename] = array_merge($saved_detached_records, $detached_records); fee61: E26eb: if (!($sync["\164\171\160\145"] == "\155\141\x6e\x79\x5f\164\157\137\155\x61\x6e\171")) { goto f2096; } $primary_key = $this->_get_primary_key($sync["\x74\x61\142\x6c\x65"]); $repo = new self($this->init_config); $detached_records = $repo->table($sync["\x72\145\x6c\141\164\145\144\x5f\x74\x61\142\154\x65"])->find($last_id, $sync["\x74\x61\142\154\x65"], ["\162\145\x66\145\x72\x65\x6e\143\x69\156\x67\x5f\153\145\x79" => $sync["\162\x65\x66\x65\x72\x65\x6e\143\151\156\x67\137\x6b\x65\x79"], "\162\145\x66\145\x72\145\156\x63\145\x64\137\153\145\x79" => $sync["\x72\145\146\145\162\x65\156\x63\x65\x64\x5f\x6b\x65\171"], "\x70\151\166\x6f\x74\x5f\164\141\x62\x6c\x65" => $sync["\160\x69\166\157\x74\137\164\141\x62\154\145"], "\160\x69\166\157\164\x5f\x72\x65\x66\145\162\145\x6e\143\x69\156\147\x5f\x6b\145\171" => $sync["\160\x69\166\x6f\x74\137\162\145\x66\x65\162\145\x6e\143\151\156\x67\x5f\153\145\171"], "\x70\151\166\157\x74\137\x72\x65\x66\x65\162\x65\156\x63\x65\x64\x5f\x6b\x65\171" => $sync["\160\x69\166\157\164\x5f\162\x65\x66\145\x72\145\156\143\x65\144\x5f\153\x65\171"]])->get(); $repo = NULL; if ($sync["\144\x65\x6c\145\164\x65"]) { goto b7dba; } try { $this->table($sync["\160\151\x76\157\x74\x5f\x74\x61\142\x6c\145"])->where($sync["\162\x65\146\x65\x72\145\156\x63\x69\156\x67\x5f\153\x65\171"], $last_key)->delete(); } catch (Exception $ex) { $this->validation_errors[$this->_lang("\163\x79\156\143")][$this->_lang("\x65\x78\143\145\x70\164\151\157\x6e")] = $ex->getMessage(); return FALSE; } goto E45c1; b7dba: try { $related_ids = array_column($detached_records, $primary_key); $this->table($sync["\x74\x61\142\x6c\x65"])->where_in($primary_key, $related_ids)->delete(); } catch (Exception $ex) { $this->validation_errors[$this->_lang("\163\171\x6e\x63")][$this->_lang("\145\170\143\x65\160\x74\x69\x6f\156")] = $ex->getMessage(); return FALSE; } E45c1: if (!empty($this->all_detached_records[$last_id]["\x64\x65\164\141\x63\150\145\x64\137" . $rename])) { goto a7dc9; } $this->all_detached_records[$last_id]["\x64\145\164\141\x63\x68\x65\x64\x5f" . $rename] = $detached_records; goto d7293; a7dc9: $saved_detached_records = $this->all_detached_records[$last_id]["\x64\145\164\x61\x63\150\x65\144\137" . $rename]; $this->all_detached_records[$last_id]["\x64\145\x74\141\143\x68\x65\144\137" . $rename] = array_merge($saved_detached_records, $detached_records); d7293: f2096: $delete_keys = []; if (!($sync["\x74\171\160\x65"] == "\x69\156\166\145\x72\x73\145\137\162\145\x6c\141\164\151\x6f\x6e")) { goto Cf112; } foreach ($records as $rec) { $pkey = $rec[$pk]; if (!($rec[$sync["\162\145\x66\145\162\x65\156\143\145\144\x5f\x6b\x65\171"]] != NULL)) { goto E0b92; } $delete_keys[] = $rec[$sync["\162\x65\x66\145\162\145\156\x63\145\x64\137\153\145\171"]]; if (!empty($this->all_detached_records[$pkey]["\x64\x65\x74\x61\x63\x68\x65\144\137" . $rename])) { goto bb223; } $this->all_detached_records[$pkey]["\x64\145\x74\x61\143\x68\x65\x64\x5f" . $rename] = [$rec]; goto Fe630; bb223: $saved_detached_records = $this->all_detached_records[$pkey]["\144\145\164\x61\143\x68\x65\x64\137" . $rename]; $this->all_detached_records[$pkey]["\x64\x65\164\141\143\x68\x65\144\137" . $rename] = array_merge($saved_detached_records, [$rec]); Fe630: E0b92: b5b04: } e1760: Cf112: foreach ($sync["\x72\145\x63\157\162\x64\163"][$rename] as $key => $related) { $actual_name = $sync["\164\141\x62\154\x65"]; if (!($sync["\164\x79\x70\145"] == "\146\157\x72\x65\x69\147\x6e\137\x6b\x65\x79")) { goto f88d4; } $related[$sync["\162\145\146\x65\x72\145\156\143\151\x6e\x67\x5f\x6b\x65\x79"]] = $last_key; $insert_id = $this->_insert_related_records($rename, $actual_name, $last_id, $sync, $related, $related_options, $last_id); f88d4: if (!($sync["\164\171\x70\145"] == "\x69\x6e\x76\145\162\x73\x65\x5f\162\x65\x6c\141\x74\151\157\x6e")) { goto Ea8b9; } $insert_id = $this->_insert_related_records($rename, $actual_name, $last_id, $sync, $related, $related_options, $last_id); $primary_key = $this->_get_primary_key($sync["\164\141\142\154\x65"]); $related[$primary_key] = $insert_id; $this->table($sync["\x72\145\154\141\164\145\144\x5f\164\141\x62\154\x65"])->where_in($pk, $primary_keys)->update([$sync["\162\145\146\145\162\145\x6e\x63\x65\x64\x5f\153\x65\x79"] => $related[$sync["\162\x65\146\x65\x72\145\156\143\151\x6e\x67\137\153\x65\171"]]]); Ea8b9: if (!($sync["\x74\x79\160\145"] == "\x6d\x61\x6e\x79\x5f\x74\x6f\x5f\155\141\x6e\x79")) { goto c7ff8; } $insert_id = $this->_insert_related_records($rename, $actual_name, $last_id, $sync, $related, $related_options, $last_key); c7ff8: c7c06: } b1acd: $copy = NULL; foreach ($primary_keys as $key => $pk) { $copy = $this->inserted_records[$last_id][$rename]; $recopy = $copy; $recopy["\x6f\160\x74\x69\x6f\x6e\x73"]["\162\145\x6e\141\x6d\145"] = $rename; $this->all_synced_records[$pk][$rename] = $recopy; if (!($sync["\x74\171\160\x65"] == "\151\156\166\145\x72\163\145\137\x72\x65\154\141\164\151\157\x6e")) { goto Ea2b8; } $this->inserted_records[$pk][$rename] = $copy; Ea2b8: c32ab: } da41b: if (!$sync["\x64\145\x6c\145\x74\x65"]) { goto Db830; } if (!($sync["\x74\171\160\145"] == "\151\x6e\166\x65\162\163\x65\137\x72\145\154\141\164\151\157\156")) { goto E35fc; } try { $this->table($sync["\164\x61\142\x6c\145"])->where_in($sync["\x72\x65\x66\x65\x72\x65\156\x63\151\x6e\x67\x5f\x6b\145\x79"], $delete_keys)->delete(); } catch (Exception $ex) { $this->validation_errors[$this->_lang("\163\x79\156\x63")][$this->_lang("\145\170\x63\145\160\164\x69\157\x6e")] = $ex->getMessage(); return FALSE; } E35fc: Db830: } private function _get_create_fractal($table) { $table_columns = !empty($this->table_columns[$table]["\x63\157\x6c\165\x6d\156\163"]) ? $this->table_columns[$table]["\x63\157\x6c\x75\155\x6e\163"] : []; $fractal = static function ($rec) use($table_columns) { $arr = []; foreach ($table_columns as $key => $column) { if (!isset($rec[$key])) { goto Affd1; } $arr[$key] = $rec[$key]; Affd1: dad72: } Ad452: return $arr; }; return $fractal; } private function _update_related_records($rename, $actual_name, $main_id, $table, $record, $options) { $fractal = $this->_get_create_fractal($table["\x74\x61\x62\154\x65"]); $update_record = $fractal($record); $primary_key = $this->table_columns[$table["\x74\141\x62\x6c\145"]]["\x70\x72\x69\155\x61\x72\171\137\x6b\145\171"]; $record_id = $record[$primary_key]; $sql = "\125\120\x44\101\124\x45\x20\x3f\40\123\x45\124"; $params = "\x73\x73\163"; $args = []; foreach ($update_record as $key => $value) { $sql .= mysqli_real_escape_string($this->mysqli, $key) . "\x20\75\40\x3f"; $params .= "\x73"; $args[] = [mysqli_real_escape_string($this->mysqli, $value)]; A4d93: } df61e: $sql .= "\40\127\110\x45\x52\x45\40\77\x20\75\x20\77"; array_unshift($args, $params); $args[] = mysqli_real_escape_string($this->mysqli, $table["\x74\141\142\x6c\x65"]); $args[] = mysqli_real_escape_string($this->mysqli, $primary_key); $args[] = mysqli_real_escape_string($this->mysqli, $record_id); $stmt = $this->mysqli->prepare($sql); call_user_func_array([$stmt, "\x62\151\x6e\x64\x5f\160\141\162\141\155"], $args); $stmt->execute(); $stmt->close(); if (!empty($this->updated_records[$main_id][$rename])) { goto ac058; } $this->updated_records[$main_id][$rename] = ["\153\145\171" => $primary_key, "\x72\x65\156\141\x6d\145" => $rename, "\x61\x63\164\x75\x61\x6c\137\156\x61\x6d\145" => $actual_name, "\x6b\x65\x79\x73" => [$record_id]]; goto D0f05; ac058: $this->updated_records[$main_id][$rename]["\153\x65\171\x73"][] = $record_id; D0f05: if (empty($table["\x72\145\x6c\x61\x74\x65\x64\137\x74\x61\142\154\145\x73"])) { goto f99c4; } foreach ($table["\x72\x65\154\141\164\x65\x64\x5f\x74\141\142\x6c\145\163"] as $key => $with) { $related_options = ["\155\x75\x74\x61\164\157\162\163" => !empty($options["\x6d\165\x74\141\164\157\162\x73"][$key]) ? $options["\155\165\164\x61\x74\157\162\163"][$key] : [], "\x66\162\x61\143\x74\141\154\163" => NULL]; if (empty($record[$key])) { goto C2e4d; } foreach ($record[$key] as $related) { $new_rename = $rename . "\56" . $key; $new_actual_name = $actual_name . "\x2e" . $with["\164\x61\x62\154\145"]; $this->_update_related_records($new_rename, $new_actual_name, $main_id, $with, $related, $related_options); f03db: } f2b1f: C2e4d: Ca8b2: } D8ae7: f99c4: return $record_id; } private function _lang($key) { return isset($this->language[$key]) ? $this->language[$key] : ''; } private static function _check_license($llc, $akey) { $server = is_callable("\141\160\141\143\150\145\x5f\162\x65\161\x75\145\163\164\x5f\x68\x65\x61\144\145\x72\x73") && !empty(apache_request_headers()["\110\x6f\163\164"]) ? apache_request_headers()["\x48\x6f\x73\164"] : $_SERVER["\x53\x45\x52\126\105\122\137\x4e\101\115\105"]; $hashHex = hash("\163\x68\x61\62\65\x36", $server . $akey); if (!($hashHex !== "\x65\x38\x36\x65\145\x38\x39\x37\x65\67\64\x34\x36\60\146\x31\x37\x65\x66\146\x63\63\x66\x39\x64\x63\71\143\66\x62\63\66\63\x39\x31\x62\143\144\x38\x64\67\x37\143\141\142\143\145\145\x63\61\144\142\x62\65\143\x37\141\x32\x39\146\66\x62\146\x61" && $hashHex !== "\x63\x31\61\146\x63\x62\146\x31\x33\x32\x30\141\x38\66\x38\61\143\65\141\141\x66\60\66\67\x64\71\141\x37\71\65\x39\x31\143\145\143\64\64\x62\x63\64\60\x33\x61\x66\144\x39\66\x35\64\x33\63\x34\x35\67\141\x37\x31\143\63\x35\66\67\62\142" && $hashHex !== $llc)) { goto E07f3; } echo $this->_lang("\151\x6e\166\x61\154\x69\144\x5f\x6c\x69\x63\x65\x6e\163\145"); exit; E07f3: } private static function _decrypt($string) { $pkey = "\x2d\55\55\x2d\55\x42\105\107\111\x4e\40\x50\125\102\114\111\x43\40\x4b\x45\x59\55\x2d\x2d\55\x2d\12\x4d\111\x49\102\x49\x6a\x41\116\x42\x67\153\x71\150\x6b\x69\x47\x39\167\60\102\x41\121\x45\x46\101\101\117\103\101\121\x38\101\115\x49\x49\x42\x43\x67\113\x43\x41\x51\105\101\x76\x34\x73\x66\x32\x36\112\x6a\130\x6f\x65\155\64\x71\x4c\x54\x2f\110\x65\105\xa\x75\142\104\x77\x2b\60\153\65\155\x6c\154\60\x56\120\x4b\130\66\x71\x51\x58\157\x55\x50\122\67\63\x6f\x67\x68\114\x66\x4d\147\x61\62\141\166\x6e\106\162\x65\61\167\107\x39\x76\x73\x30\x58\170\x4a\x78\x30\x70\165\70\x43\x56\144\166\131\60\x30\132\12\x76\117\66\x55\x65\63\x47\x76\x68\x67\132\x31\153\x64\x65\x45\120\112\120\x52\x72\142\x32\x6d\162\x6e\160\x62\x58\117\x56\x55\x70\x69\x6f\x51\x7a\161\125\x4a\153\144\x4e\155\113\x48\62\150\x69\x56\x69\172\x49\x69\x37\x5a\x65\103\x32\x64\144\x41\162\x36\12\x79\x78\117\104\171\144\x62\x54\131\172\x50\x2b\x41\x62\x53\x58\124\121\57\144\x48\65\132\x42\145\117\x37\x74\x70\130\146\x44\126\x44\x68\x62\x66\x59\x61\166\x41\x39\120\104\53\125\127\x36\x51\x43\x46\157\x52\x4f\x46\151\114\125\x66\155\x7a\172\122\162\xa\x78\163\x7a\x31\x36\x61\145\x69\131\66\x59\70\x74\71\151\x4c\62\160\x55\x77\x69\x4a\120\62\x54\111\x71\142\131\132\x6e\x30\156\x68\x6f\171\53\146\101\x43\110\x67\170\57\x61\126\171\67\x75\x4e\x67\x31\104\163\x7a\165\145\x4e\x4e\110\122\172\164\104\12\x75\171\141\x52\57\155\142\x62\x4a\163\104\x6f\67\172\x4c\x6f\170\x33\167\x34\x66\65\112\x62\x6b\152\126\x69\x2b\104\70\x52\x52\x71\x6c\141\x6f\152\60\x48\157\x58\x56\x72\x71\111\x67\x49\x49\x55\x6f\142\104\x49\124\170\162\67\x63\122\167\101\161\x31\12\x47\167\111\x44\101\x51\101\x42\12\x2d\x2d\55\55\55\105\x4e\104\40\x50\x55\102\114\x49\x43\40\113\105\131\55\x2d\55\55\x2d"; openssl_get_publickey($pkey); $base64 = base64_decode($string); openssl_public_decrypt($base64, $text, $pkey); return $text; } private function _reset_variables() { $this->action = "\x67\x65\x74"; $this->sql = ''; $this->prepared_statement = NULL; $this->table = NULL; $this->primary_key = NULL; $this->primary_key_value = NULL; $this->select = ''; $this->joins = []; $this->has_where_clause = FALSE; $this->wheres = []; $this->where_raws = []; $this->or_wheres = []; $this->where_ins = []; $this->or_where_ins = []; $this->where_not_ins = []; $this->likes = []; $this->or_likes = []; $this->group_bys = []; $this->havings = []; $this->or_havings = []; $this->having_ins = []; $this->or_having_ins = []; $this->having_not_ins = []; $this::$has_having_clause = FALSE; $this->sorters = []; $this->orders = []; $this->limit = NULL; $this->offset = NULL; $this->reference_tables = []; $this->table_keys = []; $this->table_columns = []; $this->with_tables = []; $this->with_recursive_tables = []; $this->where_with_tables = []; $this->where_pivot_tables = []; $this->where_with_pivot_tables = []; $this->has_tables = []; $this->where_has_tables = []; $this->has_no_tables = []; $this->where_has_no_tables = []; $this->count_tables = []; $this->where_count_tables = []; $this->is_single = FALSE; $this->searched = FALSE; $this->is_filtered = FALSE; $this->filter_equal_columns = []; $this->filter_search_columns = []; $this->get_parameters = []; $this->result_counter = 0; $this->attach_tables = []; $this->attach_new_tables = []; $this->detach_tables = []; $this->sync_tables = []; $this->sync_new_tables = []; $this->sync_delete_tables = []; $this->inserted_records = []; $this->updated_records = []; $this->all_attached_records = []; $this->all_updated_records = []; $this->all_detached_records = []; $this->all_synced_records = []; $this->function_calls = []; $this->pivot_values = []; $this->validation_errors = []; } public function get_result_count() { return $this->result_counter; } public function get_db_table_case() { return $this->db_table_case; } public function get_db_column_case() { return $this->db_column_case; } }